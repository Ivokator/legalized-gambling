{"entries":[{"timestamp":1740174916681,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"35\" y=\"49\"><statement name=\"HANDLER\"><block type=\"OLED_init\"><value name=\"width\"><shadow type=\"math_number\"><field name=\"NUM\">128</field></shadow></value><value name=\"height\"><shadow type=\"math_number\"><field name=\"NUM\">64</field></shadow></value><next><block type=\"OLED_drawLine\"><value name=\"x0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"x1\"><shadow type=\"math_number\"><field name=\"NUM\">20</field></shadow></value><value name=\"y1\"><shadow type=\"math_number\"><field name=\"NUM\">20</field></shadow></value></block></next></block></statement></block>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":778,"length2":75},{"diffs":[[0,"ver\""],[-1," x=\"675\" y=\"91\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"OLED.init(128, 64)\nOLED.drawLine(0, 0, 20, 20)\nbasic.forever(function on_forever() {\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":93,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"SSD1306_OLED\": \"github:tinkertanker/pxt-oled-ssd1306#v2.0.16\""],[0,"\n   "]],"start1":128,"start2":128,"length1":80,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":212,"start2":212,"length1":64,"length2":44}]},{"type":"added","filename":"main.py","value":"OLED.init(128, 64)\nOLED.draw_line(0, 0, 20, 20)\n\n\n\n\ndef on_forever():\n    pass\nbasic.forever(on_forever)\n"}]},{"timestamp":1740175019392,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"35"],[0,"\" y=\""],[-1,"0"],[1,"49"],[0,"\"><s"]],"start1":104,"start2":104,"length1":15,"length2":17},{"diffs":[[0,"pe=\"OLED"],[-1,"12864_I2C"],[0,"_init\"><"]],"start1":154,"start2":154,"length1":25,"length2":16},{"diffs":[[0,"me=\""],[-1,"addr"],[1,"width\"><shadow type=\"math_number\"><field name=\"NUM\">128</field></shadow></value><value name=\"height"],[0,"\"><s"]],"start1":178,"start2":178,"length1":12,"length2":107},{"diffs":[[0,"=\"NUM\">6"],[-1,"0"],[1,"4"],[0,"</field>"]],"start1":321,"start2":321,"length1":17,"length2":17},{"diffs":[[0,"OLED"],[-1,"12864_I2C_NUMBER"],[1,"_drawLine"],[0,"\"><v"]],"start1":374,"start2":374,"length1":24,"length2":17},{"diffs":[[0," name=\"x"],[1,"0"],[0,"\"><shado"]],"start1":395,"start2":395,"length1":16,"length2":17},{"diffs":[[0," name=\"y"],[1,"0"],[0,"\"><shado"]],"start1":483,"start2":483,"length1":16,"length2":17},{"diffs":[[0,"e name=\""],[-1,"num"],[1,"x1"],[0,"\"><shado"]],"start1":570,"start2":570,"length1":19,"length2":18},{"diffs":[[0,"e=\"NUM\">"],[-1,"1"],[0,"2"],[1,"0"],[0,"</field>"]],"start1":619,"start2":619,"length1":18,"length2":18},{"diffs":[[0,"me=\""],[-1,"color"],[1,"y1"],[0,"\"><s"]],"start1":663,"start2":663,"length1":13,"length2":10},{"diffs":[[0,"e=\"NUM\">"],[-1,"1"],[1,"20"],[0,"</field>"]],"start1":708,"start2":708,"length1":17,"length2":18},{"diffs":[[0,"/block><"],[1,"block type=\"device_forever\" x=\"675\" y=\"91\"></block><"],[0,"/xml>"]],"start1":779,"start2":779,"length1":13,"length2":65}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//  Constants\nlet INITIAL_POINTS = 10\nlet INITIAL_BET = 1\nlet deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nlet blackjack_goal = 21\n//  Reset every round\nlet bet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.setBuiltInSpeakerEnabled(false)\nmusic.setVolume(255)\nlet my_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\nfunction win_round() {\n    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerUp), music.PlaybackMode.InBackground)\n}\n\nlet toggle = 0\nfunction change_toggle(toggle: number) {\n    \n    if (toggle == 0) {\n        pins.digitalWritePin(DigitalPin.P1, 1)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 1\n    } else if (toggle == 1) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 1)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 2\n    } else if (toggle == 2) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 1)\n        toggle = 0\n    }\n    \n    console.log(toggle)\n}\n\nfunction round(n: number): number {\n    n = n * 1\n    let integer_part = Math.trunc(n)\n    //  Get the integer part\n    let decimal_part = n - integer_part\n    //  Get the fractional part\n    if (decimal_part < 0.5) {\n        return integer_part\n    } else {\n        //  Round down\n        return integer_part + 1\n    }\n    \n}\n\n//  Round up\nfunction sum(numbers: any[]): number {\n    let total = 0\n    for (let n of numbers) {\n        total += n\n    }\n    //  Ensure all inputs are converted to floats before summing\n    return total\n}\n\nfunction len(lst: any[]): number {\n    let count = 0\n    for (let _ of lst) {\n        count += 1\n    }\n    return count\n}\n\nfunction set(lst: any[]): any[] {\n    let unique_items = []\n    for (let item of lst) {\n        if (unique_items.indexOf(item) < 0) {\n            unique_items.push(item)\n        }\n        \n    }\n    return unique_items\n}\n\nfunction custom_shuffle(lst: number[]) {\n    let j: number;\n    let temp: number;\n    let length = len(lst)\n    for (let i = length - 1; i > 0; i += -1) {\n        j = randint(0, i)\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    }\n}\n\nlet player = {\n    \"name\" : \"Player\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet player_hand : number[] = []\nlet player_wildcard_deck = [\"\"]\nlet player_placed_wildcards = []\nlet bot = {\n    \"name\" : \"Bot\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet bot_hand : number[] = []\nlet bot_wildcard_deck = [\"\"]\nlet bot_placed_wildcards = []\nlet wildcards = [ {\n    \"name\" : \"Justice\",\n    \"description\" : \"Swap last drawn card with bot.\",\n}\n, {\n    \"name\" : \"Moon\",\n    \"description\" : \"Change blackjack goal to 17.\",\n}\n, {\n    \"name\" : \"Sun\",\n    \"description\" : \"Change blackjack goal to 24.\",\n}\n, {\n    \"name\" : \"Death\",\n    \"description\" : \"Removes opponent's last wildcard.\",\n}\n, {\n    \"name\" : \"Strength\",\n    \"description\" : \"Both players get a random wildcard.\",\n}\n, {\n    \"name\" : \"The Devil\",\n    \"description\" : \"Increase bet by 1.\",\n}\n, {\n    \"name\" : \"The Star\",\n    \"description\" : \"Decrease bet by 1.\",\n}\n, {\n    \"name\" : \"The Fool\",\n    \"description\" : \"Copy opponent's last wildcard.\",\n}\n, {\n    \"name\" : \"The Magician\",\n    \"description\" : \"Return last drawn card to deck.\",\n}\n, {\n    \"name\" : \"Temperance\",\n    \"description\" : \"Average all hand cards.\",\n}\n, {\n    \"name\" : \"The Tower\",\n    \"description\" : \"Remove all 1s and 2s.\",\n}\n, {\n    \"name\" : \"The High Priestess\",\n    \"description\" : \"Cannot lose points this round.\",\n}\n, {\n    \"name\" : \"The Chariot\",\n    \"description\" : \"Reveal opponent's hidden card.\",\n}\n, {\n    \"name\" : \"The Lovers\",\n    \"description\" : \"Subtract 5 from hand.\",\n}\n]\nfunction bot_decision_draw(deck: any[]) {\n    /** known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \n */\n    // if bot_wildcard_deck and randint(0, 10) < 3:\n    //     pass\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n    /** \n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \n */\n}\n\nfunction player_draw_card(deck: any[]) {\n    let card: number;\n    let new_wildcard: string;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        player_hand.push(card)\n        player[\"last_draw\"] = card\n        console.log(\"Player drew a card\")\n        if (randint(0, 10) < 2) {\n            //  20% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()[\"name\"]\n            player_wildcard_deck.push(new_wildcard)\n            console.log(\"You received a wildcard:\" + new_wildcard)\n        }\n        \n        if (sum(player_hand) > blackjack_goal) {\n            console.log(\"Busted!\")\n        }\n        \n    }\n    \n}\n\nfunction bot_draw_card(deck: any[]) {\n    let card: number;\n    let new_wildcard: string;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        bot_hand.push(card)\n        bot[\"last_draw\"] = card\n        console.log(\"Bot drew a card\")\n        if (randint(0, 10) < 2) {\n            //  20% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()[\"name\"]\n            bot_wildcard_deck.push(new_wildcard)\n            console.log(\"Bot received a wildcard: \" + new_wildcard)\n        }\n        \n    }\n    \n}\n\nfunction reset_hands() {\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n    player[\"standing\"] = false\n    bot[\"standing\"] = false\n    while (len(player_hand) > 0) {\n        _py.py_array_pop(player_hand)\n    }\n    while (len(bot_hand) > 0) {\n        _py.py_array_pop(bot_hand)\n    }\n    console.log(player_hand)\n    console.log(bot_hand)\n    console.log(\"Hands resetted!\")\n}\n\nfunction play_blackjack() {\n    let deck: number[];\n    \n    let bet = 1\n    let in_playable_state = true\n    while (in_playable_state) {\n        console.log(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n        reset_hands()\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n        while (!(player[\"standing\"] && bot[\"standing\"])) {\n            //  HIT\n            input.onButtonPressed(Button.A, function on_button_pressed_a() {\n                if (len(player_hand) > 4) {\n                    message_screen(\"Hand full!\")\n                } else {\n                    player_draw_card(deck)\n                }\n                \n            })\n            //  STAND\n            input.onButtonPressed(Button.B, function on_button_pressed_b() {\n                let new_wildcard: string;\n                player[\"standing\"] = true\n                if (randint(0, 10) < 2) {\n                    //  20% chance to get a wildcard on draw\n                    new_wildcard = wildcards._pickRandom()[\"name\"]\n                    console.log(\"You received a wildcard:\" + new_wildcard)\n                }\n                \n                //  Bot draws from deck until stand\n                while (!bot[\"standing\"]) {\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n                }\n            })\n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n        }\n        bet += 1\n        who_won()\n        console.log(player_hand)\n        console.log(bot_hand)\n        asdf()\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n    }\n}\n\nplay_blackjack()\nfunction who_won() {\n    if (sum(player_hand) > blackjack_goal) {\n        console.log(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n    } else if (sum(bot_hand) > blackjack_goal) {\n        console.log(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    } else if (sum(player_hand) > sum(bot_hand)) {\n        console.log(\"You win the round!\")\n        player[\"points\"] += bet\n        bot[\"points\"] -= bet\n        win_round()\n        message_screen(\"Player wins!\")\n    } else if (sum(player_hand) == sum(bot_hand)) {\n        console.log(\"It's a tie!\")\n        message_screen(\"Tie game!\")\n    } else {\n        console.log(\"Bot wins the round!\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n    }\n    \n    let show_bot_total = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.showString(0, 3, show_bot_total, 1)\n}\n\nfunction asdf() {\n    console.log(sum(player_hand))\n    console.log(sum(bot_hand))\n}\n\nfunction tube_module_show_points() {\n    my_tm.showNumber(player[\"points\"] * 100 + bot[\"points\"])\n}\n\nfunction message_screen(message: string) {\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.showString(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n}\n\nfunction main_display() {\n    let card_to_display: string;\n    let index = 0\n    for (let card of player_hand) {\n        card_to_display = \" \" + card\n        OLED12864_I2C.showString(index * 2.7, 3, card_to_display, 1)\n        index += 1\n    }\n    index = 0\n    for (let bcard of bot_hand) {\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.showString(index * 2.7, 0, card_to_display, 1)\n        index += 1\n    }\n}\n\nfunction wildcard_display() {\n    let i = 0\n    \n    for (let card of player_wildcard_deck) {\n        \n        let card_name: string = card[\"name\"]\n        OLED12864_I2C.showString(0, i, card_name, 1)\n    }\n}\n\ninput.onPinPressed(TouchPin.P1, function on_pin_pressed_p0"],[1,"OLED.init(128, 64)\nOLED.drawLine(0, 0, 20, 20)\nbasic.forever(function on_forever"],[0,"() {"]],"start1":0,"start2":0,"length1":10155,"length2":84}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"TM1637\": \"github:makecode-extensions/tm1637#v1.0.0"],[1,"SSD1306_OLED\": \"github:tinkertanker/pxt-oled-ssd1306#v2.0.16"],[0,"\"\n  "]],"start1":139,"start2":139,"length1":134,"length2":68},{"diffs":[[0,"itor\": \""],[-1,"ts"],[1,"py"],[0,"prj\"\n}\n"]],"start1":331,"start2":331,"length1":17,"length2":17}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"# Constants\nINITIAL_POINTS = 10\nINITIAL_BET = 1\n\ndeck: List[number] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nblackjack_goal = 21  # Reset every round\n\nbet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.set_built_in_speaker_enabled(False)\nmusic.set_volume(255)\n\nmy_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\n\ndef win_round():\n    music._play_default_background(music.built_in_playable_melody(Melodies.POWER_UP), music.PlaybackMode.IN_BACKGROUND)\n\ntoggle = 0\ndef change_toggle(toggle):\n    global toggle\n    if toggle == 0:\n        pins.digital_write_pin(DigitalPin.P1, 1)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 1\n    elif toggle == 1:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 1)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 2\n    elif toggle == 2:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 1)\n        toggle = 0\n    print(toggle)\n\n\ndef round(n):\n    n = n*1\n    integer_part = int(n)  # Get the integer part\n    decimal_part = n - integer_part  # Get the fractional part\n    \n    if decimal_part < 0.5:\n        return integer_part  # Round down\n    else:\n        return integer_part + 1  # Round up\n\ndef sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n  # Ensure all inputs are converted to floats before summing\n        \n    return total\n    \n\ndef len(lst):\n    count = 0\n    for _ in lst:\n        count += 1\n    return count\n\ndef set(lst):\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n    return unique_items\n\ndef custom_shuffle(lst: List[number]):\n    length = len(lst)\n    for i in range(length - 1, 0, -1):\n        j = randint(0, i)\n        temp  = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\nplayer = {\n    \"name\": \"Player\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nplayer_hand: List[number] = []\nplayer_wildcard_deck = [\"\"]\nplayer_placed_wildcards = []\n\nbot = {\n    \"name\": \"Bot\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nbot_hand: List[number] = []\nbot_wildcard_deck = [\"\"]\nbot_placed_wildcards = []\n\n\nwildcards = [\n    {\"name\": \"Justice\", \"description\": \"Swap last drawn card with bot.\"},\n    {\"name\": \"Moon\", \"description\": \"Change blackjack goal to 17.\"},\n    {\"name\": \"Sun\", \"description\": \"Change blackjack goal to 24.\"},\n    {\"name\": \"Death\", \"description\": \"Removes opponent's last wildcard.\"},\n    {\"name\": \"Strength\", \"description\": \"Both players get a random wildcard.\"},\n    {\"name\": \"The Devil\", \"description\": \"Increase bet by 1.\"},\n    {\"name\": \"The Star\", \"description\": \"Decrease bet by 1.\"},\n    {\"name\": \"The Fool\", \"description\": \"Copy opponent's last wildcard.\"},\n    {\"name\": \"The Magician\", \"description\": \"Return last drawn card to deck.\"},\n    {\"name\": \"Temperance\", \"description\": \"Average all hand cards.\"},\n    {\"name\": \"The Tower\", \"description\": \"Remove all 1s and 2s.\"},\n    {\"name\": \"The High Priestess\", \"description\": \"Cannot lose points this round.\"},\n    {\"name\": \"The Chariot\", \"description\": \"Reveal opponent's hidden card.\"},\n    {\"name\": \"The Lovers\", \"description\": \"Subtract 5 from hand.\"},\n]\n\ndef bot_decision_draw(deck: List[int]):\n    \"\"\"known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \"\"\"\n    #if bot_wildcard_deck and randint(0, 10) < 3:\n    #    pass\n    if sum(bot_hand) >= 15:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n    else:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n    \n    \"\"\"\n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \"\"\"\n\n\ndef player_draw_card(deck: List[int]):\n    if deck:\n        card: any = deck.pop()\n        player_hand.append(card)\n        player[\"last_draw\"]: number = card\n        print(f\"Player drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            player_wildcard_deck.append(new_wildcard)\n            print(f\"You received a wildcard:\" + new_wildcard)\n\n        if sum(player_hand) > blackjack_goal:\n            print(\"Busted!\")\n\n\n\ndef bot_draw_card(deck: List[int]):\n    if deck:\n        card: number = deck.pop()\n        bot_hand.append(card)\n        bot[\"last_draw\"] = card\n        print(f\"Bot drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            bot_wildcard_deck.append(new_wildcard)\n            print(\"Bot received a wildcard: \" + new_wildcard)\n\ndef reset_hands():\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n\n    player[\"standing\"] = False\n    bot[\"standing\"] = False\n\n    while len(player_hand) > 0:\n        player_hand.pop()\n\n    while len(bot_hand) > 0:\n        bot_hand.pop()\n\n    print(player_hand)\n    print(bot_hand)\n    print(\"Hands resetted!\")\n\ndef play_blackjack():\n    global blackjack_goal\n    bet = 1\n    in_playable_state = True\n    while in_playable_state:\n        print(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        while not (player[\"standing\"] and bot[\"standing\"]):\n            # HIT\n            def on_button_pressed_a():\n            \n                if len(player_hand) > 4:\n                    message_screen(\"Hand full!\")\n                else:\n                    player_draw_card(deck)\n\n            input.on_button_pressed(Button.A, on_button_pressed_a)\n                \n            # STAND\n            def on_button_pressed_b():\n                player[\"standing\"] = True\n\n                if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n                    new_wildcard: string = wildcards._pick_random()['name']\n                    print(f\"You received a wildcard:\" + new_wildcard)\n                \n                # Bot draws from deck until stand\n                while not bot[\"standing\"]:\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n\n            input.on_button_pressed(Button.B, on_button_pressed_b)\n            \n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n\n        bet += 1\n        who_won()\n        \n        print(player_hand)\n        print(bot_hand)\n        asdf()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n\n\n\nplay_blackjack()\n\ndef who_won():\n    if sum(player_hand) > blackjack_goal:\n        print(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n\n        message_screen(\"Bot wins!\")\n\n    elif sum(bot_hand) > blackjack_goal:\n        print(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n\n        message_screen(\"Player wins!\")\n    else:\n        if (sum(player_hand) > sum(bot_hand)):\n            print(\"You win the round!\")\n            player[\"points\"] += bet\n            bot[\"points\"] -= bet\n            win_round()\n\n            message_screen(\"Player wins!\")\n        elif sum(player_hand) == sum(bot_hand):\n            print(\"It's a tie!\")\n            message_screen(\"Tie game!\")\n        else:\n            print(\"Bot wins the round!\")\n            player[\"points\"] -= bet\n            bot[\"points\"] += bet\n\n            message_screen(\"Bot wins!\")\n\n    show_bot_total: str = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.show_string(0, 3, show_bot_total, 1)\n\ndef asdf():\n    print(sum(player_hand))\n    print(sum(bot_hand))\n\ndef tube_module_show_points():\n    my_tm.show_number(player[\"points\"] * 100 + bot[\"points\"])\n\ndef message_screen(message: str):\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.show_string(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n\n\ndef main_display():\n    index = 0\n    for card in player_hand:\n        card_to_display = \" \" + card\n        OLED12864_I2C.show_string(index*2.7, 3, card_to_display, 1)\n\n        index += 1\n    \n    index = 0\n    for bcard in bot_hand:\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.show_string(index*2.7, 0, card_to_display, 1)\n        index += 1\n\ndef wildcard_display():\n    i = 0\n    for card in player_wildcard_deck:\n        OLED12864_I2C.show_string(0, i, card['name'], 1)\n\n\ndef on_pin_pressed_p0():\n    pass\ninput.on_pin_pressed(TouchPin.P1, on_pin_pressed_p0)"],[1,"OLED.init(128, 64)\nOLED.draw_line(0, 0, 20, 20)\n\n\n\n\ndef on_forever():\n    pass\nbasic.forever(on_forever)\n"]],"start1":0,"start2":0,"length1":9080,"length2":105}]}]},{"timestamp":1740943079395,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"d_name: "],[-1,"any"],[1,"string"],[0," = card["]],"start1":10001,"start2":10001,"length1":19,"length2":22}]}]},{"timestamp":1740943167694,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ards"],[-1,": {}"],[0," = ["]],"start1":2755,"start2":2755,"length1":12,"length2":8},{"diffs":[[0,"[ {\n    "],[1,"\""],[0,"name"],[1,"\""],[0," : \"Just"]],"start1":2762,"start2":2762,"length1":20,"length2":22},{"diffs":[[0,"e\",\n    "],[1,"\""],[0,"descript"]],"start1":2786,"start2":2786,"length1":16,"length2":17},{"diffs":[[0,"cription"],[1,"\""],[0," : \"Swap"]],"start1":2798,"start2":2798,"length1":16,"length2":17},{"diffs":[[0,"ildcard_deck) {\n"],[1,"        \n"],[0,"        let card"]],"start1":9961,"start2":9961,"length1":32,"length2":41},{"diffs":[[0,"d_name: "],[-1,"string"],[1,"any"],[0," = card["]],"start1":10001,"start2":10001,"length1":22,"length2":19}]}]},{"timestamp":1740943767259,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"gle = 0\n"],[-1,"\n"],[0,"function"]],"start1":482,"start2":482,"length1":17,"length2":16},{"diffs":[[0," []\n"],[-1,"\ntype Dictionary = {\n    [key: string]: string;\n}\n\n"],[0,"let "]],"start1":2742,"start2":2742,"length1":59,"length2":8},{"diffs":[[0,"ds: "],[-1,"Dictionary[]"],[1,"{}"],[0," = ["]],"start1":2757,"start2":2757,"length1":20,"length2":10},{"diffs":[[0,"} = [ {\n    "],[-1,"\""],[0,"name"],[-1,"\""],[0," : \"Justice\""]],"start1":2762,"start2":2762,"length1":30,"length2":28},{"diffs":[[0," \"Justice\",\n    "],[-1,"\""],[0,"description\" : \""]],"start1":2780,"start2":2780,"length1":33,"length2":32},{"diffs":[[0," description"],[-1,"\""],[0," : \"Swap las"]],"start1":2795,"start2":2795,"length1":25,"length2":24},{"diffs":[[0,"ole.log("],[-1,"\"Player hand:\" + "],[0,"player_h"]],"start1":6248,"start2":6248,"length1":33,"length2":16},{"diffs":[[0,"console.log("],[-1,"\"Bot hand:\" + "],[0,"bot_hand)\n  "]],"start1":6273,"start2":6273,"length1":38,"length2":24},{"diffs":[[0,"log("],[-1,"\"Bet: \" + "],[0,"bet)"]],"start1":6487,"start2":6487,"length1":18,"length2":8},{"diffs":[[0,"log("],[-1,"\"Player hand:\" + "],[0,"play"]],"start1":7888,"start2":7888,"length1":25,"length2":8},{"diffs":[[0,"log("],[-1,"\"Bot hand:\" + "],[0,"bot_"]],"start1":7921,"start2":7921,"length1":22,"length2":8},{"diffs":[[0," asdf()\n"],[-1,"\n"],[0,"        "]],"start1":7942,"start2":7942,"length1":17,"length2":16},{"diffs":[[0,"  }\n"],[-1,"    console.log(\"Player points: \" + player[\"points\"])\n    console.log(\"Bot points: \" + bot[\"points\"])\n"],[0,"    "]],"start1":8964,"start2":8964,"length1":110,"length2":8},{"diffs":[[0,"log("],[-1,"\"Sum of player hand: \"+ "],[0,"sum("]],"start1":9112,"start2":9112,"length1":32,"length2":8},{"diffs":[[0,"log("],[-1,"\"Sum of bot hand: \" + "],[0,"sum("]],"start1":9146,"start2":9146,"length1":30,"length2":8},{"diffs":[[0," = card["],[-1,"0"],[1,"\"name\""],[0,"]\n      "]],"start1":10006,"start2":10006,"length1":17,"length2":22}]}]},{"timestamp":1740944289557,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,")\n    }\n"],[-1,"\n"],[0,"    cons"]],"start1":6298,"start2":6298,"length1":17,"length2":16},{"diffs":[[0,"\"Player hand"],[-1," (reset!)"],[0,":\" + player_"]],"start1":6322,"start2":6322,"length1":33,"length2":24},{"diffs":[[0,"hand"],[-1," (reset!)"],[0,":\" +"]],"start1":6373,"start2":6373,"length1":17,"length2":8},{"diffs":[[0,"d(deck)\n"],[-1,"        \n"],[0,"        "]],"start1":6792,"start2":6792,"length1":25,"length2":16},{"diffs":[[0,"who_won("],[-1,"bet"],[0,")\n      "]],"start1":7969,"start2":7969,"length1":19,"length2":16},{"diffs":[[0,"won("],[-1,"bet: number"],[0,") {\n"]],"start1":8184,"start2":8184,"length1":19,"length2":8}]}]},{"timestamp":1740944602979,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"function player_wins(bet: number) {\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    }\n\n    function bot_wins(bet: number) {"],[1,"if (sum(player_hand) > blackjack_goal) {\n        console.log(\"You busted! Bot wins the round.\")"],[0,"\n   "]],"start1":8234,"start2":8234,"length1":207,"length2":103},{"diffs":[[0,"   }"],[-1,"\n\n    if (sum(player_hand) > blackjack_goal) {\n       "],[1," else"],[0," if "]],"start1":8432,"start2":8432,"length1":62,"length2":13},{"diffs":[[0,"l) {"],[-1,"\n\n        }\n        "],[0,"\n   "]],"start1":8475,"start2":8475,"length1":28,"length2":8},{"diffs":[[0,"   console.log(\""],[-1,"You"],[1,"Bot"],[0," busted! Bot win"]],"start1":8485,"start2":8485,"length1":35,"length2":35},{"diffs":[[0,"Bot busted! "],[-1,"Bot"],[1,"You"],[0," win"],[-1,"s"],[0," the round.\""]],"start1":8501,"start2":8501,"length1":32,"length2":31},{"diffs":[[0," bot"],[-1,"_wins(bet)\n\n    } else if (sum(bot_hand) > blackjack_goal) {\n        console.log(\"Bot busted! You win the "],[1,"[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_"],[0,"round"],[-1,".\""],[1,"("],[0,")\n  "]],"start1":8541,"start2":8541,"length1":121,"length2":76},{"diffs":[[0,"    "],[-1,"p"],[1,"message_screen(\"P"],[0,"layer"],[-1,"_"],[1," "],[0,"wins"],[-1,"(bet)\n        "],[1,"!\")"],[0,"\n   "]],"start1":8619,"start2":8619,"length1":33,"length2":38},{"diffs":[[0,"  player"],[-1,"_wins(bet)\n"],[1,"[\"points\"] += bet\n        bot[\"points\"] -= bet\n        win_round()\n        message_screen(\"Player wins!\")"],[0,"\n    } e"]],"start1":8753,"start2":8753,"length1":27,"length2":121},{"diffs":[[0,"    "],[-1,"bot_wins(bet)\n"],[1,"player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")"],[0,"\n   "]],"start1":9050,"start2":9050,"length1":22,"length2":96}]}]},{"timestamp":1740945112155,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"hand"],[-1,".join()"],[0,")\n  "]],"start1":6356,"start2":6356,"length1":15,"length2":8}]}]},{"timestamp":1740949831941,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\" + bot_hand"],[-1,".join()"],[0,")\n    consol"]],"start1":6404,"start2":6404,"length1":31,"length2":24}]}]},{"timestamp":1740949838015,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  })"],[-1,"\n\n            // VIEW WILDCARDS\n            input.onPinPressed(TouchPin.P2, function() {\n                if (TouchPin.P2) {\n                    \n                }\n            })\n\n"],[0,"\n   "]],"start1":7876,"start2":7876,"length1":187,"length2":8},{"diffs":[[0,"ts()"],[-1,"\n\n    \n\n"],[0,"\n   "]],"start1":7971,"start2":7971,"length1":16,"length2":8},{"diffs":[[0," player_hand"],[-1,".join()"],[0,")\n        co"]],"start1":8060,"start2":8060,"length1":31,"length2":24},{"diffs":[[0,"\" + bot_hand"],[-1,".join()"],[0,")\n        as"]],"start1":8104,"start2":8104,"length1":31,"length2":24},{"diffs":[[0,"kjack()\n"],[1,""],[0,"function"]],"start1":8208,"start2":8208,"length1":16,"length2":16},{"diffs":[[0,": number) {\n"],[-1,"\n"],[0,"    function"]],"start1":8236,"start2":8236,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"console.log(player_wildcard_deck.join())"],[0,"\n   "]],"start1":10316,"start2":10316,"length1":48,"length2":8}]}]},{"timestamp":1740950255074,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n.P2"],[-1,":tou"],[0,") {\n"]],"start1":7996,"start2":7996,"length1":12,"length2":8}]}]},{"timestamp":1740951247840,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,".P2:"],[-1,"T"],[1,"t"],[0,"ou"],[-1,"chButtonEvent"],[0,") {\n"]],"start1":7997,"start2":7997,"length1":24,"length2":11}]}]},{"timestamp":1740951249156,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ck)\n"],[-1,"        let wildcard_toggle: boolean = false\n"],[0,"    "]],"start1":6829,"start2":6829,"length1":53,"length2":8},{"diffs":[[0,") {\n"],[-1,"            console.log(\"Main display!\")\n\n"],[0,"    "]],"start1":6897,"start2":6897,"length1":50,"length2":8},{"diffs":[[0,"if ("],[-1,"wildcard_toggle) {\n                    // Main display with normal cards\n                    main_display()\n                } else {\n                    // Wildcard display\n                    wildcard_display()\n                }\n                \n                wildcard_toggle = !wildcard_toggle"],[1,"TouchPin.P2:TouchButtonEvent) {\n                    \n                }"],[0,"\n   "]],"start1":7985,"start2":7985,"length1":305,"length2":78},{"diffs":[[0,"00)\n            "],[1,"main_display()"],[0,"\n            tub"]],"start1":8103,"start2":8103,"length1":32,"length2":46},{"diffs":[[0," = 0"],[-1,"\n\n    console.log(\"Wildcard display!\")"],[0,"\n   "]],"start1":10530,"start2":10530,"length1":46,"length2":8},{"diffs":[[0,"join())\n"],[-1,"\n\n"],[0,"    for "]],"start1":10572,"start2":10572,"length1":18,"length2":16},{"diffs":[[0,"name, 1)\n    }\n}"],[1,"\n\ninput.onPinPressed(TouchPin.P1, function on_pin_pressed_p0() {\n    \n})\n"]],"start1":10709,"start2":10709,"length1":16,"length2":89}]}]},{"timestamp":1740951841335,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[1,"console.log(\"Main display!\")"],[0,"\n\n      "]],"start1":6950,"start2":6950,"length1":16,"length2":44},{"diffs":[[0,"true"],[-1,"\n\n                //  20% chance to get a wildcard on draw"],[0,"\n   "]],"start1":7474,"start2":7474,"length1":66,"length2":8},{"diffs":[[0," // "],[-1,"Limit 4 wildcards\n                    if (!(len(player_wildcard_deck) > 3)) {\n    "],[1," 20% chance to get a wildcard on draw\n"],[0,"    "]],"start1":7540,"start2":7540,"length1":90,"length2":46},{"diffs":[[0,"                "],[-1," "],[-1,"   "],[0,"console.log(\"You"]],"start1":7653,"start2":7653,"length1":36,"length2":32},{"diffs":[[0,"rd)\n"],[-1,"                    }\n                    \n"],[0,"    "]],"start1":7720,"start2":7720,"length1":51,"length2":8},{"diffs":[[0,"y()\n"],[-1,"                    console.log(\"Main display!\")\n"],[0,"    "]],"start1":8180,"start2":8180,"length1":57,"length2":8},{"diffs":[[0,"y()\n"],[-1,"                    console.log(\"Wildcard display!\")\n"],[0,"    "]],"start1":8284,"start2":8284,"length1":61,"length2":8},{"diffs":[[0," i = 0\n\n"],[1,"    console.log(\"Wildcard display!\")\n"],[0,"    cons"]],"start1":10828,"start2":10828,"length1":16,"length2":53},{"diffs":[[0,"oin())\n\n"],[1,"\n"],[0,"    for "]],"start1":10911,"start2":10911,"length1":16,"length2":17},{"diffs":[[0,"deck"],[-1,";; i++"],[0,") {\n"]],"start1":10957,"start2":10957,"length1":14,"length2":8}]}]},{"timestamp":1740952439187,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ildcard_deck"],[1,";; i++"],[0,") {\n        "]],"start1":11134,"start2":11134,"length1":24,"length2":30},{"diffs":[[0,"name, 1)\n    }\n}"],[-1,"\n\n"]],"start1":11240,"start2":11240,"length1":18,"length2":16}]}]},{"timestamp":1740952511196,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," = l"],[-1,"st.length"],[1,"en(lst)"],[0,"\n   "]],"start1":2116,"start2":2116,"length1":17,"length2":15}]}]},{"timestamp":1740953166038,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"yer_hand"],[1,")"],[0," > 0) {\n"]],"start1":6174,"start2":6174,"length1":16,"length2":17}]}]},{"timestamp":1740953177807,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"type Dictionary = {\n    [key: string]: string;\n}\n\n"],[0,"let "]],"start1":471,"start2":471,"length1":58,"length2":8},{"diffs":[[0,"] {\n"],[-1,"    console.log(\"Deprecated: len()\")\n"],[0,"    "]],"start1":1828,"start2":1828,"length1":45,"length2":8},{"diffs":[[0,"ard_deck"],[-1,": Dictionary[]"],[0," = ["],[1,"\"\""],[0,"]\nlet pl"]],"start1":2473,"start2":2473,"length1":34,"length2":22},{"diffs":[[0,"ard_deck"],[-1,": Dictionary[]"],[0," = ["],[1,"\"\""],[0,"]\nlet bo"]],"start1":2703,"start2":2703,"length1":34,"length2":22},{"diffs":[[0,"s = []\n\n"],[1,"type Dictionary = {\n    [key: string]: string;\n}\n"],[0,"\nlet wil"]],"start1":2742,"start2":2742,"length1":16,"length2":65},{"diffs":[[0,"ldcard: "],[-1,"Dictionary"],[1,"string"],[0,";\n    if"]],"start1":4901,"start2":4901,"length1":26,"length2":22},{"diffs":[[0,"Random()"],[1,"[\"name\"]"],[0,"\n       "]],"start1":5208,"start2":5208,"length1":16,"length2":24},{"diffs":[[0,"  while "],[1,"(len"],[0,"(player_"]],"start1":6158,"start2":6158,"length1":16,"length2":20},{"diffs":[[0,"(player_hand"],[-1,".length"],[0," > 0) {\n    "]],"start1":6170,"start2":6170,"length1":31,"length2":24},{"diffs":[[0,"  while "],[1,"(len"],[0,"(bot_han"]],"start1":6236,"start2":6236,"length1":16,"length2":20},{"diffs":[[0,"bot_hand"],[-1,".length"],[1,")"],[0," > 0) {\n"]],"start1":6249,"start2":6249,"length1":23,"length2":17},{"diffs":[[0,"             if "],[1,"(len"],[0,"(player_hand.len"]],"start1":7061,"start2":7061,"length1":32,"length2":36},{"diffs":[[0,"yer_hand"],[-1,".length"],[1,")"],[0," > 4) {\n"]],"start1":7085,"start2":7085,"length1":23,"length2":17},{"diffs":[[0,"     if "],[1,"(!(len"],[0,"(player_"]],"start1":7608,"start2":7608,"length1":16,"length2":22},{"diffs":[[0,"deck"],[-1,".length < 4"],[1,") > 3)"],[0,") {\n"]],"start1":7639,"start2":7639,"length1":19,"length2":14},{"diffs":[[0," i = 0\n\n    "],[1,"console.log(player_wildcard_deck.join())"],[0,"\n\n    for (l"]],"start1":11052,"start2":11052,"length1":24,"length2":64},{"diffs":[[0,"[0]\n"],[-1,"        console.log(card_name)\n"],[0,"    "]],"start1":11187,"start2":11187,"length1":39,"length2":8}]}]},{"timestamp":1740953725048,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"new_wildcard"],[-1,"[\"name\"]"],[0,")\n        }\n"]],"start1":5388,"start2":5388,"length1":32,"length2":24},{"diffs":[[0,"w_wildcard: "],[-1,"Dictionary"],[1,"string"],[0,";\n    if (de"]],"start1":5608,"start2":5608,"length1":34,"length2":30},{"diffs":[[0,"ds._pickRandom()"],[1,"[\"name\"]"],[0,"\n            bot"]],"start1":5902,"start2":5902,"length1":32,"length2":40},{"diffs":[[0,"new_wildcard"],[-1,"[\"name\"]"],[0,")\n        }\n"]],"start1":6030,"start2":6030,"length1":32,"length2":24},{"diffs":[[0,"le ("],[1,"in_"],[0,"play"],[-1,"er[\"points\"] > 0 && bot[\"points\"] > 0"],[1,"able_state"],[0,") {\n"]],"start1":6640,"start2":6640,"length1":49,"length2":25},{"diffs":[[0,"nding\"])) {\n"],[1,"            \n\n"],[0,"            "]],"start1":6998,"start2":6998,"length1":24,"length2":38},{"diffs":[[0,"w_wildcard: "],[-1,"Dictionary"],[1,"string"],[0,";\n          "]],"start1":7455,"start2":7455,"length1":34,"length2":30},{"diffs":[[0,"ds._pickRandom()"],[1,"[\"name\"]"],[0,"\n               "]],"start1":7763,"start2":7763,"length1":32,"length2":40},{"diffs":[[0,"wildcard"],[-1,"[\"name\"]"],[0,")\n      "]],"start1":7857,"start2":7857,"length1":24,"length2":16},{"diffs":[[0,"   }"],[-1,"\n\n    if (player[\"points\"] > bot[\"points\"]) {\n        // Player wins\n        OLED12864_I2C.showString(0, 1, \"YOU WIN!\", 1)\n        console.log(\"PLAYER WINS!\")\n        \n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 1, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n    }"],[0,"\n}\n\n"]],"start1":8997,"start2":8997,"length1":306,"length2":8},{"diffs":[[0," i = 0\n\n"],[1,"    \n\n"],[0,"    for "]],"start1":11116,"start2":11116,"length1":16,"length2":22},{"diffs":[[0," = card["],[-1,"\"name\""],[1,"0"],[0,"]\n      "]],"start1":11204,"start2":11204,"length1":22,"length2":17}]}]},{"timestamp":1740954274890,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"w\"] = 0\n"],[-1,"    \n"],[0,"    play"]],"start1":6159,"start2":6159,"length1":21,"length2":16},{"diffs":[[0,"= false\n"],[-1,"\n"],[0,"    "],[1,"while ("],[0,"player_h"]],"start1":6218,"start2":6218,"length1":21,"length2":27},{"diffs":[[0,".length "],[-1,"="],[1,">"],[0," 0"],[1,") {"],[0,"\n    "],[1,"    _py.py_array_pop(player_hand)\n    }\n    while ("],[0,"bot_hand"]],"start1":6248,"start2":6248,"length1":24,"length2":78},{"diffs":[[0,".length "],[-1,"= 0\n"],[1,"> 0) {\n        _py.py_array_pop(bot_hand)\n    }\n\n    console.log(\"Player hand (reset!):\" + player_hand.join())\n    console.log(\"Bot hand (reset!):\" + bot_hand.join())"],[0,"\n    con"]],"start1":6326,"start2":6326,"length1":20,"length2":182},{"diffs":[[0,"ds reset"],[1,"ted"],[0,"!\")\n}\n\nf"]],"start1":6521,"start2":6521,"length1":16,"length2":19},{"diffs":[[0,"bet = 1\n"],[1,"    let in_playable_state = true"],[0,"\n    whi"]],"start1":6604,"start2":6604,"length1":16,"length2":48},{"diffs":[[0,"ts\"] > 0) {\n"],[-1,"\n"],[0,"        cons"]],"start1":6689,"start2":6689,"length1":25,"length2":24},{"diffs":[[0,"t: \" + bet)\n"],[-1,"\n"],[0,"        deck"]],"start1":6724,"start2":6724,"length1":25,"length2":24},{"diffs":[[0,"set_hands()\n"],[-1,"\n"],[0,"        play"]],"start1":6834,"start2":6834,"length1":25,"length2":24},{"diffs":[[0,"ck)\n"],[-1,"\n        console.log(\"Player hand (reset!):\" + player_hand.join())\n        console.log(\"Bot hand (reset!):\" + bot_hand.join())\n\n"],[0,"    "]],"start1":6929,"start2":6929,"length1":136,"length2":8},{"diffs":[[0,"owString(0, "],[-1,"0"],[1,"1"],[0,", \"YOU WIN!\""]],"start1":9120,"start2":9120,"length1":25,"length2":25},{"diffs":[[0,"YER WINS!\")\n"],[1,"        \n"],[0,"    } else {"]],"start1":9174,"start2":9174,"length1":24,"length2":33},{"diffs":[[0,"ring(0, "],[-1,"0"],[1,"1"],[0,", \"YOU L"]],"start1":9256,"start2":9256,"length1":17,"length2":17},{"diffs":[[0,"  }\n"],[-1,"    OLED12864_I2C.showString(0, 3, \"Reset to play again.\", 1)\n    basic.pause(5000)\n\n    basic.clearScreen()\n    \n    my_tm.off()\n    OLED12864_I2C.off()\n    return\n"],[0,"}\n\np"]],"start1":9322,"start2":9322,"length1":173,"length2":8},{"diffs":[[0,"kjack()\n"],[-1,"\n"],[0,"function"]],"start1":9338,"start2":9338,"length1":17,"length2":16}]}]},{"timestamp":1740954855487,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"nstants\n"],[-1,"cons"],[1,"le"],[0,"t INITIA"]],"start1":6,"start2":6,"length1":20,"length2":18},{"diffs":[[0,"TS = 10\n"],[-1,"cons"],[1,"le"],[0,"t INITIA"]],"start1":30,"start2":30,"length1":20,"length2":18},{"diffs":[[0,"= 1\n"],[-1,"\nlet blackjack_goal: number = 21\n\nlet bet: number"],[1,"let deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nlet blackjack_goal = 21\n//  Reset every round\nlet bet"],[0," = I"]],"start1":54,"start2":54,"length1":57,"length2":116},{"diffs":[[0,"IAL_BET\n"],[-1,"\n"],[0,"OLED1286"]],"start1":173,"start2":173,"length1":17,"length2":16},{"diffs":[[0,"me(255)\n"],[-1,"\n"],[0,"let my_t"]],"start1":255,"start2":255,"length1":17,"length2":16},{"diffs":[[0,"tm.on()\n"],[-1,"\n"],[0,"function"]],"start1":328,"start2":328,"length1":17,"length2":16},{"diffs":[[0,"(toggle)\n}\n\n"],[1,"function round(n: number): number {\n    n = n * 1\n    let integer_part = Math.trunc(n)\n    //  Get the integer part\n    let decimal_part = n - integer_part\n    //  Get the fractional part\n    if (decimal_part < 0.5) {\n        return integer_part\n    } else {\n        //  Round down\n        return integer_part + 1\n    }\n    \n}\n\n//  Round up\n"],[0,"function sum"]],"start1":1176,"start2":1176,"length1":24,"length2":365},{"diffs":[[0,"ion "],[-1,"set(lst: any[]): any[] {"],[1,"len(lst: any[]): number {\n    let count = 0\n    for (let _ of lst) {\n        count += 1\n    }\n    return count\n}\n\nfunction set(lst: any[]): any[] {\n    console.log(\"Deprecated: len()\")"],[0,"\n   "]],"start1":1730,"start2":1730,"length1":32,"length2":192},{"diffs":[[0,"ck: "],[-1,"number[]) {\n\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    "],[1,"any[]) {\n    /** known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \n */\n    // if bot_wildcard_deck and randint(0, 10) < 3:\n    //     pass\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n    /** \n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \n */"],[0,"\n}\n\n"]],"start1":4079,"start2":4079,"length1":202,"length2":807},{"diffs":[[0,"draw_card(deck: "],[-1,"number"],[1,"any"],[0,"[]) {\n    let ca"]],"start1":4902,"start2":4902,"length1":38,"length2":35},{"diffs":[[0,"d(deck: "],[-1,"number"],[1,"any"],[0,"[]) {\n  "]],"start1":5567,"start2":5567,"length1":22,"length2":19},{"diffs":[[0,"\n   "],[-1," player_hand.splice(0,"],[0," pla"]],"start1":6231,"start2":6231,"length1":30,"length2":8},{"diffs":[[0,"ngth"],[-1,")"],[1," = 0"],[0,"\n   "],[-1," bot_hand.splice(0,"],[0," bot"]],"start1":6250,"start2":6250,"length1":32,"length2":16},{"diffs":[[0,"d.length"],[-1,")"],[1," = 0"],[0,"\n\n    co"]],"start1":6270,"start2":6270,"length1":17,"length2":20},{"diffs":[[0,"nts()\n\n    \n"],[1,"\n\n"],[0,"        }\n  "]],"start1":8659,"start2":8659,"length1":24,"length2":26},{"diffs":[[0,"ho_won(bet)\n"],[-1,"\n"],[0,"        cons"]],"start1":8709,"start2":8709,"length1":25,"length2":24},{"diffs":[[0,"ot_hand.join())\n"],[-1,"\n"],[0,"        asdf()\n\n"]],"start1":8813,"start2":8813,"length1":33,"length2":32},{"diffs":[[0,") {\n"],[-1,"    let player_points = Math.constrain(player[\"points\"], 0, 20)\n    let bot_points = Math.constrain(bot[\"points\"], 0, 20)\n    \n"],[0,"    "]],"start1":10757,"start2":10757,"length1":135,"length2":8},{"diffs":[[0,"r(player"],[-1,"_"],[1,"[\""],[0,"points"],[1,"\"]"],[0," * 100 +"]],"start1":10780,"start2":10780,"length1":23,"length2":26},{"diffs":[[0,"00 + bot"],[-1,"_"],[1,"[\""],[0,"points"],[1,"\"]"],[0,")\n}\n\nfun"]],"start1":10802,"start2":10802,"length1":23,"length2":26}]}]},{"timestamp":1740955448364,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ing;\n}\n\n"],[-1,"\n"],[0,"let togg"]],"start1":465,"start2":465,"length1":17,"length2":16},{"diffs":[[0,"card"],[-1,": \" + card"],[1,"\""],[0,")\n  "]],"start1":3983,"start2":3983,"length1":18,"length2":9},{"diffs":[[0,"            })\n\n"],[1,"\n"],[0,"            basi"]],"start1":7450,"start2":7450,"length1":32,"length2":33},{"diffs":[[0,"w_points()\n\n"],[1,"    \n"],[0,"        }\n  "]],"start1":7537,"start2":7537,"length1":24,"length2":29},{"diffs":[[0,"    "],[-1,"display_sum_of_both_hands"],[1,"asdf"],[0,"()\n\n"]],"start1":7716,"start2":7716,"length1":33,"length2":12},{"diffs":[[0,"\n    }\n\n"],[-1,"\n"],[0,"    if ("]],"start1":7783,"start2":7783,"length1":17,"length2":16},{"diffs":[[0,"0)\n\n"],[-1,"    // END GAME\n\n"],[0,"    "]],"start1":8160,"start2":8160,"length1":25,"length2":8},{"diffs":[[0,"creen()\n"],[1,"    \n"],[0,"    my_t"]],"start1":8180,"start2":8180,"length1":16,"length2":21},{"diffs":[[0,"4_I2C.off()\n"],[-1,"\n"],[0,"    return\n}"]],"start1":8221,"start2":8221,"length1":25,"length2":24},{"diffs":[[0,"ion "],[-1,"display_sum_of_both_hands"],[1,"asdf"],[0,"() {"]],"start1":9480,"start2":9480,"length1":33,"length2":12},{"diffs":[[0," 0, 20)\n"],[1,"    "],[0,"\n"],[-1,""],[0,"    my_t"]],"start1":9758,"start2":9758,"length1":17,"length2":21},{"diffs":[[0,") {\n"],[-1,"\n    OLED12864_I2C.clear()\n\n"],[0,"    "]],"start1":10038,"start2":10038,"length1":36,"length2":8},{"diffs":[[0,"ndex"],[-1,": number"],[0," = 0\n"],[-1,"\n"],[0,"    "]],"start1":10084,"start2":10084,"length1":22,"length2":13},{"diffs":[[0," += 1\n    }\n"],[-1,"\n"],[0,"    index = "]],"start1":10248,"start2":10248,"length1":25,"length2":24},{"diffs":[[0,"ard\n"],[-1,"        if (index) {\n    "],[0,"    "]],"start1":10342,"start2":10342,"length1":33,"length2":8},{"diffs":[[0," 1)\n"],[-1,"        } else {\n            OLED12864_I2C.showString(index * 2.7, 0, \"?\", 1)\n        }\n"],[0,"    "]],"start1":10411,"start2":10411,"length1":96,"length2":8},{"diffs":[[0,") {\n"],[-1,"    OLED12864_I2C.clear()\n\n"],[0,"    "]],"start1":10469,"start2":10469,"length1":35,"length2":8},{"diffs":[[0,"  let i = 0\n"],[1,"\n"],[0,"    for (let"]],"start1":10475,"start2":10475,"length1":24,"length2":25}]}]},{"timestamp":1740956018160,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  return\n}\n\n"],[1,"play_blackjack()\n\n"],[0,"function who"]],"start1":8274,"start2":8274,"length1":24,"length2":42},{"diffs":[[0,"\n}\n\n"],[-1,"\nfunction main_menu() {\n    OLED12864_I2C.showString(0, 0, \"ARCANA BLACKJACK\", 1)\n    OLED12864_I2C.showString(0, 3, \"A+B to play.\", 1)\n    OLED12864_I2C.invert(true)\n\n    input.onButtonPressed(Button.AB, function() {\n        play_blackjack()\n    })\n}\n\n\n\nmain_menu()"]],"start1":10900,"start2":10900,"length1":270,"length2":4}]}]},{"timestamp":1740956601549,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"NTS = 10"],[1,"\nconst INITIAL_BET = 1"],[0,"\n\nlet bl"]],"start1":31,"start2":31,"length1":16,"length2":38},{"diffs":[[0,"r = 21\n\n"],[1,"let bet: number = INITIAL_BET\n\n"],[0,"OLED1286"]],"start1":88,"start2":88,"length1":16,"length2":47},{"diffs":[[0," string;\n}\n\n"],[1,"\n"],[0,"let toggle ="]],"start1":461,"start2":461,"length1":24,"length2":25}]}]},{"timestamp":1740957103758,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n"],[1,"\n"],[0,"    "],[-1,"let total_player_hand: number = sum(player_hand)\n    let total_bot_hand: number = sum(bot_hand)\n\n    if (total_player_hand"],[1,"if (sum(player_hand)"],[0," > b"]],"start1":8568,"start2":8568,"length1":134,"length2":33},{"diffs":[[0,"if ("],[-1,"total_"],[1,"sum("],[0,"bot_hand"],[-1," <"],[1,") >"],[0," bla"]],"start1":8626,"start2":8626,"length1":24,"length2":23},{"diffs":[[0,"ackjack_goal) {\n"],[1,"\n"],[0,"    "],[1,"    }\n        \n"],[0,"        console."]],"start1":8648,"start2":8648,"length1":36,"length2":52},{"diffs":[[0,".\")\n        "],[-1,"    "],[0,"bot_wins(bet"]],"start1":8735,"start2":8735,"length1":28,"length2":24},{"diffs":[[0,"ns(bet)\n"],[-1,"        }\n        "],[0,"\n    } e"]],"start1":8753,"start2":8753,"length1":34,"length2":16},{"diffs":[[0,"lse if ("],[-1,"total_"],[1,"sum("],[0,"bot_hand"],[1,")"],[0," > black"]],"start1":8769,"start2":8769,"length1":30,"length2":29},{"diffs":[[0,"\n    } else if ("],[-1,"total_"],[1,"sum("],[0,"player_hand > to"]],"start1":8898,"start2":8898,"length1":38,"length2":36},{"diffs":[[0,"hand"],[1,")"],[0," > "],[-1,"total_"],[1,"sum("],[0,"bot_"]],"start1":8925,"start2":8925,"length1":17,"length2":16},{"diffs":[[0," > sum(bot_hand)"],[1,")"],[0," {\n        conso"]],"start1":8930,"start2":8930,"length1":32,"length2":33},{"diffs":[[0,"lse if ("],[-1,"total_"],[1,"sum("],[0,"player_h"]],"start1":9025,"start2":9025,"length1":22,"length2":20},{"diffs":[[0,"hand"],[1,")"],[0," == "],[-1,"total_"],[1,"sum("],[0,"bot_"]],"start1":9044,"start2":9044,"length1":18,"length2":17},{"diffs":[[0,"== sum(bot_hand)"],[1,")"],[0," {\n        conso"]],"start1":9050,"start2":9050,"length1":32,"length2":33},{"diffs":[[0,"game!\")\n"],[-1,"\n"],[0,"    } el"]],"start1":9133,"start2":9133,"length1":17,"length2":16},{"diffs":[[0,"bet)\n\n    }\n"],[-1,"\n"],[0,"    console."]],"start1":9214,"start2":9214,"length1":25,"length2":24},{"diffs":[[0,"\" + "],[-1,"total_"],[1,"sum("],[0,"bot_hand"],[-1,"\n"],[1,")"],[0,"\n   "]],"start1":9367,"start2":9367,"length1":23,"length2":21}]}]},{"timestamp":1740957687918,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n"],[-1,"\n    // Calculate round winner\n\n"],[0,"    "]],"start1":8568,"start2":8568,"length1":40,"length2":8},{"diffs":[[0,") {\n"],[-1,"            // Player loses if player busts and bot does not.\n"],[0,"    "]],"start1":8762,"start2":8762,"length1":70,"length2":8},{"diffs":[[0,"t)\n        }"],[1,"\n        \n    }"],[0," else if (to"]],"start1":8848,"start2":8848,"length1":24,"length2":39},{"diffs":[[0,"tal_"],[-1,"player_hand < total_bot_hand) {\n            // Player wins if both busted, but player busts the least.\n            console.log(\"You win the round!\")\n            player_wins(bet)\n        } else {\n            // Player loses if both busted, but bot busts the least.\n            console.log(\"Bot"],[1,"bot_hand > blackjack_goal) {\n        console.log(\"Bot busted! You"],[0," win"],[-1,"s"],[0," the"]],"start1":8887,"start2":8887,"length1":305,"length2":77},{"diffs":[[0,"ou win the round"],[-1,"!"],[1,"."],[0,"\")\n            b"]],"start1":8954,"start2":8954,"length1":33,"length2":33},{"diffs":[[0,"ound.\")\n        "],[-1,"    bot"],[1,"player"],[0,"_wins(bet)\n     "]],"start1":8966,"start2":8966,"length1":39,"length2":38},{"diffs":[[0,"et)\n        "],[-1,"}"],[0,"\n    } else "]],"start1":8995,"start2":8995,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"// Neither busts, player wins if player's hand is more than bot's.\n        console.log(\"You win the round!\")\n        player_wins(bet)\n\n    } else if (total_bot_hand > blackjack_goal) {\n        // Player wins if bot busts and player does not.\n        console.log(\"Bot busted! You win the round.\")\n        player_wins(bet)\n        "],[1,"console.log(\"You win the round!\")\n        player_wins(bet)\n"],[0,"\n   "]],"start1":9065,"start2":9065,"length1":337,"length2":67},{"diffs":[[0,") {\n"],[-1,"        // Tie game if both hands are equal.\n"],[0,"    "]],"start1":9179,"start2":9179,"length1":53,"length2":8},{"diffs":[[0,"e {\n"],[-1,"        // Player loses if neither busts, but bot's hand is more than player's.\n"],[0,"    "]],"start1":9264,"start2":9264,"length1":88,"length2":8}]}]},{"timestamp":1740958287222,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  bot_wins(bet)\n"],[-1,"\n"],[0,"        } else i"]],"start1":8929,"start2":8929,"length1":33,"length2":32},{"diffs":[[0,"r_wins(bet)\n"],[-1,"\n"],[0,"        } el"]],"start1":9136,"start2":9136,"length1":25,"length2":24},{"diffs":[[0,")\n        }\n"],[-1,"\n"],[0,"    } else i"]],"start1":9305,"start2":9305,"length1":25,"length2":24},{"diffs":[[0,"t_wins(bet)\n"],[1,"\n"],[0,"    }\n\n    c"]],"start1":10025,"start2":10025,"length1":24,"length2":25},{"diffs":[[0,"_hand))\n"],[1,""],[0,"}\n\n"],[-1,"\n"],[0,"function"]],"start1":10405,"start2":10405,"length1":20,"length2":19}]}]},{"timestamp":1740958360380,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"60)\n"],[-1,"OLED12864_I2C.on()\n\n"],[0,"musi"]],"start1":93,"start2":93,"length1":28,"length2":8},{"diffs":[[0,"t toggle"],[-1,": number"],[0," = 0\n\nfu"]],"start1":422,"start2":422,"length1":24,"length2":16},{"diffs":[[0,"ackjack() {\n"],[-1,"\n"],[0,"    let deck"]],"start1":5174,"start2":5174,"length1":25,"length2":24},{"diffs":[[0," bet"],[-1,": number = 1\n\n    OLED12864_I2C.clear()"],[1," = 1"],[0,"\n\n  "]],"start1":5222,"start2":5222,"length1":47,"length2":12},{"diffs":[[0,"7, 8, 9,"],[1," 10, 10, 10,"],[0," 10]\n   "]],"start1":5359,"start2":5359,"length1":16,"length2":28},{"diffs":[[0,"    "],[-1,"music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)"],[0,"\n   "]],"start1":6054,"start2":6054,"length1":108,"length2":8},{"diffs":[[0,"ue\n\n"],[-1,"                music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n\n"],[0,"    "]],"start1":6258,"start2":6258,"length1":126,"length2":8},{"diffs":[[0,"00)\n"],[-1,"                    music.play(music.tonePlayable(Note.G5, music.beat(BeatFraction.Eighth)), music.PlaybackMode.UntilDone)\n"],[0,"    "]],"start1":6861,"start2":6861,"length1":131,"length2":8},{"diffs":[[0,"          }\n"],[-1,"\n"],[0,"            "]],"start1":6871,"start2":6871,"length1":25,"length2":24},{"diffs":[[0,"LDCARDS\n"],[-1,"\n"],[1,"            input.onPinPressed(TouchPin.P2, function() {\n  "],[0,"        "]],"start1":6921,"start2":6921,"length1":17,"length2":75},{"diffs":[[0,"    "],[1,"  "],[0,"if ("],[-1,"!"],[0,"wild"]],"start1":6996,"start2":6996,"length1":13,"length2":14},{"diffs":[[0,"d_toggle) {\n"],[1,"    "],[0,"            "]],"start1":7013,"start2":7013,"length1":24,"length2":28},{"diffs":[[0,"        "],[1," "],[1,"   "],[0,"main_dis"]],"start1":7087,"start2":7087,"length1":16,"length2":20},{"diffs":[[0,"                "],[-1,"\n"],[1,"    console.log(\"Main display!\")\n    "],[0,"            } el"]],"start1":7114,"start2":7114,"length1":33,"length2":69},{"diffs":[[0,"        "],[1,"   "],[1," "],[0,"// Wildc"]],"start1":7196,"start2":7196,"length1":16,"length2":20},{"diffs":[[0,"display\n"],[1,"    "],[0,"        "]],"start1":7220,"start2":7220,"length1":16,"length2":20},{"diffs":[[0,"    "],[-1,"\n"],[0,"    "],[-1,"        }\n\n\n            input.onPinPressed(TouchPin.P2, function () {\n                wildcard_toggle = !wildcard_toggle\n                console.log(\"Wildcard screen "],[1,"console.log(\"Wildcard display!\")\n                }\n                \n                wildcard_"],[0,"toggle"],[-1,": \"+ "],[1," = !"],[0,"wild"]],"start1":7279,"start2":7279,"length1":190,"length2":115},{"diffs":[[0,"d_toggle"],[-1,")"],[0,"\n       "]],"start1":7397,"start2":7397,"length1":17,"length2":16},{"diffs":[[0,"pause(1000)\n"],[1,"            "],[0,"\n           "]],"start1":7440,"start2":7440,"length1":24,"length2":36},{"diffs":[[0," 1)\n"],[-1,"    tube_module_show_points()\n"],[0,"    "]],"start1":8109,"start2":8109,"length1":38,"length2":8},{"diffs":[[0,"ND GAME\n"],[-1,"    "],[0,"\n    bas"]],"start1":8144,"start2":8144,"length1":20,"length2":16},{"diffs":[[0,"creen()\n"],[-1,"    \n"],[0,"    my_t"]],"start1":8169,"start2":8169,"length1":21,"length2":16},{"diffs":[[0,"!\")\n"],[-1,"        music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n"],[0,"    "]],"start1":8562,"start2":8562,"length1":112,"length2":8},{"diffs":[[0,"display "],[-1," "],[0,"= \" \" + "]],"start1":10990,"start2":10990,"length1":17,"length2":16},{"diffs":[[0,"ng(index * 2"],[1,".7"],[0,", 0, card_to"]],"start1":11247,"start2":11247,"length1":24,"length2":26},{"diffs":[[0,", 1)"],[-1," // INDEX MULTIPLIER MAYBE FIX!!!!!! -------------------"],[0,"\n   "]],"start1":11281,"start2":11281,"length1":64,"length2":8},{"diffs":[[0,"ndex * 2"],[1,".7"],[0,", 0, \"?\""]],"start1":11341,"start2":11341,"length1":16,"length2":18},{"diffs":[[0," }\n}"],[-1,"\nfunction wildcard_use(wildcard_name: string) {\n\n    switch(wildcard_name) {\n        case \"Sun\":\n            blackjack_goal = 24\n\n            basic.showLeds(`\n            . . . . .\n            . . . . .\n            . . # . .\n            . . . . .\n            . . . . .\n            `)\n\n\n    }\n}"],[0,"\n\nfu"]],"start1":11396,"start2":11396,"length1":301,"length2":8},{"diffs":[[0,")\n\n    let i"],[-1,": number"],[0," = 0\n    for"]],"start1":11456,"start2":11456,"length1":32,"length2":24},{"diffs":[[0,"ing("],[-1,"2, i, card_name, 1)\n        i++\n    }\n\n    let pointer: number = 0\n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function() {\n        pointer--\n        redraw_pointer()\n    })\n\n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function() {\n        redraw_pointer()\n        pointer++\n    })\n\n    function redraw_pointer() {\n        pointer = Math.constrain(pointer, 0, 3)\n\n        for (let i: number = 0; i >= 3; i++) {\n            if (i == pointer) {\n                OLED12864_I2C.showString(0, pointer, \">\", 1)\n            } else {\n                OLED12864_I2C.showString(0, i, \" \", 0)\n            }\n        }"],[1,"0, i, card_name, 1)"],[0,"\n    }\n"],[-1,"\n"],[0,"}\n\n\n"],[-1,"\n"],[0,"func"]],"start1":11623,"start2":11623,"length1":649,"length2":38},{"diffs":[[0,"0, \""],[-1,"   "],[0,"ARCANA"],[-1,"\", 1)\n    OLED12864_I2C.showString(0, 1, \" "],[0," BLA"]],"start1":11712,"start2":11712,"length1":60,"length2":14},{"diffs":[[0,"3, \""],[-1,"SHAKE"],[1,"A+B"],[0," to play"],[1,"."],[0,"\", 1"]],"start1":11770,"start2":11770,"length1":21,"length2":20},{"diffs":[[0,"t(true)\n"],[-1,"    "],[0,"\n    inp"]],"start1":11815,"start2":11815,"length1":20,"length2":16},{"diffs":[[0,"t.on"],[-1,"Gesture(Gesture.Shake, function() {\n        console.log(\"shaked!\")\n        OLED12864_I2C.invert(false)"],[1,"ButtonPressed(Button.AB, function() {"],[0,"\n   "]],"start1":11832,"start2":11832,"length1":110,"length2":45},{"diffs":[[0,"\n    })\n"],[-1,"    \n"],[0,"}\n\n\n\nmai"]],"start1":11898,"start2":11898,"length1":21,"length2":16}]}]},{"timestamp":1741146240964,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,".length)"],[1,"\n\n    console.log(\"Hands reset!\")"],[0,"\n}\n\nfunc"]],"start1":5141,"start2":5141,"length1":16,"length2":49}]}]},{"timestamp":1741146264527,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rd(deck)"],[1,"\n        bot_draw_card(deck)"],[0,"\n\n      "]],"start1":5505,"start2":5505,"length1":16,"length2":44},{"diffs":[[0,"bet)"],[-1,"\n        \n        basic.pause(100)"],[0,"\n\n  "]],"start1":7861,"start2":7861,"length1":42,"length2":8},{"diffs":[[0,"use("],[-1,"4"],[1,"2"],[0,"000)\n"],[-1,"\n"],[0,"    "]],"start1":8029,"start2":8029,"length1":15,"length2":14},{"diffs":[[0,"    "],[-1,"    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.Dadadadum), \n        music.PlaybackMode.InBackground)\n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n        music._playDefaultBackground(\n            music.builtInPlayableMelody(Melodies.Funeral), \n            music.PlaybackMode.InBackground"],[1,"} else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\""],[0,")\n  "]],"start1":8234,"start2":8234,"length1":398,"length2":127}]}]},{"timestamp":1741146515426,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  . . # "],[-1,"#"],[1,"."],[0," .\n     "]],"start1":12401,"start2":12401,"length1":17,"length2":17}]}]},{"timestamp":1741147454671,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,". . # # "],[-1,"#"],[1,"."],[0,"\n       "]],"start1":12403,"start2":12403,"length1":17,"length2":17}]}]},{"timestamp":1741147455583,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tring]: "],[-1,"any"],[1,"string"],[0,";\n}\n\nlet"]],"start1":421,"start2":421,"length1":19,"length2":22},{"diffs":[[0,"nary[] = []\n"],[1,"let player_placed_wildcards = []"],[0,"\nlet bot = {"]],"start1":1998,"start2":1998,"length1":24,"length2":56},{"diffs":[[0,"[] = []\n"],[-1,"\n"],[0,"let "],[1,"bot_"],[0,"placed_w"]],"start1":2244,"start2":2244,"length1":21,"length2":24},{"diffs":[[0,"ed_wildcards"],[-1,": Dictionary[]"],[0," = []\n\n\nlet "]],"start1":2264,"start2":2264,"length1":38,"length2":24},{"diffs":[[0,"ring"],[-1,", player_user: boolean) {\n    // Player is user -> player_user = true\n    // Bot is user -> player_user = false\n\n    console.log(wildcard_name)\n\n    switch(wildcard_name) {\n        case \"Sun\":\n            blackjack_goal = 24\n\n            basic.showLeds(`\n            # . # . #\n            . # # # .\n            # # # # #\n            . # # # .\n            # . # . #\n            `)\n            placed_wildcards.push({\"name\": wildcard_name, \"player_user\": player_user})\n        case \"Moon\":\n            blackjack_goal = 17\n\n            basic.showLeds(`\n           "],[1,") {\n\n    switch(wildcard_name) {\n        case \"Sun\":\n            blackjack_goal = 24\n\n            basic.showLeds(`\n            . . . . .\n            . . . . .\n            ."],[0," . # # #"],[-1," ."],[0,"\n   "]],"start1":12228,"start2":12228,"length1":579,"length2":188},{"diffs":[[0," . ."],[-1," # # #\n           "],[0," . . ."],[-1," # #"],[0,"\n   "]],"start1":12424,"start2":12424,"length1":36,"length2":14},{"diffs":[[0,". . "],[-1,"# # #\n            . # # #"],[1,". ."],[0," .\n "]],"start1":12447,"start2":12447,"length1":33,"length2":11},{"diffs":[[0,"    `)\n\n"],[1,"\n"],[0,"    }\n}\n"]],"start1":12465,"start2":12465,"length1":16,"length2":17}]}]},{"timestamp":1741148046669,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," `)\n"],[-1,"            placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n        "],[0,"\n   "]],"start1":12879,"start2":12879,"length1":105,"length2":8}]}]},{"timestamp":1741148078635,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"yer_user })\n"],[1,"        \n"],[0,"    }\n}\n\nfun"]],"start1":12960,"start2":12960,"length1":24,"length2":33}]}]},{"timestamp":1741151096599,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"r_user })\n    }\n"],[-1,"    \n"],[0,"}\n\nfunction wild"]],"start1":12962,"start2":12962,"length1":37,"length2":32}]}]},{"timestamp":1741151098174,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"_user})\n"],[-1,"            \n"],[0,"        "]],"start1":12667,"start2":12667,"length1":29,"length2":16},{"diffs":[[0,"ase \"Moon\":\n"],[1,""],[0,"            "]],"start1":12684,"start2":12684,"length1":24,"length2":24},{"diffs":[[0,"r })"],[-1,"\n\n        case \"Justice\":\n            let temp: number = bot[\"last_draw\"]\n            bot[\"last_draw\"] = player[\"last_draw\"]\n            player[\"last_draw\"] = temp\n\n            basic.showLeds(`\n            . # . # .\n            # # # # #\n            . . # . .\n            . . # . .\n            . # # # .\n            `)\n        case \"Strength\":\n\n            \n\n\n            basic.showLeds(`\n            . . . # .\n            . . # # .\n            . . # . .\n            . # # . .\n            . # . . .\n            `)\n        \n\n"],[0,"\n    }\n"],[1,"    "],[0,"\n}\n\n"]],"start1":12967,"start2":12967,"length1":539,"length2":19}]}]},{"timestamp":1741151669969,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"m()\n"],[-1,"                        player_wildcard_deck.push(new_wildcard)\n"],[0,"    "]],"start1":6705,"start2":6705,"length1":72,"length2":8},{"diffs":[[0,"lean"],[-1,", bet: number = 0): void | number"],[1,")"],[0," {\n "]],"start1":12226,"start2":12226,"length1":41,"length2":9},{"diffs":[[0,"\n            `)\n"],[-1,"\n"],[0,"        case \"St"]],"start1":13287,"start2":13287,"length1":33,"length2":32},{"diffs":[[0,"h\":\n"],[-1,"            let new_wildcard: Dictionary = wildcards._pickRandom()\n\n            if (player_user) {\n                player_wildcard_deck.push(new_wildcard)\n            } else {\n                bot_wildcard_deck.push(new_wildcard)\n            }"],[0,"\n   "]],"start1":13324,"start2":13324,"length1":250,"length2":8},{"diffs":[[0,":\n\n            \n"],[1,"\n\n"],[0,"            basi"]],"start1":13326,"start2":13326,"length1":32,"length2":34},{"diffs":[[0,"    "],[-1,"case \"The Devil\":\n            bet++\n            basic.showLeds(`\n            # . . . #\n            # # . # #\n            . # # # .\n            . # . # .\n            . . # . .\n            `)\n\n        case \"The Star\":\n            bet--\n            basic.showLeds(`\n            . . # . .\n            . # # # .\n            # # . # #\n            . # # # .\n            . . # . .\n            `)\n        case \"The Fool\":\n            // Copy opponents last wildcard\n        \n            basic.showLeds(`\n            . . . . .\n            . . . . .\n            . . # . .\n            . . . . .\n            . . . . .\n            `)"],[1,"\n\n"],[0,"\n   "]],"start1":13502,"start2":13502,"length1":627,"length2":10}]}]},{"timestamp":1741152269370,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"opy "],[-1,"last placed wildcard for immediate use"],[1,"opponent's last wildcard"],[0,".\",\n"]],"start1":2904,"start2":2904,"length1":46,"length2":32},{"diffs":[[0,"opy "],[-1,"last placed"],[1,"opponents last"],[0," wil"]],"start1":14272,"start2":14272,"length1":19,"length2":22},{"diffs":[[0,"    "],[-1,"    let latest_wildcard: Dictionary = placed_wildcards[-1]\n"],[0,"\n   "]],"start1":14304,"start2":14304,"length1":67,"length2":8},{"diffs":[[0,"`\n            . "],[-1,"# . #"],[1,". . ."],[0," .\n            ."]],"start1":14336,"start2":14336,"length1":37,"length2":37},{"diffs":[[0,"    "],[-1," #"],[0," . . . "],[-1,"#\n            . # # # .\n            `)\n\n            music.play(\n                music.builtinPlayableSoundEffect(soundExpression.giggle), \n                music.PlaybackMode.UntilDone)\n\n            if (latest_wildcard[\"name\"] == \"The Fool\") {\n                // Disallow copying The Fool (prevents breaking the game)\n                message_screen(\"Cannot copy!\")\n            } else {\n                wildcard_use(latest_wildcard[\"name\"], player_user, bet)\n            }\n        "],[1,". .\n            . . . . .\n            `)"],[0,"\n   "]],"start1":14411,"start2":14411,"length1":496,"length2":55}]}]},{"timestamp":1741152859369,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," : \""],[-1,"Decrease value of all cards by"],[1,"Remove all 1s and"],[0," 2"],[1,"s"],[0,".\",\n"]],"start1":3169,"start2":3169,"length1":40,"length2":28},{"diffs":[[0," }\n\n"],[-1,"    function wildcard_use(wildcard_name: string, player_user: boolean): void {\n        // Player is user -> player_user = true\n        // Bot is user -> player_user = false\n\n        console.log(wildcard_name)\n\n        switch (wildcard_name) {\n            case \"Sun\":\n                blackjack_goal = 24\n\n                basic.showLeds(`\n            # . # . #\n            . # # # .\n            # # # # #\n            . # # # .\n            # . # . #\n            `)\n                placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user})\n\n            case \"Moon\":\n                blackjack_goal = 17\n\n                basic.showLeds(`\n            . # # # .\n            . . # # #\n            . . . # #\n            . . # # #\n            . # # # .\n            `)\n                placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n\n            case \"Justice\":\n                // Swap last drawn cards in hand\n                let temp: number = bot[\"last_draw\"]\n                bot[\"last_draw\"] = player[\"last_draw\"]\n                player[\"last_draw\"] = temp\n\n                bot_hand.pop()\n                bot_hand.push(bot[\"last_draw\"])\n\n                player_hand.pop()\n                player_hand.push(player[\"last_draw\"])\n\n                basic.showLeds(`\n            . # . # .\n            # # # # #\n            . . # . .\n            . . # . .\n            . # # # .\n            `)\n\n            case \"Strength\":\n                let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                if (player_user) {\n                    player_wildcard_deck.push(new_wildcard)\n                } else {\n                    bot_wildcard_deck.push(new_wildcard)\n                }\n\n                basic.showLeds(`\n            . . . # .\n            . . # # .\n            . . # . .\n            . # # . .\n            . # . . .\n            `)\n            case \"The Devil\":\n                bet++\n                basic.showLeds(`\n            # . . . #\n            # # . # #\n            . # # # .\n            . # . # .\n            . . # . .\n            `)\n\n            case \"The Star\":\n                bet--\n                basic.showLeds(`\n            . . # . .\n            . # # # .\n            # # . # #\n            . # # # .\n            . . # . .\n            `)\n            case \"The Fool\":\n                // Copy last placed wildcard\n                let latest_wildcard: Dictionary = placed_wildcards[-1]\n\n                basic.showLeds(`\n            . # . # .\n            . . . . .\n            . . # . .\n            # . . . #\n            . # # # .\n            `)\n\n                music.play(\n                    music.builtinPlayableSoundEffect(soundExpression.giggle),\n                    music.PlaybackMode.UntilDone)\n\n                if (latest_wildcard[\"name\"] == \"The Fool\") {\n                    // Disallow copying The Fool (prevents breaking the game)\n                    message_screen(\"Cannot copy!\")\n                } else {\n                    wildcard_use(latest_wildcard[\"name\"], player_user)\n                }\n            case \"The Magician\":\n                // Return last drawn card to deck.\n                if (player_user) {\n                    player_hand.pop()\n                    deck.push(player[\"last_draw\"])\n                    player[\"last_draw\"] = player_hand[-1]\n                } else {\n                    bot_hand.pop()\n                    deck.push(bot[\"last_draw\"])\n                    bot[\"last_draw\"] = bot_hand[-1]\n                }\n            \n\n        }\n\n    }\n"],[0,"\n   "]],"start1":8133,"start2":8133,"length1":3549,"length2":8},{"diffs":[[0,"\n    }\n}"],[1,"\nfunction wildcard_use(wildcard_name: string, player_user: boolean, bet: number = 0): void | number {\n    // Player is user -> player_user = true\n    // Bot is user -> player_user = false\n\n    console.log(wildcard_name)\n\n    switch(wildcard_name) {\n        case \"Sun\":\n            blackjack_goal = 24\n\n            basic.showLeds(`\n            # . # . #\n            . # # # .\n            # # # # #\n            . # # # .\n            # . # . #\n            `)\n            placed_wildcards.push({\"name\": wildcard_name, \"player_user\": player_user})\n            \n        case \"Moon\":\n            blackjack_goal = 17\n\n            basic.showLeds(`\n            . # # # .\n            . . # # #\n            . . . # #\n            . . # # #\n            . # # # .\n            `)\n            placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n\n        case \"Justice\":\n            let temp: number = bot[\"last_draw\"]\n            bot[\"last_draw\"] = player[\"last_draw\"]\n            player[\"last_draw\"] = temp\n\n            basic.showLeds(`\n            . # . # .\n            # # # # #\n            . . # . .\n            . . # . .\n            . # # # .\n            `)\n\n        case \"Strength\":\n            let new_wildcard: Dictionary = wildcards._pickRandom()\n\n            if (player_user) {\n                player_wildcard_deck.push(new_wildcard)\n            } else {\n                bot_wildcard_deck.push(new_wildcard)\n            }\n            \n            basic.showLeds(`\n            . . . # .\n            . . # # .\n            . . # . .\n            . # # . .\n            . # . . .\n            `)\n        case \"The Devil\":\n            bet++\n            basic.showLeds(`\n            # . . . #\n            # # . # #\n            . # # # .\n            . # . # .\n            . . # . .\n            `)\n\n        case \"The Star\":\n            bet--\n            basic.showLeds(`\n            . . # . .\n            . # # # .\n            # # . # #\n            . # # # .\n            . . # . .\n            `)\n        case \"The Fool\":\n            // Copy last placed wildcard\n            let latest_wildcard: Dictionary = placed_wildcards[-1]\n\n            basic.showLeds(`\n            . # . # .\n            . . . . .\n            . . # . .\n            # . . . #\n            . # # # .\n            `)\n\n            music.play(\n                music.builtinPlayableSoundEffect(soundExpression.giggle), \n                music.PlaybackMode.UntilDone)\n\n            if (latest_wildcard[\"name\"] == \"The Fool\") {\n                // Disallow copying The Fool (prevents breaking the game)\n                message_screen(\"Cannot copy!\")\n            } else {\n                wildcard_use(latest_wildcard[\"name\"], player_user, bet)\n            }\n        \n    }\n\n}"],[0,"\n\nfuncti"]],"start1":12234,"start2":12234,"length1":16,"length2":2756},{"diffs":[[0," }\n\n"],[-1,"    \n    // V\n    input.onLogoEvent(TouchButtonEvent.Pressed, function() {\n        \n    })\n"],[0,"}\n\n\n"]],"start1":15849,"start2":15849,"length1":99,"length2":8}]}]},{"timestamp":1741153457218,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1," let value ="],[0," wil"]],"start1":7531,"start2":7531,"length1":20,"length2":8},{"diffs":[[0,"    "],[-1,"if (value) {\n                    wildcard_use(value, true)\n                }"],[0,"\n   "]],"start1":7567,"start2":7567,"length1":84,"length2":8},{"diffs":[[0,"ay()"],[-1,": string | void"],[0," {\n"],[1,""],[0,"    "]],"start1":15820,"start2":15820,"length1":26,"length2":11},{"diffs":[[0,"()\n\n"],[-1,"    let pointer: number = 0\n"],[0,"    "]],"start1":15850,"start2":15850,"length1":36,"length2":8},{"diffs":[[0,"t i: number = 0\n"],[-1,"\n"],[0,"    for (let car"]],"start1":15860,"start2":15860,"length1":33,"length2":32},{"diffs":[[0,"e\"]\n"],[-1,"        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n    "],[0,"    "]],"start1":15962,"start2":15962,"length1":99,"length2":8},{"diffs":[[0,"d_name)\n"],[-1,"        }\n        \n"],[0,"        "]],"start1":15989,"start2":15989,"length1":35,"length2":16},{"diffs":[[0,"\n    }\n\n    "],[1,"let pointer: number = 0"],[0,"\n    // Scro"]],"start1":16061,"start2":16061,"length1":24,"length2":47},{"diffs":[[0,"r--\n"],[-1,"        pointer = Math.constrain(pointer, 0, 3)\n"],[0,"    "]],"start1":16180,"start2":16180,"length1":56,"length2":8},{"diffs":[[0,") {\n"],[-1,"        pointer++\n        pointer = Math.constrain(pointer, 0, 3)\n"],[0,"    "]],"start1":16283,"start2":16283,"length1":74,"length2":8},{"diffs":[[0,"r()\n        "],[1,"pointer++"],[0,"\n    })\n\n   "]],"start1":16308,"start2":16308,"length1":24,"length2":33},{"diffs":[[0,"pointer() {\n"],[1,"        pointer = Math.constrain(pointer, 0, 3)\n\n"],[0,"        for "]],"start1":16358,"start2":16358,"length1":24,"length2":73},{"diffs":[[0,"\">\", 1)\n"],[-1,"    \n"],[0,"        "]],"start1":16551,"start2":16551,"length1":21,"length2":16},{"diffs":[[0,"   }\n    }\n\n"],[1,"    \n    // V\n"],[0,"    input.on"]],"start1":16654,"start2":16654,"length1":24,"length2":38},{"diffs":[[0,"tion"],[-1," "],[0,"() {"],[-1," // V2 MICROBIT!------------------\n        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n        return selected_card"],[1,"\n        "],[0,"\n   "]],"start1":16732,"start2":16732,"length1":150,"length2":21}]}]},{"timestamp":1741154035021,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," = 0"],[-1,"\n    let working: boolean = true"],[0,"\n\n  "]],"start1":16002,"start2":16002,"length1":40,"length2":8},{"diffs":[[0,"  }\n"],[-1,"    \n    function redraw_pointer(): void {\n        console.log(\"Pointer redrawn!\")\n        for (let i: number = 0; i >= 3; i++) {\n            if (i == pointer) {\n                OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n            } else {\n                OLED12864_I2C.showString(0, i, \" \", 0)\n            }\n        }\n    }\n    \n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function() {\n        if (working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n        "],[1,"\n    \n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function() {\n"],[0,"    "]],"start1":16306,"start2":16306,"length1":538,"length2":83},{"diffs":[[0,"r--\n        "],[-1,"        "],[0,"pointer = Ma"]],"start1":16399,"start2":16399,"length1":32,"length2":24},{"diffs":[[0,"nter, 0, 3)\n"],[-1,"        "],[0,"        redr"]],"start1":16439,"start2":16439,"length1":32,"length2":24},{"diffs":[[0,"r()\n"],[-1,"            }\n            working = false\n\n            }\n"],[0,"    "]],"start1":16472,"start2":16472,"length1":65,"length2":8},{"diffs":[[0,"    "],[-1,"if (working) {\n            console.log(\"Pointer down\")\n            \n            if (typeof redraw_pointer === 'function'"],[1,"pointer++\n        pointer = Math.constrain(pointer, 0, 3)\n        redraw_pointer()\n        \n    })\n\n    function redraw_pointer() {\n        for (let i: number = 0; i >= 3; i++"],[0,") {\n"]],"start1":16558,"start2":16558,"length1":128,"length2":183},{"diffs":[[0,"        "],[-1,"   "],[1,"if (i =="],[0," pointer"],[-1,"++\n  "],[1,") {\n"],[0,"        "]],"start1":16745,"start2":16745,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"pointer = Math.cons"],[1,"  OLED12864_I2C.showS"],[0,"tr"],[-1,"a"],[0,"in"],[-1,"("],[1,"g(0, "],[0,"poin"]],"start1":16783,"start2":16783,"length1":33,"length2":38},{"diffs":[[0,"0, pointer, "],[-1,"0, 3"],[1,"\">\", 1"],[0,")\n    "],[1,"\n"],[0,"            "]],"start1":16814,"start2":16814,"length1":34,"length2":37},{"diffs":[[0,"        "],[-1,"redraw_pointer()"],[1,"} else {"],[0,"\n       "]],"start1":16843,"start2":16843,"length1":32,"length2":24},{"diffs":[[0,"    "],[-1,"}\n"],[0,"    "],[-1,"        working = false"],[1,"OLED12864_I2C.showString(0, i, \" \", 0)\n            }"],[0,"\n   "]],"start1":16868,"start2":16868,"length1":37,"length2":64},{"diffs":[[0," }\n    }"],[-1,")\n\n    "],[0,"\n\n    in"]],"start1":16936,"start2":16936,"length1":23,"length2":16}]}]},{"timestamp":1741154691142,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"\n\n\n\n\n"],[0,"//  "]],"start1":0,"start2":0,"length1":9,"length2":4}]}]},{"timestamp":1741154695586,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// TODO: fix working boolean not switching correctly\n// TODO: implement wildcard usage"],[0,"\n\n\n\n"]],"start1":0,"start2":0,"length1":90,"length2":4}]}]},{"timestamp":1741154724302,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"r()\n"],[-1,"    let working: boolean = true"],[0,"\n   "]],"start1":16043,"start2":16043,"length1":39,"length2":8},{"diffs":[[0,"ber = 0\n    "],[1,"let working: boolean = true"],[0,"\n\n    for (l"]],"start1":16090,"start2":16090,"length1":24,"length2":51}]}]},{"timestamp":1741218129836,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"clear()\n    "],[1,"let working: boolean = true\n    let pointer: number = 0"],[0,"\n    let i: "]],"start1":16039,"start2":16039,"length1":24,"length2":79}]}]},{"timestamp":1741218131812,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"DO: fix "],[-1,"wildcard_display_"],[0,"working "]],"start1":5,"start2":5,"length1":33,"length2":16},{"diffs":[[0,"rrectly\n"],[1,""],[0,"// TODO:"]],"start1":45,"start2":45,"length1":16,"length2":16},{"diffs":[[0,"= 21"],[-1,"\nlet wildcard_display_working: boolean = true\nlet pointer: number = 0"],[0,"\n\nOL"]],"start1":159,"start2":159,"length1":77,"length2":8},{"diffs":[[0,"ck)\n"],[-1,"                    main_display()\n"],[0,"    "]],"start1":6104,"start2":6104,"length1":43,"length2":8},{"diffs":[[0,"              }\n"],[1,"                    \n"],[0,"                "]],"start1":6983,"start2":6983,"length1":32,"length2":53},{"diffs":[[0,"ck)\n"],[-1,"                    main_display()\n"],[0,"    "]],"start1":7190,"start2":7190,"length1":43,"length2":8},{"diffs":[[0,"rds\n            "],[1,"    main_display()\n                "],[0,"\n"],[-1,""],[0,"            } el"]],"start1":7502,"start2":7502,"length1":33,"length2":68},{"diffs":[[0,"splay()\n"],[-1,"                \n"],[0,"        "]],"start1":7650,"start2":7650,"length1":33,"length2":16},{"diffs":[[0,"ue)\n"],[-1,"                    wildcard_display_working = false\n"],[0,"    "]],"start1":7729,"start2":7729,"length1":61,"length2":8},{"diffs":[[0,"ies."],[-1,"JumpUp"],[1,"Dadadadum"],[0,"), \n"]],"start1":12097,"start2":12097,"length1":14,"length2":17},{"diffs":[[0,"\n}\n\n"],[-1,"function redraw_pointer(): void {\n    for (let i: number = 0; i >= 3; i++) {\n        if (i == pointer) {\n            OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n        } else {\n            OLED12864_I2C.showString(0, i, \" \", 0)\n        }\n    }\n}\n\n"],[0,"func"]],"start1":15972,"start2":15972,"length1":258,"length2":8},{"diffs":[[0,"et i: number = 0"],[1,"\n    "],[0,"\n\n    for (let c"]],"start1":16057,"start2":16057,"length1":32,"length2":37},{"diffs":[[0,"\n    }\n    \n"],[1,"    function redraw_pointer(): void {\n        console.log(\"Pointer redrawn!\")\n        for (let i: number = 0; i >= 3; i++) {\n            if (i == pointer) {\n                OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n            } else {\n                OLED12864_I2C.showString(0, i, \" \", 0)\n            }\n        }\n    }\n    \n"],[0,"    // Scrol"]],"start1":16375,"start2":16375,"length1":24,"length2":354},{"diffs":[[0,"    if ("],[-1,"wildcard_display_"],[0,"working)"]],"start1":16790,"start2":16790,"length1":33,"length2":16},{"diffs":[[0,"      }\n        "],[1,"    working = false\n"],[0,"\n            }\n "]],"start1":17025,"start2":17025,"length1":32,"length2":52},{"diffs":[[0,"if ("],[-1,"wildcard_display_"],[0,"work"]],"start1":17162,"start2":17162,"length1":25,"length2":8},{"diffs":[[0,")\n            }\n"],[1,"            working = false\n"],[0,"        }\n    })"]],"start1":17399,"start2":17399,"length1":32,"length2":60},{"diffs":[[0,"\n    })\n"],[-1,""],[0,"}\n\n"],[1,"\n\n"],[0,"function"]],"start1":17665,"start2":17665,"length1":19,"length2":21}]}]},{"timestamp":1741218685376,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"                    console.log(\"Used \" + value)\n"],[0,"    "]],"start1":7800,"start2":7800,"length1":57,"length2":8},{"diffs":[[0,"\n            `)\n"],[1,"\n"],[0,"                "]],"start1":11086,"start2":11086,"length1":32,"length2":33},{"diffs":[[0,"    "],[-1,"default:\n                console.log(\"Card not found!: \" + wildcard_name)"],[0,"\n\n  "]],"start1":12016,"start2":12016,"length1":81,"length2":8},{"diffs":[[0,"  }\n    })\n\n"],[1,"    \n\n"],[0,"    input.on"]],"start1":17517,"start2":17517,"length1":24,"length2":30}]}]},{"timestamp":1741218836761,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," })\n"],[-1,"input.onSound(DetectedSound.Loud, function() {\n    \n})"],[0,"\n   "]],"start1":17645,"start2":17645,"length1":62,"length2":8}]}]},{"timestamp":1741219595888,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"edSound."],[1,"Loud"],[0,", functi"]],"start1":17669,"start2":17669,"length1":16,"length2":20}]}]},{"timestamp":1741219600335,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"INTS = 1"],[-1,"5"],[1,"0"],[0,"\n\nlet bl"]],"start1":138,"start2":138,"length1":17,"length2":17},{"diffs":[[0,"andint(0, 10) < "],[-1,"3"],[1,"2"],[0,") {\n            "]],"start1":4166,"start2":4166,"length1":33,"length2":33},{"diffs":[[0,"            //  "],[-1,"3"],[1,"2"],[0,"0% chance to get"]],"start1":4187,"start2":4187,"length1":33,"length2":33},{"diffs":[[0,"andint(0, 10) < "],[-1,"3"],[1,"2"],[0,") {\n            "]],"start1":4817,"start2":4817,"length1":33,"length2":33},{"diffs":[[0,"            //  "],[-1,"3"],[1,"2"],[0,"0% chance to get"]],"start1":4838,"start2":4838,"length1":33,"length2":33},{"diffs":[[0,"    //  "],[-1,"3"],[1,"2"],[0,"0% chanc"]],"start1":6697,"start2":6697,"length1":17,"length2":17},{"diffs":[[0,", 10) < "],[-1,"3"],[1,"2"],[0,") {\n    "]],"start1":6771,"start2":6771,"length1":17,"length2":17},{"diffs":[[0,"c.pause("],[-1,"5"],[1,"2"],[0,"00)\n    "]],"start1":7353,"start2":7353,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"console.log(typeof value)\n                if (typeof value === \"string\""],[1,"\n                if (value"],[0,") {\n"]],"start1":7770,"start2":7770,"length1":79,"length2":34},{"diffs":[[0,"ts()\n\n        }\n"],[-1,"\n"],[0,"        bet += 1"]],"start1":8248,"start2":8248,"length1":33,"length2":32},{"diffs":[[0,"who_won(bet)"],[1,"\n        \n        basic.pause(100)"],[0,"\n\n        co"]],"start1":8289,"start2":8289,"length1":24,"length2":58},{"diffs":[[0,"s\"], 0, "],[-1,"INITIAL_POINTS * "],[0,"2"],[1,"0"],[0,")\n    le"]],"start1":15317,"start2":15317,"length1":34,"length2":18},{"diffs":[[0," 0, "],[-1,"INITIAL_POINTS * "],[0,"2"],[1,"0"],[0,")\n\n "]],"start1":15379,"start2":15379,"length1":26,"length2":10},{"diffs":[[0,"   }\n    })\n"],[1,"input.onSound(DetectedSound., function() {\n    \n})"],[0,"\n    input.o"]],"start1":17637,"start2":17637,"length1":24,"length2":74}]}]},{"timestamp":1741220107170,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"async "],[0,"func"]],"start1":5328,"start2":5328,"length1":14,"length2":8},{"diffs":[[0,"   }\n}\n\n"],[-1,"let"],[1,"function"],[0," wildcar"]],"start1":16550,"start2":16550,"length1":19,"length2":24},{"diffs":[[0,"play"],[-1," = new Promise(function(resolve, reject"],[1,"("],[0,"): s"]],"start1":16579,"start2":16579,"length1":47,"length2":9},{"diffs":[[0,"e\"]\n"],[-1,"        resolve();\n"],[0,"    "]],"start1":17860,"start2":17860,"length1":27,"length2":8},{"diffs":[[0,"})\n}"],[-1,");"],[0,"\n\nfu"]],"start1":17897,"start2":17897,"length1":10,"length2":8}]}]},{"timestamp":1741220691695,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ue ="],[-1," await"],[0," wil"]],"start1":7740,"start2":7740,"length1":14,"length2":8},{"diffs":[[0,"play"],[-1," // waypoint:1"],[1,"()"],[0,"\n   "]],"start1":7757,"start2":7757,"length1":22,"length2":10},{"diffs":[[0,"Promise("],[1,"function"],[0,"(resolve"]],"start1":16591,"start2":16591,"length1":16,"length2":24},{"diffs":[[0,"ect)"],[-1," =>"],[1,": string | void"],[0," {\n "]],"start1":16620,"start2":16620,"length1":11,"length2":23},{"diffs":[[0,"ed, function"],[1," "],[0,"() { // V2 M"]],"start1":17777,"start2":17777,"length1":24,"length2":25},{"diffs":[[0,"resolve("],[1,");\n        return "],[0,"selected"]],"start1":17911,"start2":17911,"length1":16,"length2":34},{"diffs":[[0,"elected_card"],[-1,")"],[0,"\n    })\n});\n"]],"start1":17938,"start2":17938,"length1":25,"length2":24}]}]},{"timestamp":1741221366702,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"}\n\nasync"],[1," "],[0,"function"]],"start1":5329,"start2":5329,"length1":16,"length2":17},{"diffs":[[0," value ="],[1," await"],[0," wildcar"]],"start1":7736,"start2":7736,"length1":16,"length2":22},{"diffs":[[0,"wildcard_display"],[-1,"()"],[1," // waypoint:1"],[0,"\n               "]],"start1":7751,"start2":7751,"length1":34,"length2":46},{"diffs":[[0,"   }\n}\n\n"],[-1,"function"],[1,"let"],[0," wildcar"]],"start1":16574,"start2":16574,"length1":24,"length2":19},{"diffs":[[0,"play"],[-1,"(): string | void"],[1," = new Promise((resolve, reject) =>"],[0," {\n "]],"start1":16598,"start2":16598,"length1":25,"length2":43},{"diffs":[[0,"      re"],[-1,"turn "],[1,"solve("],[0,"selected"]],"start1":17902,"start2":17902,"length1":21,"length2":22},{"diffs":[[0,"elected_card"],[1,")"],[0,"\n    })\n}\n\nf"]],"start1":17917,"start2":17917,"length1":24,"length2":25},{"diffs":[[0,"    })\n}"],[1,");"],[0,"\n\nfuncti"]],"start1":17931,"start2":17931,"length1":16,"length2":18}]}]},{"timestamp":1741221378005,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,".length)\n}\n\n"],[1,"async"],[0,"function pla"]],"start1":5320,"start2":5320,"length1":24,"length2":29},{"diffs":[[0,"    "],[-1,"while (true) {\n   "],[1,"\n"],[0,"    "],[-1," "],[0,"// S"]],"start1":16964,"start2":16964,"length1":31,"length2":13},{"diffs":[[0,"roll up\n"],[-1,"    "],[0,"    inpu"]],"start1":16978,"start2":16978,"length1":20,"length2":16},{"diffs":[[0,"ion() {\n        "],[-1,"   "],[-1," "],[0,"if (wildcard_dis"]],"start1":17030,"start2":17030,"length1":36,"length2":32},{"diffs":[[0,") {\n            "],[-1,"    "],[0,"console.log(\"Poi"]],"start1":17074,"start2":17074,"length1":36,"length2":32},{"diffs":[[0,"\")\n\n            "],[-1,"   "],[-1," "],[0,"if (typeof redra"]],"start1":17113,"start2":17113,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    "],[0,"pointer--\n  "]],"start1":17177,"start2":17177,"length1":28,"length2":24},{"diffs":[[0,"inter--\n"],[-1,"    "],[0,"        "]],"start1":17191,"start2":17191,"length1":20,"length2":16},{"diffs":[[0,"                "],[-1,"    "],[0,"redraw_pointer()"]],"start1":17255,"start2":17255,"length1":36,"length2":32},{"diffs":[[0,"edraw_pointer()\n"],[-1,"    "],[0,"            }\n  "]],"start1":17272,"start2":17272,"length1":36,"length2":32},{"diffs":[[0,"  }\n        "],[-1,"    \n    "],[1,"\n"],[0,"            "]],"start1":17298,"start2":17298,"length1":33,"length2":25},{"diffs":[[0,"      }\n    "],[-1,"    })\n\n    "],[1,"})\n\n"],[0,"    // Scrol"]],"start1":17317,"start2":17317,"length1":36,"length2":28},{"diffs":[[0,"ll down\n"],[-1,"    "],[0,"    inpu"]],"start1":17344,"start2":17344,"length1":20,"length2":16},{"diffs":[[0,") {\n        "],[-1,"    "],[0,"if (wildcard"]],"start1":17399,"start2":17399,"length1":28,"length2":24},{"diffs":[[0,") {\n            "],[-1," "],[-1,"   "],[0,"console.log(\"Poi"]],"start1":17439,"start2":17439,"length1":36,"length2":32},{"diffs":[[0,"n\")\n            "],[-1,"    \n "],[1,"\n"],[0,"               i"]],"start1":17479,"start2":17479,"length1":38,"length2":33},{"diffs":[[0,"   \n            "],[-1,"   "],[0,"if (typeof redra"]],"start1":17492,"start2":17492,"length1":35,"length2":32},{"diffs":[[0,"            "],[-1,"    "],[0,"pointer++\n  "]],"start1":17556,"start2":17556,"length1":28,"length2":24},{"diffs":[[0,"                "],[-1," "],[-1,"   "],[0,"pointer = Math.c"]],"start1":17578,"start2":17578,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"redraw_pointer()"]],"start1":17634,"start2":17634,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1," "],[-1,"   }\n    "],[1,"}\n"],[0,"        }\n  "]],"start1":17667,"start2":17667,"length1":34,"length2":26},{"diffs":[[0,"      }\n    "],[-1," "],[-1,"   "],[0,"})\n\n"],[-1,"    "],[0,"    input.on"]],"start1":17683,"start2":17683,"length1":36,"length2":28},{"diffs":[[0,"---\n        "],[-1,"  "],[-1,"  "],[0,"let selected"]],"start1":17790,"start2":17790,"length1":28,"length2":24},{"diffs":[[0,"        "],[-1,"    "],[0,"return s"]],"start1":17868,"start2":17868,"length1":20,"length2":16},{"diffs":[[0,"    "],[-1,"    })\n    "],[0,"}"],[1,")"],[0,"\n}\n\n"]],"start1":17897,"start2":17897,"length1":20,"length2":10}]}]},{"timestamp":1741221738276,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n    "],[-1,"\n"],[1,"while (true) {\n   "],[0,"    "],[1," "],[0,"// Scrol"]],"start1":16955,"start2":16955,"length1":21,"length2":39},{"diffs":[[0,"roll up\n"],[1,"    "],[0,"    inpu"]],"start1":16991,"start2":16991,"length1":16,"length2":20},{"diffs":[[0,"ion() {\n        "],[1,"   "],[1," "],[0,"if (wildcard_dis"]],"start1":17047,"start2":17047,"length1":32,"length2":36},{"diffs":[[0,") {\n            "],[1,"    "],[0,"console.log(\"Poi"]],"start1":17095,"start2":17095,"length1":32,"length2":36},{"diffs":[[0,"\")\n\n            "],[1,"   "],[1," "],[0,"if (typeof redra"]],"start1":17138,"start2":17138,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"pointer--\n  "]],"start1":17206,"start2":17206,"length1":24,"length2":28},{"diffs":[[0,"inter--\n"],[1,"    "],[0,"        "]],"start1":17224,"start2":17224,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"redraw_pointer()"]],"start1":17292,"start2":17292,"length1":32,"length2":36},{"diffs":[[0,"edraw_pointer()\n"],[1,"    "],[0,"            }\n  "]],"start1":17313,"start2":17313,"length1":32,"length2":36},{"diffs":[[0,"      }\n        "],[-1,"\n"],[1,"    \n    "],[0,"            }\n  "]],"start1":17339,"start2":17339,"length1":33,"length2":41},{"diffs":[[0,"      }\n    "],[-1,"})\n\n"],[1,"    })\n\n    "],[0,"    // Scrol"]],"start1":17370,"start2":17370,"length1":28,"length2":36},{"diffs":[[0,"ll down\n"],[1,"    "],[0,"    inpu"]],"start1":17405,"start2":17405,"length1":16,"length2":20},{"diffs":[[0,"ion() {\n        "],[1,"    "],[0,"if (wildcard_dis"]],"start1":17460,"start2":17460,"length1":32,"length2":36},{"diffs":[[0,") {\n            "],[1," "],[1,"   "],[0,"console.log(\"Poi"]],"start1":17508,"start2":17508,"length1":32,"length2":36},{"diffs":[[0,"n\")\n            "],[-1,"\n"],[1,"    \n "],[0,"            if ("]],"start1":17552,"start2":17552,"length1":33,"length2":38},{"diffs":[[0,"  \n             "],[1,"   "],[0,"if (typeof redra"]],"start1":17570,"start2":17570,"length1":32,"length2":35},{"diffs":[[0,"            "],[1,"    "],[0,"pointer++\n  "]],"start1":17637,"start2":17637,"length1":24,"length2":28},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"pointer = Math.c"]],"start1":17663,"start2":17663,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"redraw_pointer()"]],"start1":17723,"start2":17723,"length1":32,"length2":36},{"diffs":[[0,"r()\n            "],[1," "],[-1,"}\n"],[1,"   }\n    "],[0,"        }\n    })"]],"start1":17756,"start2":17756,"length1":34,"length2":42},{"diffs":[[0,"      }\n    "],[1," "],[1,"   "],[0,"})\n\n"],[1,"    "],[0,"    input.on"]],"start1":17784,"start2":17784,"length1":28,"length2":36},{"diffs":[[0,"---\n        "],[1,"  "],[1,"  "],[0,"let selected"]],"start1":17899,"start2":17899,"length1":24,"length2":28},{"diffs":[[0,"e\"]\n        "],[1,"    "],[0,"return selec"]],"start1":17977,"start2":17977,"length1":24,"length2":28},{"diffs":[[0,"ard\n    "],[1,"    })\n    "],[0,"}"],[-1,")"],[0,"\n}\n\nfunc"]],"start1":18010,"start2":18010,"length1":18,"length2":28}]}]},{"timestamp":1741222646634,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ay()"],[-1," // waypoint:1"],[0,"\n   "]],"start1":7753,"start2":7753,"length1":22,"length2":8}]}]},{"timestamp":1741222779550,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"play"],[-1," // waypoint:1"],[0,"\n   "]],"start1":7706,"start2":7706,"length1":22,"length2":8},{"diffs":[[0,"        "],[-1,"\n                let "],[1,"let value = wildcard_display() // waypoint:1\n                console.log(typeof value)"],[0,"\n       "]],"start1":7719,"start2":7719,"length1":37,"length2":102},{"diffs":[[0,"        "],[-1,"while (!"],[1,"if "],[0,"(typeof "]],"start1":7822,"start2":7822,"length1":24,"length2":19},{"diffs":[[0,"string\")"],[-1,")"],[0," {\n     "]],"start1":7852,"start2":7852,"length1":17,"length2":16}]}]},{"timestamp":1741223378126,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"let value: any\n                    value = () => {\n                        OLED12864_I2C.clear()\n                        \n                        let i: number = 0\n\n                        for (let card of player_wildcard_deck) {\n                            let card_name: string = card[\"name\"]\n                            if (i == pointer) {\n                                console.log(\"> \" + card_name)\n                            } else {\n                                console.log(card_name)\n                            }\n\n                            OLED12864_I2C.showString(2, i, card_name, 1)\n                            i++\n                        }\n\n                        // Scroll up\n                        input.onGesture(Gesture.TiltRight, function () {\n                            if (wildcard_display_working) {\n                                console.log(\"Pointer up\")\n\n                                if (typeof redraw_pointer === 'function') {\n                                    pointer--\n                                    pointer = Math.constrain(pointer, 0, 3)\n                                    redraw_pointer()\n                                }\n\n                            }\n                        })\n\n                        // Scroll down\n                        input.onGesture(Gesture.TiltLeft, function () {\n                            if (wildcard_display_working) {\n                                console.log(\"Pointer down\")\n\n                                if (typeof redraw_pointer === 'function') {\n                                    pointer++\n                                    pointer = Math.constrain(pointer, 0, 3)\n                                    redraw_pointer()\n                                }\n                            }\n                        })\n\n                        input.onLogoEvent(TouchButtonEvent.Pressed, function () { // V2 MICROBIT!------------------\n                            let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n                            return selected_card\n                        })\n                    }               "],[1,"\n                let"],[0," \n  "]],"start1":7737,"start2":7737,"length1":2138,"length2":28},{"diffs":[[0," }\n    }\n}\n\n"],[1,"function wildcard_display(): string | void {\n    OLED12864_I2C.clear()\n    \n    let i: number = 0\n\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n            console.log(card_name)\n        }\n        \n        OLED12864_I2C.showString(2, i, card_name, 1)\n        i++\n    }\n    \n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function() {\n        if (wildcard_display_working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer--\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n        \n            }\n    })\n\n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function() {\n        if (wildcard_display_working) {\n            console.log(\"Pointer down\")\n            \n            if (typeof redraw_pointer === 'function') {\n                pointer++\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n        }\n    })\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function() { // V2 MICROBIT!------------------\n        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n        return selected_card\n    })\n}\n"],[0,"\nfunction ma"]],"start1":16515,"start2":16515,"length1":24,"length2":1367}]}]},{"timestamp":1741223969965,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"INTS"],[-1,": number = 15\nconst INITIAL_BET: number"],[0," = 1"],[1,"5"],[0,"\n\nle"]],"start1":138,"start2":138,"length1":51,"length2":13},{"diffs":[[0,"r = "],[-1,"INITIAL_BET"],[1,"1"],[0,"\n\n  "]],"start1":5408,"start2":5408,"length1":19,"length2":9},{"diffs":[[0,"    "],[1,"i"],[0,"++"],[-1,"i"],[0,"\n   "]],"start1":8366,"start2":8366,"length1":11,"length2":11},{"diffs":[[0,"               }"],[-1,"\n"],[0,"                "]],"start1":9840,"start2":9840,"length1":33,"length2":32},{"diffs":[[0,"    "],[-1,"control.waitForEvent(typeof value === \"string\" ? 1 : 0, 1)\n                \n                if "],[1,"\n                while (!"],[0,"(typ"]],"start1":9868,"start2":9868,"length1":103,"length2":33},{"diffs":[[0,"string\")"],[1,")"],[0," {\n     "]],"start1":9916,"start2":9916,"length1":16,"length2":17},{"diffs":[[0,"     bet"],[-1,"++\n        "],[1," += 1"],[0,"\n       "]],"start1":10392,"start2":10392,"length1":27,"length2":21}]}]},{"timestamp":1741224483118,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"\n\n"],[1,"let value: any\n                    value = () => {\n                        OLED12864_I2C.clear()\n                        \n                        let i: number = 0\n\n                        for (let card of player_wildcard_deck) {\n                            let card_name: string = card[\"name\"]\n                            if (i == pointer) {\n                                console.log(\"> \" + card_name)\n                            } else {\n                                console.log(card_name)\n                            }\n\n                            OLED12864_I2C.showString(2, i, card_name, 1)\n                            ++i\n                        }\n\n                        // Scroll up\n                        input.onGesture(Gesture.TiltRight, function () {\n                            if (wildcard_display_working) {\n                                console.log(\"Pointer up\")\n\n                                if (typeof redraw_pointer === 'function') {\n                                    pointer--\n                                    pointer = Math.constrain(pointer, 0, 3)\n                                    redraw_pointer()\n                                }\n\n                            }\n                        })\n\n                        // Scroll down\n                        input.onGesture(Gesture.TiltLeft, function () {\n                            if (wildcard_display_working) {\n                                console.log(\"Pointer down\")\n\n                                if (typeof redraw_pointer === 'function') {\n                                    pointer++\n                                    pointer = Math.constrain(pointer, 0, 3)\n                                    redraw_pointer()\n                                }\n                            }\n                        })\n\n    "],[0,"        "]],"start1":7781,"start2":7781,"length1":18,"length2":1828},{"diffs":[[0,"---------------\n"],[1,"    "],[0,"                "]],"start1":9697,"start2":9697,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"return selec"]],"start1":9819,"start2":9819,"length1":24,"length2":28},{"diffs":[[0,"        "],[-1,"            })\n"],[0,"        "]],"start1":9856,"start2":9856,"length1":31,"length2":16},{"diffs":[[0,"               }"],[1,")"],[0,"\n               "]],"start1":9865,"start2":9865,"length1":32,"length2":33},{"diffs":[[0,"                "],[1,"    }"],[0,"\n               "]],"start1":9883,"start2":9883,"length1":32,"length2":37},{"diffs":[[0,"\n}\n\n"],[-1,"function wildcard_display() {\n    OLED12864_I2C.clear()\n    console.log(\"function ran!\")\n    let i: number = 0\n\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n\n        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n            console.log(card_name)\n        }\n\n        OLED12864_I2C.showString(2, i, card_name, 1)\n        ++i\n    }\n\n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer--\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n\n        }\n    })\n\n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer down\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer++\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n        }\n    })\n}\n\n"],[0,"func"]],"start1":15148,"start2":15148,"length1":1126,"length2":8},{"diffs":[[0,"player_wins("],[1,"bet: number"],[0,") {\n        "]],"start1":15198,"start2":15198,"length1":24,"length2":35},{"diffs":[[0,"ot_wins("],[1,"bet: number"],[0,") {\n    "]],"start1":15366,"start2":15366,"length1":16,"length2":27},{"diffs":[[0,"   bot_wins("],[1,"bet"],[0,")\n\n        }"]],"start1":15952,"start2":15952,"length1":24,"length2":27},{"diffs":[[0,"player_wins("],[1,"bet"],[0,")\n\n        }"]],"start1":16156,"start2":16156,"length1":24,"length2":27},{"diffs":[[0,"   bot_wins("],[1,"bet"],[0,")\n        }\n"]],"start1":16316,"start2":16316,"length1":24,"length2":27},{"diffs":[[0,"er_wins("],[1,"bet"],[0,")\n\n    }"]],"start1":16526,"start2":16526,"length1":16,"length2":19},{"diffs":[[0,"player_wins("],[1,"bet"],[0,")\n        \n "]],"start1":16709,"start2":16709,"length1":24,"length2":27},{"diffs":[[0,"ot_wins("],[1,"bet"],[0,")\n    }\n"]],"start1":17051,"start2":17051,"length1":16,"length2":19}]}]},{"timestamp":1741225063015,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"let value: any = wildcard_display()\n"],[1,"\n\n                    input.onLogoEvent(TouchButtonEvent.Pressed, function () { // V2 MICROBIT!------------------\n                        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n                        return selected_card\n                    })\n                }"],[0,"\n   "]],"start1":7785,"start2":7785,"length1":44,"length2":297},{"diffs":[[0,"n\":\n"],[-1,"                // Set goal to 24.\n"],[0,"    "]],"start1":9216,"start2":9216,"length1":43,"length2":8},{"diffs":[[0,"n\":\n"],[-1,"                // Set goal to 17.\n"],[0,"    "]],"start1":9529,"start2":9529,"length1":43,"length2":8},{"diffs":[[0,"turn\n}\n\n"],[-1,"let"],[1,"function"],[0," wildcar"]],"start1":13335,"start2":13335,"length1":19,"length2":24},{"diffs":[[0,"play"],[-1," = function"],[0,"() {"]],"start1":13364,"start2":13364,"length1":19,"length2":8},{"diffs":[[0," })\n"],[-1,"\n    // Select wildcard\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () { // V2 MICROBIT!------------------\n        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n        return selected_card\n    })\n"],[0,"}"],[1,"\n"],[0,"\nfun"]],"start1":14454,"start2":14454,"length1":239,"length2":10}]}]},{"timestamp":1741225394877,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"splay()\n"],[-1,"                "],[1,"\n"],[0,"        "]],"start1":7817,"start2":7817,"length1":32,"length2":17}]}]},{"timestamp":1741226143635,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   \n"],[-1,"                control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A, EventBusValue.MICROBIT_EVT_ANY, function() {\n                    \n                })\n"],[0,"    "]],"start1":7946,"start2":7946,"length1":162,"length2":8}]}]},{"timestamp":1741226161881,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n            })\n"],[-1,"\n"],[0,"            //  "]],"start1":6411,"start2":6411,"length1":33,"length2":32},{"diffs":[[0,"            if ("],[1,"!"],[0,"wildcard_toggle)"]],"start1":7603,"start2":7603,"length1":32,"length2":33},{"diffs":[[0," // "],[-1,"Wildcard display // waypoint:1\n                let value: any;\n\n                while (true) {\n                    \n                    value = wildcard_display("],[1,"Main display with normal cards\n            \n            } else {\n                // Wildcard display // waypoint:1\n                let value: any = wildcard_display()\n                                \n                control.waitForEvent(typeof value === \"string\" ? 1 : 0, 1"],[0,")\n  "]],"start1":7654,"start2":7654,"length1":169,"length2":281},{"diffs":[[0,"                "],[-1,"}"],[0,"\n               "]],"start1":7933,"start2":7933,"length1":33,"length2":32},{"diffs":[[0,"rol."],[-1,"waitForEvent(value ? 1 : 0, 1)"],[1,"onEvent(EventBusSource.MICROBIT_ID_BUTTON_A, EventBusValue.MICROBIT_EVT_ANY, function() {\n                    "],[0,"\n   "]],"start1":7970,"start2":7970,"length1":38,"length2":118},{"diffs":[[0,"                "],[1,"})"],[0,"\n               "]],"start1":8085,"start2":8085,"length1":32,"length2":34},{"diffs":[[0,"\n            }\n\n"],[1,"\n"],[0,"            inpu"]],"start1":8318,"start2":8318,"length1":32,"length2":33}]}]},{"timestamp":1741226757945,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"lse\n"],[-1,"        let main_working: boolean = true\n"],[0,"    "]],"start1":5910,"start2":5910,"length1":49,"length2":8},{"diffs":[[0,"ny;\n"],[-1,"                control.inBackground(function() {\n    "],[1,"\n"],[0,"    "]],"start1":7717,"start2":7717,"length1":62,"length2":9},{"diffs":[[0,"le (true) {\n"],[-1,"\n"],[0,"            "]],"start1":7741,"start2":7741,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"    control.waitMicros(1000000)\n    "],[1,"\n"],[0,"    "]],"start1":7769,"start2":7769,"length1":44,"length2":9},{"diffs":[[0,"y()\n"],[-1,"\n                        control.raiseEvent(value ? 1 : 0, 1)\n                    }\n\n                })\n"],[0,"    "]],"start1":7817,"start2":7817,"length1":112,"length2":8},{"diffs":[[0,"                "],[1,"}"],[0,"\n               "]],"start1":7821,"start2":7821,"length1":32,"length2":33},{"diffs":[[0,"tion ran!\")\n"],[-1,"\n"],[0,"    let i: n"]],"start1":13218,"start2":13218,"length1":25,"length2":24},{"diffs":[[0," })\n"],[1,"\n"],[0,"    "],[-1,"\n    input.onButtonPressed(Button.A"],[1,"// Select wildcard\n    input.onLogoEvent(TouchButtonEvent.Pressed"],[0,", fu"]],"start1":14252,"start2":14252,"length1":47,"length2":78},{"diffs":[[0,"ressed, function"],[1," "],[0,"() {"],[1," // V2 MICROBIT!------------------"],[0,"\n        let sel"]],"start1":14320,"start2":14320,"length1":36,"length2":71},{"diffs":[[0," })\n"],[-1,"    // Select wildcard\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () { // V2 MICROBIT!------------------\n        \n    })\n\n"],[0,"}\nfu"]],"start1":14482,"start2":14482,"length1":144,"length2":8}]}]},{"timestamp":1741227411831,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"gle\n"],[-1,"                main_working\n"],[0,"    "]],"start1":8479,"start2":8479,"length1":37,"length2":8}]}]},{"timestamp":1741227413650,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"                if (main_working) {\n    "],[0,"    "]],"start1":6116,"start2":6116,"length1":48,"length2":8},{"diffs":[[0,"                "],[-1," "],[-1,"   "],[0,"message_screen(\""]],"start1":6170,"start2":6170,"length1":36,"length2":32},{"diffs":[[0,"and full!\")\n"],[-1,"    "],[0,"            "]],"start1":6203,"start2":6203,"length1":28,"length2":24},{"diffs":[[0,"            "],[-1,"    "],[0,"player_draw_"]],"start1":6248,"start2":6248,"length1":28,"length2":24},{"diffs":[[0,"                "],[-1,"  "],[-1,"  "],[0,"main_display()\n "]],"start1":6287,"start2":6287,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    }\n    "],[1,"}\n"],[0,"            "]],"start1":6322,"start2":6322,"length1":34,"length2":26},{"diffs":[[0,"ilDone)\n"],[-1,"                }\n"],[0,"        "]],"start1":6445,"start2":6445,"length1":34,"length2":16},{"diffs":[[0,") {\n"],[-1,"                if (main_working) {\n    "],[0,"    "]],"start1":6564,"start2":6564,"length1":48,"length2":8},{"diffs":[[0,"                "],[-1,"    "],[0,"player[\"standing"]],"start1":6614,"start2":6614,"length1":36,"length2":32},{"diffs":[[0,"= true\n\n"],[-1,"    "],[0,"        "]],"start1":6649,"start2":6649,"length1":20,"length2":16},{"diffs":[[0,"                "],[-1,"    "],[0,"//  30% chance t"]],"start1":6775,"start2":6775,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1," "],[-1,"   "],[0,"if (randint("]],"start1":6836,"start2":6836,"length1":28,"length2":24},{"diffs":[[0,"t(0, 10) < 3) {\n"],[-1,"    "],[0,"                "]],"start1":6858,"start2":6858,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"if (player_wildc"]],"start1":6919,"start2":6919,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"   "],[-1," "],[0,"new_wildcard = w"]],"start1":6982,"start2":6982,"length1":36,"length2":32},{"diffs":[[0,"s._pickRandom()\n"],[-1,"    "],[0,"                "]],"start1":7021,"start2":7021,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"  "],[-1,"  "],[0,"console.log(\"You"]],"start1":7109,"start2":7109,"length1":36,"length2":32},{"diffs":[[0,"rd[\"name\"])\n"],[-1,"    "],[0,"            "]],"start1":7176,"start2":7176,"length1":28,"length2":24},{"diffs":[[0,"                "],[-1,"    "],[0,"}\n              "]],"start1":7210,"start2":7210,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    \n    "],[1,"\n"],[0,"            "]],"start1":7232,"start2":7232,"length1":33,"length2":25},{"diffs":[[0,"            "],[-1,"  "],[-1,"  "],[0,"while (!bot["]],"start1":7301,"start2":7301,"length1":28,"length2":24},{"diffs":[[0,"anding\"]) {\n"],[-1,"    "],[0,"            "]],"start1":7328,"start2":7328,"length1":28,"length2":24},{"diffs":[[0,"                "],[-1,"    "],[0,"main_display()\n "]],"start1":7388,"start2":7388,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"   "],[-1," "],[0,"basic.pause(500)"]],"start1":7423,"start2":7423,"length1":36,"length2":32},{"diffs":[[0,"se(500)\n"],[-1,"    "],[0,"        "]],"start1":7448,"start2":7448,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    }\n                "],[0,"}"],[1,"\n"],[0,"\n       "]],"start1":7587,"start2":7587,"length1":39,"length2":18},{"diffs":[[0," while ("],[-1,"wildcard_toggl"],[1,"tru"],[0,"e) {\n\n  "]],"start1":7831,"start2":7831,"length1":30,"length2":19},{"diffs":[[0,"os(1000000)\n"],[-1,"\n"],[0,"            "]],"start1":7888,"start2":7888,"length1":25,"length2":24},{"diffs":[[0,"y()\n"],[-1,"                        "],[0,"\n   "]],"start1":7947,"start2":7947,"length1":32,"length2":8},{"diffs":[[0,"    "],[-1,"if (typeof value === \"string\") {"],[1,"control.raiseEvent(value ? 1 : 0, 1)"],[0,"\n   "]],"start1":7972,"start2":7972,"length1":40,"length2":44},{"diffs":[[0,"    "],[-1,"        break\n      "],[1,"}\n\n"],[0,"    "]],"start1":8029,"start2":8029,"length1":28,"length2":11},{"diffs":[[0,"                "],[-1,"  "],[0,"}"],[1,")"],[0,"\n               "]],"start1":8036,"start2":8036,"length1":35,"length2":34},{"diffs":[[0,"                "],[1,"\n"],[0,"    "],[-1,"}\n\n"],[0,"                "]],"start1":8055,"start2":8055,"length1":39,"length2":37},{"diffs":[[0,"                "],[-1,"    }"],[1,"control.waitForEvent(value ? 1 : 0, 1"],[0,")\n              "]],"start1":8072,"start2":8072,"length1":37,"length2":69},{"diffs":[[0,"ue)\n"],[-1,"                    main_display()\n                    wildcard_toggle = false\n"],[0,"    "]],"start1":8284,"start2":8284,"length1":87,"length2":8},{"diffs":[[0,"king"],[-1," = !main_working"],[0,"\n   "]],"start1":8507,"start2":8507,"length1":24,"length2":8},{"diffs":[[0,"  ++i\n    }\n"],[-1,"    "],[1,"\n"],[0,"    // Scrol"]],"start1":13799,"start2":13799,"length1":28,"length2":25},{"diffs":[[0,"roll up\n    "],[-1,"   "],[-1," "],[0,"input.onGest"]],"start1":13821,"start2":13821,"length1":28,"length2":24},{"diffs":[[0,"on () {\n        "],[-1,"    "],[0,"if (wildcard_dis"]],"start1":13874,"start2":13874,"length1":36,"length2":32},{"diffs":[[0,") {\n            "],[-1,"   "],[-1," "],[0,"console.log(\"Poi"]],"start1":13918,"start2":13918,"length1":36,"length2":32},{"diffs":[[0,"inter up\")\n\n"],[-1,"    "],[0,"            "]],"start1":13949,"start2":13949,"length1":28,"length2":24},{"diffs":[[0,"            "],[-1,"   "],[-1," "],[0,"pointer--\n  "]],"start1":14021,"start2":14021,"length1":28,"length2":24},{"diffs":[[0,"inter--\n"],[-1,"    "],[0,"        "]],"start1":14035,"start2":14035,"length1":20,"length2":16},{"diffs":[[0,"                "],[-1,"   "],[-1," "],[0,"redraw_pointer()"]],"start1":14099,"start2":14099,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"    }\n\n   "],[1,"}\n\n"],[0,"        "],[-1," "],[0,"}\n    "],[-1,"   "],[-1," "],[0,"})\n\n    "],[-1,"   "],[-1," "],[0,"// S"]],"start1":14140,"start2":14140,"length1":49,"length2":33},{"diffs":[[0,"ll down\n"],[-1,"    "],[0,"    inpu"]],"start1":14176,"start2":14176,"length1":20,"length2":16},{"diffs":[[0,"on () {\n        "],[-1,"   "],[-1," "],[0,"if (wildcard_dis"]],"start1":14228,"start2":14228,"length1":36,"length2":32},{"diffs":[[0,") {\n            "],[-1,"    "],[0,"console.log(\"Poi"]],"start1":14272,"start2":14272,"length1":36,"length2":32},{"diffs":[[0,"\")\n\n            "],[-1,"  "],[-1,"  "],[0,"if (typeof redra"]],"start1":14313,"start2":14313,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    "],[0,"pointer++\n  "]],"start1":14377,"start2":14377,"length1":28,"length2":24},{"diffs":[[0,"                "],[-1,"  "],[-1,"  "],[0,"pointer = Math.c"]],"start1":14399,"start2":14399,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"redraw_pointer()"]],"start1":14455,"start2":14455,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"  "],[-1,"  }\n    "],[1,"}\n"],[0,"        }\n  "]],"start1":14488,"start2":14488,"length1":34,"length2":26},{"diffs":[[0,"    "],[-1,"  "],[-1,"  "],[0,"})\n    "],[-1,"  "],[-1,"  \n  "],[1,"\n"],[0,"    "],[-1,"  "],[0,"inpu"]],"start1":14512,"start2":14512,"length1":32,"length2":20},{"diffs":[[0,"A, function() {\n"],[-1,"    "],[0,"        let sele"]],"start1":14557,"start2":14557,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"  "],[-1,"  "],[0,"return s"]],"start1":14647,"start2":14647,"length1":20,"length2":16},{"diffs":[[0,"lected_card\n"],[-1,"    "],[0,"    })\n     "]],"start1":14664,"start2":14664,"length1":28,"length2":24},{"diffs":[[0,"\n    })\n    "],[-1,"  "],[-1,"  "],[0,"// Select wi"]],"start1":14675,"start2":14675,"length1":28,"length2":24},{"diffs":[[0,"ct wildcard\n"],[-1,"    "],[0,"    input.on"]],"start1":14694,"start2":14694,"length1":28,"length2":24},{"diffs":[[0,"    "],[-1,"    \n "],[1,"\n"],[0,"    "],[-1,"   "],[0,"})\n"],[1,"\n"],[0,"}\nfu"]],"start1":14806,"start2":14806,"length1":24,"length2":17},{"diffs":[[0,"  index = 0\n"],[-1,"    \n"],[0,"    for (let"]],"start1":17794,"start2":17794,"length1":29,"length2":24}]}]},{"timestamp":1741227991003,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  ++i\n    }\n"],[1,"    "],[0,"    // Scrol"]],"start1":14129,"start2":14129,"length1":24,"length2":28},{"diffs":[[0,"roll up\n"],[1,"    "],[0,"    inpu"]],"start1":14154,"start2":14154,"length1":16,"length2":20},{"diffs":[[0,"on () {\n        "],[1,"    "],[0,"if (wildcard_dis"]],"start1":14211,"start2":14211,"length1":32,"length2":36},{"diffs":[[0,") {\n            "],[1," "],[1,"   "],[0,"console.log(\"Poi"]],"start1":14259,"start2":14259,"length1":32,"length2":36},{"diffs":[[0,"inter up\")\n\n"],[1,"    "],[0,"            "]],"start1":14294,"start2":14294,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"pointer--\n  "]],"start1":14370,"start2":14370,"length1":24,"length2":28},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"pointer = Math.c"]],"start1":14396,"start2":14396,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"redraw_pointer()"]],"start1":14456,"start2":14456,"length1":32,"length2":36},{"diffs":[[0,"r()\n            "],[1,"    "],[0,"}\n\n        }\n   "]],"start1":14489,"start2":14489,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"  "],[-1,"}\n"],[1,"  }\n    "],[0,"    })\n\n"],[1,"    "],[0,"    // S"]],"start1":14512,"start2":14512,"length1":26,"length2":38},{"diffs":[[0,"ll down\n    "],[1,"  "],[1,"  "],[0,"input.onGest"]],"start1":14553,"start2":14553,"length1":24,"length2":28},{"diffs":[[0,"on () {\n        "],[1,"    "],[0,"if (wildcard_dis"]],"start1":14609,"start2":14609,"length1":32,"length2":36},{"diffs":[[0,") {\n            "],[1," "],[1,"   "],[0,"console.log(\"Poi"]],"start1":14657,"start2":14657,"length1":32,"length2":36},{"diffs":[[0,"\")\n\n            "],[1,"   "],[1," "],[0,"if (typeof redra"]],"start1":14702,"start2":14702,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"pointer++\n  "]],"start1":14770,"start2":14770,"length1":24,"length2":28},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"pointer = Math.c"]],"start1":14796,"start2":14796,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"redraw_pointer()"]],"start1":14856,"start2":14856,"length1":32,"length2":36},{"diffs":[[0,"r()\n            "],[1,"    "],[0,"}\n        }\n    "]],"start1":14889,"start2":14889,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"}\n"],[0,"    }"],[-1,")\n\n"],[0,"\n    "],[-1,"\n"],[0,"    "],[-1,"input.onButtonPressed(Button.A, function() {\n        \n    })\n\n\n    // Select wildcard\n"],[1,"})\n        \n    "],[0,"    "]],"start1":14915,"start2":14915,"length1":114,"length2":38},{"diffs":[[0,"        input.on"],[-1,"Pi"],[1,"Butto"],[0,"nPressed(TouchPi"]],"start1":14945,"start2":14945,"length1":34,"length2":37},{"diffs":[[0,"ttonPressed("],[-1,"TouchPin.P2"],[1,"Button.A"],[0,", function()"]],"start1":14963,"start2":14963,"length1":35,"length2":32},{"diffs":[[0,"    "],[-1,"    console.log(\"YEAHEAYEAYEAYEAYEHHAhwdyuefhresfeuifuie\")\n"],[0,"    "]],"start1":14998,"start2":14998,"length1":67,"length2":8},{"diffs":[[0,"e\"]\n        "],[1,"    "],[0,"return selec"]],"start1":15072,"start2":15072,"length1":24,"length2":28},{"diffs":[[0,"ard\n    "],[1,"    })\n        // Select wildcard\n        input.onLogoEvent(TouchButtonEvent.Pressed, function () { // V2 MICROBIT!------------------\n            \n        "],[0,"})"],[-1,"\n\n"],[0,"\n}\nfunct"]],"start1":15105,"start2":15105,"length1":20,"length2":173}]}]},{"timestamp":1741228476231,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"lue: any"],[1,";\n                control.inBackground(function() {\n                    while (wildcard_toggle) {\n\n                        control.waitMicros(1000000)\n\n                        value"],[0," = wildc"]],"start1":7967,"start2":7967,"length1":16,"length2":197},{"diffs":[[0,"                "],[1,"        "],[0,"\n               "]],"start1":8178,"start2":8178,"length1":32,"length2":40},{"diffs":[[0,"        "],[-1,"console.log"],[1,"        if "],[0,"(typeof "]],"start1":8211,"start2":8211,"length1":27,"length2":27},{"diffs":[[0,"string\")"],[1," {\n                            break\n                        }\n                    }\n\n                })"],[0,"\n       "]],"start1":8249,"start2":8249,"length1":16,"length2":120},{"diffs":[[0,"\"string\") {\n"],[-1,"\n"],[0,"            "]],"start1":8416,"start2":8416,"length1":25,"length2":24},{"diffs":[[0,", true)\n"],[-1,"\n"],[0,"        "]],"start1":8515,"start2":8515,"length1":17,"length2":16},{"diffs":[[0,"splay()\n"],[-1,"\n"],[0,"        "]],"start1":8550,"start2":8550,"length1":17,"length2":16},{"diffs":[[0,"_toggle = false\n"],[1,""],[0,"                "]],"start1":8586,"start2":8586,"length1":32,"length2":32},{"diffs":[[0,"working = false\n"],[-1,"\n"],[0,"                "]],"start1":8639,"start2":8639,"length1":33,"length2":32},{"diffs":[[0,"le.log(\""],[-1,"wildcard_display"],[1,"function"],[0," ran!\")\n"]],"start1":13798,"start2":13798,"length1":32,"length2":24},{"diffs":[[0," down\")\n"],[1,"\n"],[0,"        "]],"start1":14637,"start2":14637,"length1":16,"length2":17},{"diffs":[[0,"A, function() {\n"],[1,"        \n    })\n\n\n    // Select wildcard\n    input.onPinPressed(TouchPin.P2, function() {\n"],[0,"        console."]],"start1":14888,"start2":14888,"length1":32,"length2":122},{"diffs":[[0,")\n\n\n"],[-1,"    // Select wildcard\n    input.onPinPressed(TouchPin.P2, function() {\n        \n    })\n\n    WaitUntilBlocks.waitUntilButtonReleased(Button.A)\n\n\n"],[0,"}\nfu"]],"start1":15165,"start2":15165,"length1":153,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"0.0\""],[-1,",\n        \"Wait Until Custom Blocks\": \"github:teacherpinky/wait-until-blocks#v0.1.12\""],[0,"\n   "]],"start1":273,"start2":273,"length1":93,"length2":8}]}]},{"timestamp":1741229072024,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"turn\n}\n\n"],[-1,"function"],[1,"let"],[0," wildcar"]],"start1":13430,"start2":13430,"length1":24,"length2":19},{"diffs":[[0,"play"],[-1,"(): string | void"],[1," = function()"],[0," {\n "]],"start1":13454,"start2":13454,"length1":25,"length2":21},{"diffs":[[0,"clear()\n"],[-1,"    \n"],[0,"    cons"]],"start1":13492,"start2":13492,"length1":21,"length2":16},{"diffs":[[0,"   \n"],[-1,"\n"],[0,"    "],[-1,"// Select wildcard\n    WaitUntilBlocks.waitUntilButtonPressed(Button.A)\n    if (wildcard_display_working"],[1,"input.onButtonPressed(Button.A, function("],[0,") {\n"]],"start1":14569,"start2":14569,"length1":117,"length2":53},{"diffs":[[0,"ed_card\n"],[-1,""],[0,"    }"],[1,")\n\n\n    // Select wildcard\n    input.onPinPressed(TouchPin.P2, function() {\n        \n    })\n\n    WaitUntilBlocks.waitUntilButtonReleased(Button.A)\n\n"],[0,"\n}\nfunct"]],"start1":14780,"start2":14780,"length1":21,"length2":169}]}]},{"timestamp":1741229607231,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ing\n"],[-1,"                wildcard_display_working = !wildcard_display_working\n                \n"],[0,"    "]],"start1":8549,"start2":8549,"length1":94,"length2":8}]}]},{"timestamp":1741229686842,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tton.A)\n"],[-1,"    \n"],[0,"    if ("]],"start1":14742,"start2":14742,"length1":21,"length2":16}]}]},{"timestamp":1741232269881,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,".A)\n"],[-1,"\n"],[0,"    "],[-1,"WaitUntilBlocks.waitUntilPinPressed(TouchPin.P0)"],[0,"\n   "]],"start1":14746,"start2":14746,"length1":61,"length2":12}]}]},{"timestamp":1741232275880,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ain_working\n"],[1,"                wildcard_display_working = !wildcard_display_working\n                \n"],[0,"            "]],"start1":8541,"start2":8541,"length1":24,"length2":110},{"diffs":[[0,"  }\n    })\n\n"],[-1,"\n"],[0,"    // Scrol"]],"start1":14301,"start2":14301,"length1":25,"length2":24},{"diffs":[[0,"utton.A)"],[1,"\n\n    WaitUntilBlocks.waitUntilPinPressed(TouchPin.P0)"],[0,"\n    if "]],"start1":14741,"start2":14741,"length1":16,"length2":70}]}]},{"timestamp":1741232804337,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ay()"],[-1,"\n                    console.log(\"Player hand:\" + player_hand.join())"],[0,"\n\n  "]],"start1":8262,"start2":8262,"length1":77,"length2":8},{"diffs":[[0,"  ++i\n    }\n"],[-1,"\n"],[0,"    // Scrol"]],"start1":13862,"start2":13862,"length1":25,"length2":24},{"diffs":[[0,"      }\n    })\n\n"],[1,"\n"],[0,"    // Scroll do"]],"start1":14211,"start2":14211,"length1":32,"length2":33},{"diffs":[[0,"  }\n    })\n\n"],[1,"\n    \n\n"],[0,"    // Selec"]],"start1":14570,"start2":14570,"length1":24,"length2":31},{"diffs":[[0,"ard\n"],[-1,"    let selection: any;\n\n    \n"],[0,"    "]],"start1":14608,"start2":14608,"length1":38,"length2":8},{"diffs":[[0,"aitUntil"],[-1,"Pi"],[1,"Butto"],[0,"nPressed"]],"start1":14633,"start2":14633,"length1":18,"length2":21},{"diffs":[[0,"sed("],[-1,"TouchPin.P1)\n    "],[1,"Button.A)"],[0,"\n   "]],"start1":14651,"start2":14651,"length1":25,"length2":17},{"diffs":[[0,"lect"],[-1,"ion\n    }\n    \n        "],[1,"ed_card\n    }"],[0,"\n}\nf"]],"start1":14855,"start2":14855,"length1":31,"length2":21}]}]},{"timestamp":1741233297283,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"                "],[1,"main_display()"],[0,"\n"],[-1,""],[0,"                "]],"start1":8236,"start2":8236,"length1":33,"length2":47},{"diffs":[[0,"alse"],[-1,"\n        let place = () => {\n            placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n        }"],[0,"\n\n  "]],"start1":9215,"start2":9215,"length1":135,"length2":8},{"diffs":[[0,"\n            `)\n"],[-1,"\n"],[1,"    "],[0,"            plac"]],"start1":9528,"start2":9528,"length1":33,"length2":36},{"diffs":[[0,"           place"],[-1,"("],[1,"d_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user}"],[0,")\n\n            c"]],"start1":9549,"start2":9549,"length1":33,"length2":101},{"diffs":[[0,"           place"],[-1,"("],[1,"d_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user }"],[0,")\n\n            c"]],"start1":9897,"start2":9897,"length1":33,"length2":102},{"diffs":[[0," `)\n"],[-1,"            place()\n            "],[0,"\n"],[1,""],[0,"    "]],"start1":11203,"start2":11203,"length1":41,"length2":9},{"diffs":[[0,"      . . # . .\n"],[1,""],[0,"            `)\n "]],"start1":11386,"start2":11386,"length1":32,"length2":32},{"diffs":[[0," `)\n"],[-1,"            place()\n\n"],[0,"    "]],"start1":11413,"start2":11413,"length1":29,"length2":8},{"diffs":[[0,"ointer][\"name\"]\n"],[-1,"\n"],[0,"        return s"]],"start1":14919,"start2":14919,"length1":33,"length2":32},{"diffs":[[0,"n select"],[-1,"ed_card"],[1,"ion"],[0,"\n    }\n "]],"start1":14948,"start2":14948,"length1":23,"length2":19}]}]},{"timestamp":1741234106787,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," }\n\n    "],[1,"function wildcard_use(wildcard_name: string, player_user: boolean): void {\n        // Player is user -> player_user = true\n        // Bot is user -> player_user = false\n        let place = () => {\n            placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n        }\n\n        console.log(wildcard_name)\n\n        switch (wildcard_name) {\n            case \"Sun\":\n                // Set goal to 24.\n                blackjack_goal = 24\n\n                basic.showLeds(`\n            # . # . #\n            . # # # .\n            # # # # #\n            . # # # .\n            # . # . #\n            `)\n\n            place()\n\n            case \"Moon\":\n                // Set goal to 17.\n                blackjack_goal = 17\n\n                basic.showLeds(`\n            . # # # .\n            . . # # #\n            . . . # #\n            . . # # #\n            . # # # .\n            `)\n                place()\n\n            case \"Justice\":\n                // Swap last drawn cards in hand\n                let temp: number = bot[\"last_draw\"]\n                bot[\"last_draw\"] = player[\"last_draw\"]\n                player[\"last_draw\"] = temp\n\n                bot_hand.pop()\n                bot_hand.push(bot[\"last_draw\"])\n\n                player_hand.pop()\n                player_hand.push(player[\"last_draw\"])\n\n                basic.showLeds(`\n            . # . # .\n            # # # # #\n            . . # . .\n            . . # . .\n            . # # # .\n            `)\n\n            case \"Strength\":\n                let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                if (player_user) {\n                    player_wildcard_deck.push(new_wildcard)\n                } else {\n                    bot_wildcard_deck.push(new_wildcard)\n                }\n\n                basic.showLeds(`\n            . . . # .\n            . . # # .\n            . . # . .\n            . # # . .\n            . # . . .\n            `)\n            case \"The Devil\":\n                bet++\n                basic.showLeds(`\n            # . . . #\n            # # . # #\n            . # # # .\n            . # . # .\n            . . # . .\n            `)\n            place()\n            \n            case \"The Star\":\n                bet--\n                basic.showLeds(`\n            . . # . .\n            . # # # .\n            # # . # #\n            . # # # .\n            . . # . .\n            `)\n            place()\n\n            case \"The Fool\":\n                // Copy last placed wildcard\n                let latest_wildcard: Dictionary = placed_wildcards[-1]\n\n                basic.showLeds(`\n            . # . # .\n            . . . . .\n            . . # . .\n            # . . . #\n            . # # # .\n            `)\n                music.play(\n                    music.builtinPlayableSoundEffect(soundExpression.giggle),\n                    music.PlaybackMode.UntilDone)\n\n                if (latest_wildcard[\"name\"] == \"The Fool\") {\n                    // Disallow copying The Fool (prevents breaking the game)\n                    message_screen(\"Cannot copy!\")\n                } else {\n                    wildcard_use(latest_wildcard[\"name\"], player_user)\n                }\n            case \"The Magician\":\n                // Return last drawn card to deck.\n                if (player_user) {\n                    player_hand.pop()\n                    deck.push(player[\"last_draw\"])\n                    player[\"last_draw\"] = player_hand[-1]\n                } else {\n                    bot_hand.pop()\n                    deck.push(bot[\"last_draw\"])\n                    bot[\"last_draw\"] = bot_hand[-1]\n                }\n            default:\n                console.log(\"Card not found!: \" + wildcard_name)\n\n        }\n\n    }"],[0,"\n\n    if"]],"start1":9029,"start2":9029,"length1":16,"length2":3734}]}]},{"timestamp":1741234154966,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e\n\n\n"],[-1,"/* \n    THE ISSUE!: for some reason wildcard_use goes through all wildcard cases, and fails\n                on The Fool because of non-existant previous card\n*/"],[0,"\n"],[1,""],[0,"\n// "]],"start1":102,"start2":102,"length1":169,"length2":9},{"diffs":[[0,"})\n\n"],[-1,"            function wildcard_use(wildcard_name: string, player_user: boolean): void {\n                // Player is user -> player_user = true\n                // Bot is user -> player_user = false\n                let place = () => {\n                    placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n                }\n\n                console.log(wildcard_name)\n\n                switch (wildcard_name) {\n                    case \"Sun\":\n                        // Set goal to 24.\n                        blackjack_goal = 24\n\n                        basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n\n                        place()\n\n                    case \"Moon\":\n                        // Set goal to 17.\n                        blackjack_goal = 17\n\n                        basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #\n                        . # # # .\n                        `)\n                        place()\n\n                    case \"Justice\":\n                        // Swap last drawn cards in hand\n                        let temp: number = bot[\"last_draw\"]\n                        bot[\"last_draw\"] = player[\"last_draw\"]\n                        player[\"last_draw\"] = temp\n\n                        bot_hand.pop()\n                        bot_hand.push(bot[\"last_draw\"])\n\n                        player_hand.pop()\n                        player_hand.push(player[\"last_draw\"])\n\n                        basic.showLeds(`\n                        . # . # .\n                        # # # # #\n                        . . # . .\n                        . . # . .\n                        . # # # .\n                        `)\n\n                    case \"Strength\":\n                        let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                        if (player_user) {\n                            player_wildcard_deck.push(new_wildcard)\n                        } else {\n                            bot_wildcard_deck.push(new_wildcard)\n                        }\n\n                        basic.showLeds(`\n                        . . . # .\n                        . . # # .\n                        . . # . .\n                        . # # . .\n                        . # . . .\n                        `)\n                        \n                    case \"The Devil\":\n                        bet++\n                        basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n                        place()\n\n                    case \"The Star\":\n                        bet--\n                        basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n                        place()\n\n                    case \"The Fool\":\n                        // Copy last placed wildcard\n                        let latest_wildcard: Dictionary = placed_wildcards[-1]\n\n                        basic.showLeds(`\n                        . # . # .\n                        . . . . .\n                        . . # . .\n                        # . . . #\n                        . # # # .\n                        `)\n                        music.play(\n                            music.builtinPlayableSoundEffect(soundExpression.giggle),\n                            music.PlaybackMode.UntilDone)\n\n                        if (latest_wildcard[\"name\"] == \"The Fool\") {\n                            // Disallow copying The Fool (prevents breaking the game)\n                            message_screen(\"Cannot copy!\")\n                        } else {\n                            wildcard_use(latest_wildcard[\"name\"], player_user)\n                        }\n                    case \"The Magician\":\n                        // Return last drawn card to deck.\n                        if (player_user) {\n                            player_hand.pop()\n                            deck.push(player[\"last_draw\"])\n                            player[\"last_draw\"] = player_hand[-1]\n                        } else {\n                            bot_hand.pop()\n                            deck.push(bot[\"last_draw\"])\n                            bot[\"last_draw\"] = bot_hand[-1]\n                        }\n                    default:\n                        console.log(\"Card not found!: \" + wildcard_name)\n\n                }\n\n            }\n\n"],[0,"    "]],"start1":7825,"start2":7825,"length1":4837,"length2":8},{"diffs":[[0,"\n    }\n\n"],[1,"    \n"],[0,"\n    if "]],"start1":9025,"start2":9025,"length1":16,"length2":21},{"diffs":[[0,"e\"]\n"],[-1,"        wildcard_display_working = false"],[0,"\n   "]],"start1":11239,"start2":11239,"length1":48,"length2":8}]}]},{"timestamp":1741234589968,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e()\n"],[-1,"                break"],[0,"\n   "]],"start1":8810,"start2":8810,"length1":29,"length2":8}]}]},{"timestamp":1741236321119,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"        "],[0,"break\n  "]],"start1":8822,"start2":8822,"length1":24,"length2":16}]}]},{"timestamp":1741236324020,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e()\n"],[-1,"                        break"],[0,"\n   "]],"start1":9231,"start2":9231,"length1":37,"length2":8},{"diffs":[[0," `)\n"],[-1,"                        break"],[0,"\n   "]],"start1":9939,"start2":9939,"length1":37,"length2":8},{"diffs":[[0,"                "],[-1,"break"],[0,"\n               "]],"start1":10543,"start2":10543,"length1":37,"length2":32},{"diffs":[[0,"e()\n"],[-1,"                        break"],[0,"\n   "]],"start1":10894,"start2":10894,"length1":37,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        break"],[0,"\n   "]],"start1":11232,"start2":11232,"length1":37,"length2":8},{"diffs":[[0,"    "],[-1,"if (placed_wildcards.length == 0)  {\n                            message_screen(\"Nothing to copy!\")\n                            break\n                        }\n\n                        let latest_wildcard: Dictionary = placed_wildcards[-1]\n\n                        if (latest_wildcard[\"name\"] == \"The Fool\") {\n                            // Disallow copying The Fool (prevents breaking the game)\n                            message_screen(\"Cannot copy!\")"],[1,"let latest_wildcard: Dictionary = placed_wildcards[-1]\n\n                        basic.showLeds(`\n                        . # . # .\n                        . . . . ."],[0,"\n   "]],"start1":11347,"start2":11347,"length1":462,"length2":172},{"diffs":[[0,"            "],[-1,"} else {"],[1,". . # . ."],[0,"\n           "]],"start1":11528,"start2":11528,"length1":32,"length2":33},{"diffs":[[0,"    "],[-1,"    basic.showLeds(`\n   "],[1,"# . . . #\n"],[0,"    "]],"start1":11570,"start2":11570,"length1":32,"length2":18},{"diffs":[[0,"                "],[-1," "],[0,". # "],[-1,"."],[1,"#"],[0," # .\n           "]],"start1":11592,"start2":11592,"length1":38,"length2":37},{"diffs":[[0,"            "],[-1,"    . . . . ."],[1,"`)"],[0,"\n           "]],"start1":11630,"start2":11630,"length1":37,"length2":26},{"diffs":[[0,"            "],[-1,"    . . # . ."],[1,"music.play("],[0,"\n           "]],"start1":11657,"start2":11657,"length1":37,"length2":35},{"diffs":[[0,"    "],[-1,"# . . . #\n                            . # # # .\n                            `)\n\n                            music.play(\n                                music.builtinPlayableSoundEffect(soundExpression.giggle),\n                                music.PlaybackMode.UntilDone)\n"],[1,"music.builtinPlayableSoundEffect(soundExpression.giggle),\n                            music.PlaybackMode.UntilDone)\n\n                        if (latest_wildcard[\"name\"] == \"The Fool\") {\n                            // Disallow copying The Fool (prevents breaking the game)\n                            message_screen(\"Cannot copy!\")\n                        } else {"],[0,"\n   "]],"start1":11705,"start2":11705,"length1":280,"length2":371},{"diffs":[[0,"   }"],[-1,"\n\n                        break"],[0,"\n   "]],"start1":12173,"start2":12173,"length1":39,"length2":8},{"diffs":[[0,"  }\n"],[-1,"                        \n                        break\n"],[0,"    "]],"start1":12706,"start2":12706,"length1":63,"length2":8},{"diffs":[[0,"me)\n"],[-1,"                        break"],[0,"\n   "]],"start1":12808,"start2":12808,"length1":37,"length2":8},{"diffs":[[0,"r_hand.join())\n\n"],[1,"                    wildcard_toggle = false\n                    wildcard_display_working = false\n\n"],[0,"                "]],"start1":13325,"start2":13325,"length1":32,"length2":130}]}]},{"timestamp":1741237099143,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ring"],[-1,", ypos"],[0,") {\n"]],"start1":19248,"start2":19248,"length1":14,"length2":8}]}]},{"timestamp":1741237103293,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e()\n"],[-1,"                        message_screen(\"Sun!\")\n                        message_screen(\"Goal is now \" + blackjack_goal, {\"y_pos\": 2})\n"],[0,"    "]],"start1":8810,"start2":8810,"length1":141,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        message_screen(\"Moon!\")\n                        message_screen(\"Goal is now \" + blackjack_goal)\n"],[0,"    "]],"start1":9231,"start2":9231,"length1":128,"length2":8},{"diffs":[[0," `)\n"],[-1,"                        \n"],[0,"    "]],"start1":9968,"start2":9968,"length1":33,"length2":8},{"diffs":[[0,"g, y"],[-1,"_"],[0,"pos"],[-1,": number = 1) {\n    // Shows a message on the OLED."],[1,") {"],[0,"\n   "]],"start1":19251,"start2":19251,"length1":63,"length2":14},{"diffs":[[0,"(0, "],[-1,"y_pos"],[1,"1"],[0,", me"]],"start1":19336,"start2":19336,"length1":13,"length2":9}]}]},{"timestamp":1741237675993,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"reen(\"Go"],[-1," for"],[1,"al is now "],[0,"\" + blac"]],"start1":8895,"start2":8895,"length1":20,"length2":26},{"diffs":[[0,"blackjack_goal, "],[-1,"2"],[1,"{\"y_pos\": 2}"],[0,")\n              "]],"start1":8917,"start2":8917,"length1":33,"length2":44},{"diffs":[[0,"reen(\"Go"],[-1," for"],[1,"al is now"],[0," \" + bla"]],"start1":9450,"start2":9450,"length1":20,"length2":25},{"diffs":[[0,"ack_goal"],[-1,", 2"],[0,")\n      "]],"start1":9478,"start2":9478,"length1":19,"length2":16},{"diffs":[[0,"s)\n}"],[-1,"\nfunction message_splash(message: string, y_pos: number = 1) {\n\n    control.inBackground(function() {\n        basic.pause(10)\n        OLED12864_I2C.showString(0, y_pos, message, 1)\n        basic.pause(2000)\n        OLED12864_I2C.showString(0, y_pos, message, 0)\n    })\n    \n}"],[0,"\n\nfu"]],"start1":19485,"start2":19485,"length1":283,"length2":8}]}]},{"timestamp":1741238270468,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"essage_s"],[-1,"plash"],[1,"creen"],[0,"(\"Sun!\")"]],"start1":8839,"start2":8839,"length1":21,"length2":21},{"diffs":[[0,"       message_s"],[-1,"plash"],[1,"creen"],[0,"(\"Go for\" + blac"]],"start1":8878,"start2":8878,"length1":37,"length2":37},{"diffs":[[0,"essage_s"],[-1,"plash"],[1,"creen"],[0,"(\"Moon!\""]],"start1":9376,"start2":9376,"length1":21,"length2":21},{"diffs":[[0,"essage_s"],[-1,"plash"],[1,"creen"],[0,"(\"Go for"]],"start1":9424,"start2":9424,"length1":21,"length2":21},{"diffs":[[0,"    "],[-1,"message_splash(\"Justice!\")\n                        message_splash(\"Swapped\" + bot[\"last_draw\"] +\" & \"+ player[\"last_draw\"], 2)\n"],[0,"\n   "]],"start1":10226,"start2":10226,"length1":135,"length2":8},{"diffs":[[0," `)\n"],[-1,"                        \n                        message_splash(\"Strength!\")\n                        message_splash(\" + \" + new_wildcard[\"name\"], 2)\n\n"],[0,"    "]],"start1":10848,"start2":10848,"length1":158,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        message_splash(\"Devil!\")\n                        message_splash(\"Bet: \" + bet, 2)\n"],[0,"    "]],"start1":11216,"start2":11216,"length1":114,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        message_splash(\"Star!\")\n                        message_splash(\"Bet: \" + bet, 2)\n"],[0,"    "]],"start1":11583,"start2":11583,"length1":113,"length2":8},{"diffs":[[0,"  break\n"],[-1,"\n"],[0,"        "]],"start1":11609,"start2":11609,"length1":17,"length2":16},{"diffs":[[0,"t_wildcard: "],[-1,"string"],[1,"Dictionary"],[0," = placed_wi"]],"start1":11925,"start2":11925,"length1":30,"length2":34},{"diffs":[[0,"ards[-1]"],[-1,"[\"name\"]"],[0,"\n\n      "]],"start1":11962,"start2":11962,"length1":24,"length2":16},{"diffs":[[0,"wildcard"],[1,"[\"name\"]"],[0," == \"The"]],"start1":12007,"start2":12007,"length1":16,"length2":24},{"diffs":[[0,"wildcard"],[1,"[\"name\"]"],[0,", player"]],"start1":12727,"start2":12727,"length1":16,"length2":24},{"diffs":[[0,"t_points)\n}\n"],[-1,"\n"],[0,"function mes"]],"start1":19459,"start2":19459,"length1":25,"length2":24},{"diffs":[[0,") {\n"],[-1,"    // Shows a message on the OLED during gameplay."],[0,"\n"],[1,""],[0,"    "]],"start1":19529,"start2":19529,"length1":60,"length2":9},{"diffs":[[0,"\n    })\n"],[1,"    \n"],[0,"}\n\nfunct"]],"start1":19731,"start2":19731,"length1":16,"length2":21},{"diffs":[[0,"ows "],[-1,"seperate screen"],[1,"a"],[0," mes"]],"start1":19818,"start2":19818,"length1":23,"length2":9}]}]},{"timestamp":1741238884654,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"\n\n                        "],[0,"\n   "]],"start1":13844,"start2":13844,"length1":34,"length2":8}]}]},{"timestamp":1741238944915,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"deck.push("],[0,"player_h"]],"start1":13455,"start2":13455,"length1":26,"length2":16},{"diffs":[[0,"layer_hand.pop()"],[-1,")"],[0,"\n               "]],"start1":13464,"start2":13464,"length1":33,"length2":32},{"diffs":[[0,"    "],[-1,"message_splash(\" -\" + "],[1,"deck.push("],[0,"play"]],"start1":13505,"start2":13505,"length1":30,"length2":18},{"diffs":[[0,"yer[\"last_draw\"]"],[-1,", 2"],[0,")\n              "]],"start1":13522,"start2":13522,"length1":35,"length2":32},{"diffs":[[0,"-1]\n"],[-1,"                            \n"],[0,"    "]],"start1":13602,"start2":13602,"length1":37,"length2":8},{"diffs":[[0,"        "],[-1,"deck.push("],[0,"bot_hand"]],"start1":13659,"start2":13659,"length1":26,"length2":16},{"diffs":[[0,"nd.pop()"],[-1,")"],[0,"\n       "]],"start1":13673,"start2":13673,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"message_splash(\"Bot: -\" + player"],[1,"deck.push(bot"],[0,"[\"la"]],"start1":13706,"start2":13706,"length1":40,"length2":21},{"diffs":[[0,"t_draw\"]"],[-1,", 2"],[0,")\n      "]],"start1":13728,"start2":13728,"length1":19,"length2":16},{"diffs":[[0,"    "],[-1,"message_splash(\"Magician!\")\n"],[1,"\n\n                        "],[0,"\n   "]],"start1":13844,"start2":13844,"length1":36,"length2":34},{"diffs":[[0,"me)\n"],[-1,"                        message_splash(\"ERROR!\")\n                        message_splash(\"INV CARD\", 2)\n"],[0,"    "]],"start1":14003,"start2":14003,"length1":111,"length2":8},{"diffs":[[0,"ay.\n"],[-1,"    console.log(message)\n\n"],[0,"    "]],"start1":20085,"start2":20085,"length1":34,"length2":8}]}]},{"timestamp":1741239337071,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," 2)\n"],[-1,"                        place()"],[0,"\n"],[1,""],[0,"    "]],"start1":10353,"start2":10353,"length1":40,"length2":9},{"diffs":[[0,"h\":\n"],[-1,"                        // Both players get same random wildcard.\n                        // Insta-use.\n"],[0,"    "]],"start1":10421,"start2":10421,"length1":112,"length2":8},{"diffs":[[0,"l\":\n"],[-1,"                        // Increment bet by 1.\n"],[0,"    "]],"start1":11193,"start2":11193,"length1":55,"length2":8},{"diffs":[[0,"             `)\n"],[1,"                        place()"],[0,"\n"],[-1,""],[0,"                "]],"start1":11449,"start2":11449,"length1":33,"length2":64},{"diffs":[[0," 2)\n"],[-1,"                        place()\n"],[0,"    "]],"start1":11599,"start2":11599,"length1":40,"length2":8},{"diffs":[[0,"r\":\n"],[-1,"                        // Decrement bet by 1.\n"],[0,"    "]],"start1":11666,"start2":11666,"length1":55,"length2":8},{"diffs":[[0,"                "],[1,"        place()"],[0,"\n               "]],"start1":11938,"start2":11938,"length1":32,"length2":47},{"diffs":[[0," 2)\n"],[-1,"                        place()\n"],[0,"    "]],"start1":12071,"start2":12071,"length1":40,"length2":8},{"diffs":[[0,"card"],[-1,".\n                        // Cannot copy itself or nothing.\n                        // Insta-use (this card specifically)"],[0,"\n   "]],"start1":12191,"start2":12191,"length1":129,"length2":8},{"diffs":[[0,"ck.\n"],[-1,"                        // Insta-use.\n"],[0,"    "]],"start1":13388,"start2":13388,"length1":46,"length2":8},{"diffs":[[0," }\n\n"],[-1,"            if (player[\"standing\"] && bot[\"standing\"]) {\n                break\n            }\n\n"],[0,"    "]],"start1":14260,"start2":14260,"length1":102,"length2":8},{"diffs":[[0,"LDCARDS\n"],[1,"\n"],[0,"        "]],"start1":14286,"start2":14286,"length1":16,"length2":17}]}]},{"timestamp":1741239906574,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   }"],[-1,"\n                let consume = () => {\n                    if (player_user) {\n                        for (let i = player_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (player_wildcard_deck[i] == wildcard_name) {\n                                player_wildcard_deck.splice(i, 1);\n                            }\n                        }\n                    } else {\n                        for (let i = bot_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (bot_wildcard_deck[i] == wildcard_name) {\n                                bot_wildcard_deck.splice(i, 1);\n                            }\n                        }\n                    }\n                    music.play(\n                        music.createSoundExpression(\n                        WaveShape.Square, \n                        200, 1, 255, 0, 100, \n                        SoundExpressionEffect.None, \n                        InterpolationCurve.Curve),\n                        music.PlaybackMode.UntilDone)\n                }"],[0,"\n\n  "]],"start1":8332,"start2":8332,"length1":1045,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        consume()\n"],[0,"    "]],"start1":8810,"start2":8810,"length1":42,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        consume()\n"],[0,"    "]],"start1":9347,"start2":9347,"length1":42,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        consume()\n"],[0,"    "]],"start1":10385,"start2":10385,"length1":42,"length2":8},{"diffs":[[0,", 2)"],[-1,"\n                        consume()"],[0,"\n\n  "]],"start1":11258,"start2":11258,"length1":42,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        consume()\n\n"],[0,"    "]],"start1":11782,"start2":11782,"length1":43,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        consume()\n\n"],[0,"    "]],"start1":12318,"start2":12318,"length1":43,"length2":8},{"diffs":[[0,"          break\n"],[1,"\n"],[0,"                "]],"start1":12336,"start2":12336,"length1":32,"length2":33},{"diffs":[[0,"!\")\n"],[-1,"                            break\n"],[0,"    "]],"start1":13035,"start2":13035,"length1":42,"length2":8},{"diffs":[[0,"ne)\n"],[-1,"                            consume()"],[0,"\n   "]],"start1":13527,"start2":13527,"length1":45,"length2":8},{"diffs":[[0,"  }\n"],[-1,"                        "],[0,"\n   "]],"start1":13625,"start2":13625,"length1":32,"length2":8},{"diffs":[[0,"!\")\n"],[-1,"                        consume()"],[0,"\n   "]],"start1":14366,"start2":14366,"length1":41,"length2":8}]}]},{"timestamp":1741240502383,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"E!: "],[-1,"wildcard_display needs to switch back to main_display after using\n                a wildcard. after testing some toggle switching, sometimes the game\n                stalls after bot stands. another times, hitting/standing only works\n                on wildcard_display and not main_display as it shoul"],[1,"for some reason wildcard_use goes through all wildcard cases, and fails\n                on The Fool because of non-existant previous car"],[0,"d\n*/"]],"start1":122,"start2":122,"length1":310,"length2":144},{"diffs":[[0,"  }\n"],[-1,"                    // Kick drum\n"],[0,"    "]],"start1":9020,"start2":9020,"length1":41,"length2":8}]}]},{"timestamp":1741240816586,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"function death_wildcard(): \n\n"],[0,"func"]],"start1":18211,"start2":18211,"length1":37,"length2":8}]}]},{"timestamp":1741382961667,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"dcard():"],[1," "],[0,"\n\nfuncti"]],"start1":18233,"start2":18233,"length1":16,"length2":17}]}]},{"timestamp":1741382961736,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"opponent's last "],[-1,"placed "],[0,"wildcard.\",\n}\n, "]],"start1":3127,"start2":3127,"length1":39,"length2":32},{"diffs":[[0,"eak\n"],[-1,"                    case \"Death\":\n                        // Removes opponent's last placed wildcard.\n                        death_wildcard()\n                        consume()\n                        break\n"],[0,"    "]],"start1":15966,"start2":15966,"length1":215,"length2":8},{"diffs":[[0,"d():"],[-1," void {\n    // Removes opponent's last placed wildcard.\n    // Undoes effect of removed wildcard\n\n    let wildcard_to_remove: Dictionary = placed_wildcards[-1]\n    let previous_wildcard: Dictionary = placed_wildcards[-2]\n    \n    sw\n\n}"],[0,"\n\nfu"]],"start1":18237,"start2":18237,"length1":243,"length2":8}]}]},{"timestamp":1741383560076,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1," bet ="],[0," dea"]],"start1":16098,"start2":16098,"length1":14,"length2":8},{"diffs":[[0,"ildcard("],[-1,"bet)\n"],[1,")"],[0,"\n       "]],"start1":16110,"start2":16110,"length1":21,"length2":17},{"diffs":[[0,"ard("],[-1,"bet: number): number"],[1,"): void"],[0," {\n "]],"start1":18449,"start2":18449,"length1":28,"length2":15},{"diffs":[[0,"   \n"],[1,""],[0,"    sw"],[-1,"itch(wildcard_to_remove) {\n        case \"The Devil\":\n            // UNDO Increment bet by 1.\n            bet--\n            basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n    }\n\n    return bet"],[0,"\n\n}\n"]],"start1":18677,"start2":18677,"length1":372,"length2":14}]}]},{"timestamp":1741384137859,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," 21\n"],[-1,"let previous_goals: number[] = [21]\n"],[0,"let "]],"start1":541,"start2":541,"length1":44,"length2":8},{"diffs":[[0," = true\n"],[1,""],[0,"let poin"]],"start1":582,"start2":582,"length1":16,"length2":16},{"diffs":[[0,"24.\n"],[-1,"                        previous_goals.push(blackjack_goal)\n"],[0,"    "]],"start1":9737,"start2":9737,"length1":68,"length2":8},{"diffs":[[0,"e()\n"],[-1,"                        \n"],[0,"    "]],"start1":10087,"start2":10087,"length1":33,"length2":8},{"diffs":[[0,"17.\n"],[-1,"                        previous_goals.push(blackjack_goal)\n"],[0,"    "]],"start1":10309,"start2":10309,"length1":68,"length2":8},{"diffs":[[0,"et)\n"],[-1,"                        message_splash(\"Death.\")"],[0,"\n"],[1,""],[0,"    "]],"start1":16125,"start2":16125,"length1":57,"length2":9},{"diffs":[[0,"      . . # . .\n"],[1,""],[0,"                "]],"start1":19004,"start2":19004,"length1":32,"length2":32},{"diffs":[[0," `)\n"],[-1,"            message_splash(\"Bet: \" + bet, 2)\n\n            break\n        case \"The Star\":\n            // UNDO Decrement bet by 1.\n            bet++\n            basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n            message_splash(\"Bet: \" + bet, 2)\n\n            break\n        case \"Sun\":\n            // UNDO Set goal to 24.\n            blackjack_goal = \n\n            basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n\n            message_splash(\"Go for\" + blackjack_goal, 2)\n            break\n        case \"Moon\":\n            // UNDO Set goal to 17.\n            previous_goals.push(blackjack_goal)\n\n            basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #\n                        . # # # .\n                        `)\n\n            message_splash(\"Go for \" + blackjack_goal, 2)\n            break\n        \n"],[0,"    "]],"start1":19043,"start2":19043,"length1":1252,"length2":8}]}]},{"timestamp":1741384702236,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rd.\n"],[-1,"                        if (placed_wildcards.length == 0) {\n                            message_screen(\"Can't remove!\")\n                            break\n                        }\n\n"],[0,"    "]],"start1":16256,"start2":16256,"length1":189,"length2":8},{"diffs":[[0,"card"],[-1,"\n    // Does NOT apply to insta-use wildcards"],[0,"\n\n  "]],"start1":18799,"start2":18799,"length1":53,"length2":8},{"diffs":[[0,"-1]\n    "],[-1,"#"],[0,"let prev"]],"start1":18863,"start2":18863,"length1":17,"length2":16},{"diffs":[[0,"          bet--\n"],[1,"            basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n"],[0,"            mess"]],"start1":19034,"start2":19034,"length1":32,"length2":258},{"diffs":[[0,"et: \" + bet, 2)\n"],[1,"\n"],[0,"            brea"]],"start1":19305,"start2":19305,"length1":32,"length2":33},{"diffs":[[0,"          bet++\n"],[1,"            basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n"],[0,"            mess"]],"start1":19407,"start2":19407,"length1":32,"length2":258},{"diffs":[[0,"et: \" + bet, 2)\n"],[1,"\n"],[0,"            brea"]],"start1":19678,"start2":19678,"length1":32,"length2":33},{"diffs":[[0,"l = "],[-1,"previous_goals.pop()\n            message_splash(\"Go for\" + blackjack_goal, 2)\n            break\n        case \"Moon\":\n            // UNDO Set goal to 17.\n            blackjack_goal = previous_goals.pop()"],[1,"\n\n            basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n"],[0,"\n   "]],"start1":19794,"start2":19794,"length1":210,"length2":236},{"diffs":[[0,"e_splash(\"Go for"],[-1," "],[0,"\" + blackjack_go"]],"start1":20045,"start2":20045,"length1":33,"length2":32},{"diffs":[[0,"k\n        case \""],[-1,"Justice"],[1,"Moon"],[0,"\":\n            /"]],"start1":20100,"start2":20100,"length1":39,"length2":36},{"diffs":[[0,"DO S"],[-1,"wap last drawn cards in hand (literally the same thing)\n            let temp: number = bot[\"last_draw\"]\n            bot[\"last_draw\"] = player[\"last_draw\"]\n            player[\"last_draw\"] = temp\n\n            bot_hand.pop()\n            bot_hand.push(bot[\"last_draw\"])\n\n            player_hand.pop()\n            player_hand.push(player[\"last_draw\"])\n\n            message_splash(\"Swapped\" + bot[\"last_draw\"] + \" & \" + player[\"last_draw\"], 2)"],[1,"et goal to 17.\n            previous_goals.push(blackjack_goal)\n\n            basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #"],[0,"\n   "]],"start1":20140,"start2":20140,"length1":445,"length2":236},{"diffs":[[0,"    "],[-1,"break\n"],[0,"        "],[-1,"default:\n            console.log(\"Death failed: \" + wildcard_to_remove)\n            message_splash(\"ERROR!\")"],[1,"    . # # # .\n                        `)\n"],[0,"\n   "]],"start1":20381,"start2":20381,"length1":130,"length2":57},{"diffs":[[0,"sh(\""],[-1,"INV DTH\""],[1,"Go for \" + blackjack_goal"],[0,", 2)"]],"start1":20459,"start2":20459,"length1":16,"length2":33},{"diffs":[[0,"      break\n"],[1,"        \n"],[0,"    }\n\n    r"]],"start1":20499,"start2":20499,"length1":24,"length2":33}]}]},{"timestamp":1741385301945,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"uld\n*/\n\n"],[-1,"\n\n"],[0,"//  Cons"]],"start1":426,"start2":426,"length1":18,"length2":16},{"diffs":[[0,"tionary = {\n"],[-1,""],[0,"    [key: st"]],"start1":975,"start2":975,"length1":24,"length2":24},{"diffs":[[0,"g]: any;\n}\n\n"],[1,"let toggle: number = 0\n\nfunction change_toggle(toggle: number) {\n    \n    if (toggle == 0) {\n        pins.digitalWritePin(DigitalPin.P1, 1)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 1\n    } else if (toggle == 1) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 1)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 2\n    } else if (toggle == 2) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 1)\n        toggle = 0\n    }\n    \n    console.log(toggle)\n}\n\n"],[0,"function sum"]],"start1":1002,"start2":1002,"length1":24,"length2":695},{"diffs":[[0,"   }"],[-1," else {\n                wildcard_display_working = false\n            }"],[0,"\n\n  "]],"start1":17487,"start2":17487,"length1":78,"length2":8},{"diffs":[[0,"-1]\n    "],[-1,"//"],[1,"#"],[0,"let prev"]],"start1":19089,"start2":19089,"length1":18,"length2":17},{"diffs":[[0," }\n\n"],[-1,"    basic.showLeds(`\n    # . . . #\n    . # . # .\n    . . # . .\n    . # . # .\n    # . . . #\n    `)\n\n"],[0,"    "]],"start1":20530,"start2":20530,"length1":107,"length2":8},{"diffs":[[0,"ildcard\n"],[1,"    let selection: any;\n\n    "],[0,"\n    Wai"]],"start1":21712,"start2":21712,"length1":16,"length2":45},{"diffs":[[0,"aitUntil"],[-1,"Butto"],[1,"Pi"],[0,"nPressed"]],"start1":21771,"start2":21771,"length1":21,"length2":18},{"diffs":[[0,"Pressed("],[-1,"Button.A"],[1,"TouchPin.P1"],[0,")\n    \n "]],"start1":21782,"start2":21782,"length1":24,"length2":27}]}]},{"timestamp":1741385890070,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"er_hand.join())\n"],[1,"\n"],[0,"                "]],"start1":16774,"start2":16774,"length1":32,"length2":33},{"diffs":[[0,"\n    })\n"],[-1," "],[0,"\n    // "]],"start1":20835,"start2":20835,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"let selected_card: string | void"],[0,"\n"],[1,""],[0,"    "]],"start1":21275,"start2":21275,"length1":41,"length2":9},{"diffs":[[0,"        "],[1,"let "],[0,"selected"]],"start1":21379,"start2":21379,"length1":16,"length2":20},{"diffs":[[0,"ted_card"],[1,": string"],[0," = playe"]],"start1":21396,"start2":21396,"length1":16,"length2":24},{"diffs":[[0,"lse\n        "],[-1,"\n    }\n    "],[0,"return selec"]],"start1":21490,"start2":21490,"length1":35,"length2":24},{"diffs":[[0,"lected_card\n"],[1,"    }\n"],[0,"    \n       "]],"start1":21511,"start2":21511,"length1":24,"length2":30}]}]},{"timestamp":1741386476023,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"    placed_wildcards.forEach(p)\n                }\n\n                function consume() {\n                    console.log(\"CONSUME!\")"],[1,"}\n                let consume = () => {"],[0,"\n   "]],"start1":7871,"start2":7871,"length1":139,"length2":47},{"diffs":[[0,"card_deck[i]"],[-1,"[\"name\"]"],[0," == wildcard"]],"start1":8082,"start2":8082,"length1":32,"length2":24},{"diffs":[[0,"1);\n"],[-1,"                                console.log(\"PW \"+ player_wildcard_deck)\n"],[0,"    "]],"start1":8178,"start2":8178,"length1":81,"length2":8},{"diffs":[[0,"_deck[i]"],[-1,"[\"name\"]"],[0," == wild"]],"start1":8393,"start2":8393,"length1":24,"length2":16},{"diffs":[[0,"1);\n"],[-1,"                                console.log(\"BW \" + bot_wildcard_deck)\n"],[0,"    "]],"start1":8482,"start2":8482,"length1":79,"length2":8},{"diffs":[[0,"t:1\n"],[-1,"                wildcard_display_working = true\n"],[0,"    "]],"start1":16409,"start2":16409,"length1":56,"length2":8}]}]},{"timestamp":1741387074568,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"wildcard_display_working = false\n"],[0,"\n   "]],"start1":5659,"start2":5659,"length1":41,"length2":8},{"diffs":[[0,"ch(p"],[-1," => console.log(p[\"name\"])"],[0,")\n"],[1,""],[0,"    "]],"start1":7901,"start2":7901,"length1":36,"length2":10},{"diffs":[[0,"og(\"PW \""],[-1," "],[0,"+ player"]],"start1":8323,"start2":8323,"length1":17,"length2":16},{"diffs":[[0,"deck"],[-1,".forEach(p => console.log(p[\"name\"])))\n                                break"],[1,")"],[0,"\n   "]],"start1":8349,"start2":8349,"length1":84,"length2":9},{"diffs":[[0,"deck"],[-1,".forEach(p => console.log(p[\"name\"])))\n                                break"],[1,")"],[0,"\n   "]],"start1":8732,"start2":8732,"length1":84,"length2":9},{"diffs":[[0,"alue, true)\n"],[1,"\n"],[0,"            "]],"start1":16987,"start2":16987,"length1":24,"length2":25},{"diffs":[[0,"    "],[-1,"// AFTER SINGLE ROUND"],[1,"bet++\n        "],[0,"\n   "]],"start1":17521,"start2":17521,"length1":29,"length2":22},{"diffs":[[0,"won(bet)"],[-1,"\n        bet++"],[0,"\n\n      "]],"start1":17552,"start2":17552,"length1":30,"length2":16}]}]},{"timestamp":1741387492462,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"                        if (player_wildcard_deck.length == 0) {\n                            return\n                        }\n"],[0,"    "]],"start1":8101,"start2":8101,"length1":133,"length2":8},{"diffs":[[0,"e {\n"],[-1,"                        if (bot_wildcard_deck.length == 0) {\n                            return\n                        }\n"],[0,"    "]],"start1":8571,"start2":8571,"length1":130,"length2":8},{"diffs":[[0,"Death\":\n"],[-1,"                    \n"],[0,"        "]],"start1":15977,"start2":15977,"length1":37,"length2":16},{"diffs":[[0,"tton.A)\n"],[-1,"\n"],[0,"    let "]],"start1":21797,"start2":21797,"length1":17,"length2":16},{"diffs":[[0," | void\n"],[-1,"\n"],[0,"    if ("]],"start1":21834,"start2":21834,"length1":17,"length2":16},{"diffs":[[0,") {\n"],[-1,"        if (!(player_wildcard_deck.length == 0)) {\n    "],[0,"    "]],"start1":21874,"start2":21874,"length1":63,"length2":8},{"diffs":[[0,"        "],[-1," "],[-1,"   "],[0,"selected"]],"start1":21941,"start2":21941,"length1":20,"length2":16},{"diffs":[[0,"\"name\"]\n        "],[-1,"    "],[0,"wildcard_display"]],"start1":21995,"start2":21995,"length1":36,"length2":32},{"diffs":[[0,"lse\n        "],[-1,"}"],[0,"\n    }\n    r"]],"start1":22040,"start2":22040,"length1":25,"length2":24}]}]},{"timestamp":1741388044688,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"rt\" "],[-1,"id=\"a1~7`TKx^]0ZnLA%-(Qk\" x=\"0\" y=\"0\""],[1,"x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement"],[0,"></b"]],"start1":101,"start2":101,"length1":45,"length2":600}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":469,"start2":469,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1740174916680,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"g\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1740957431056,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"//  Constants\nconst INITIAL_POINTS = 10\n\nlet blackjack_goal: number = 21\n\nOLED12864_I2C.init(60)\nmusic.setBuiltInSpeakerEnabled(false)\nmusic.setVolume(255)\n\nlet my_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\nfunction win_round() {\n    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerUp), music.PlaybackMode.InBackground)\n}\n\ntype Dictionary = {\n    [key: string]: string;\n}\n\nlet toggle = 0\n\nfunction change_toggle(toggle: number) {\n    \n    if (toggle == 0) {\n        pins.digitalWritePin(DigitalPin.P1, 1)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 1\n    } else if (toggle == 1) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 1)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 2\n    } else if (toggle == 2) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 1)\n        toggle = 0\n    }\n    \n    console.log(toggle)\n}\n\nfunction sum(numbers: any[]): number {\n    let total = 0\n    for (let n of numbers) {\n        total += n\n    }\n    //  Ensure all inputs are converted to floats before summing\n    return total\n}\n\nfunction set(lst: any[]): any[] {\n    let unique_items = []\n    for (let item of lst) {\n        if (unique_items.indexOf(item) < 0) {\n            unique_items.push(item)\n        }\n        \n    }\n    return unique_items\n}\n\nfunction custom_shuffle(lst: number[]) {\n    let j: number;\n    let temp: number;\n    let length = lst.length\n    for (let i = length - 1; i > 0; i += -1) {\n        j = randint(0, i)\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    }\n}\n\nlet player = {\n    \"name\" : \"Player\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet player_hand : number[] = []\nlet player_wildcard_deck: Dictionary[] = []\nlet player_placed_wildcards = []\nlet bot = {\n    \"name\" : \"Bot\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet bot_hand : number[] = []\nlet bot_wildcard_deck: Dictionary[] = []\nlet bot_placed_wildcards = []\n\n\nlet wildcards: Dictionary[] = [ {\n    \"name\" : \"Justice\",\n    \"description\" : \"Swap last drawn card with bot.\",\n}\n, {\n    \"name\" : \"Moon\",\n    \"description\" : \"Change blackjack goal to 17.\",\n}\n, {\n    \"name\" : \"Sun\",\n    \"description\" : \"Change blackjack goal to 24.\",\n}\n, {\n    \"name\" : \"Death\",\n    \"description\" : \"Removes opponent's last wildcard.\",\n}\n, {\n    \"name\" : \"Strength\",\n    \"description\" : \"Both players get a random wildcard.\",\n}\n, {\n    \"name\" : \"The Devil\",\n    \"description\" : \"Increase bet by 1.\",\n}\n, {\n    \"name\" : \"The Star\",\n    \"description\" : \"Decrease bet by 1.\",\n}\n, {\n    \"name\" : \"The Fool\",\n    \"description\" : \"Copy opponent's last wildcard.\",\n}\n, {\n    \"name\" : \"The Magician\",\n    \"description\" : \"Return last drawn card to deck.\",\n}\n, {\n    \"name\" : \"Temperance\",\n    \"description\" : \"Average all hand cards.\",\n}\n, {\n    \"name\" : \"The Tower\",\n    \"description\" : \"Remove all 1s and 2s.\",\n}\n, {\n    \"name\" : \"The High Priestess\",\n    \"description\" : \"Cannot lose points this round.\",\n}\n, {\n    \"name\" : \"The Chariot\",\n    \"description\" : \"Reveal opponent's hidden card.\",\n}\n, {\n    \"name\" : \"The Lovers\",\n    \"description\" : \"Subtract 5 from hand.\",\n}\n]\nfunction bot_decision_draw(deck: number[]) {\n\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n}\n\nfunction player_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        player_hand.push(card)\n        player[\"last_draw\"] = card\n        console.log(\"Player drew a card: \" + card)\n        if (randint(0, 10) < 2) {\n            //  20% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            player_wildcard_deck.push(new_wildcard)\n            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n        }\n        \n        if (sum(player_hand) > blackjack_goal) {\n            console.log(\"Busted!\")\n        }\n        \n    }\n    \n}\n\nfunction bot_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        bot_hand.push(card)\n        bot[\"last_draw\"] = card\n        console.log(\"Bot drew a card\")\n        if (randint(0, 10) < 2) {\n            //  20% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            bot_wildcard_deck.push(new_wildcard)\n            console.log(\"Bot received a wildcard: \" + new_wildcard[\"name\"])\n        }\n        \n    }\n    \n}\n\nfunction reset_hands() {\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n    \n    player[\"standing\"] = false\n    bot[\"standing\"] = false\n\n    player_hand.splice(0, player_hand.length)\n    bot_hand.splice(0, bot_hand.length)\n\n    console.log(\"Hands reset!\")\n}\n\nfunction play_blackjack() {\n    let deck: number[];\n    \n    let bet = 1\n\n    while (player[\"points\"] > 0 && bot[\"points\"] > 0) {\n\n        console.log(\"Bet: \" + bet)\n\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        console.log(\"Player hand (reset!):\" + player_hand.join())\n        console.log(\"Bot hand (reset!):\" + bot_hand.join())\n\n        let wildcard_toggle: boolean = false\n        \n        while (!(player[\"standing\"] && bot[\"standing\"])) {\n            //  HIT\n            input.onButtonPressed(Button.A, function on_button_pressed_a() {\n                if (player_hand.length > 4) {\n                    message_screen(\"Hand full!\")\n                } else {\n                    player_draw_card(deck)\n                }\n                \n            })\n            //  STAND\n            input.onButtonPressed(Button.B, function on_button_pressed_b() {\n                let new_wildcard: Dictionary;\n                player[\"standing\"] = true\n\n                //  20% chance to get a wildcard on draw\n                if (randint(0, 10) < 2) {\n                    // Limit 4 wildcards\n                    if (player_wildcard_deck.length < 4) {\n                        new_wildcard = wildcards._pickRandom()\n                        console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n                    }\n                    \n                }\n                \n                //  Bot draws from deck until stand\n                while (!bot[\"standing\"]) {\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n                }\n            })\n\n            // VIEW WILDCARDS\n            input.onPinPressed(TouchPin.P2, function() {\n                if (wildcard_toggle) {\n                    // Main display with normal cards\n                    main_display()\n                    console.log(\"Main display!\")\n                } else {\n                    // Wildcard display\n                    wildcard_display()\n                    console.log(\"Wildcard display!\")\n                }\n                \n                wildcard_toggle = !wildcard_toggle\n            })\n\n            basic.pause(1000)\n            \n            tube_module_show_points()\n\n        }\n        bet += 1\n        who_won(bet)\n\n        console.log(\"Player hand:\" + player_hand.join())\n        console.log(\"Bot hand:\" + bot_hand.join())\n\n        display_sum_of_both_hands()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n    }\n\n\n    if (player[\"points\"] > bot[\"points\"]) {\n        // Player wins\n        OLED12864_I2C.showString(0, 0, \"YOU WIN!\", 1)\n        console.log(\"PLAYER WINS!\")\n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n    }\n    OLED12864_I2C.showString(0, 3, \"Reset to play again.\", 1)\n    basic.pause(5000)\n\n    // END GAME\n\n    basic.clearScreen()\n    my_tm.off()\n    OLED12864_I2C.off()\n\n    return\n}\n\nfunction who_won(bet: number) {\n\n    function player_wins(bet: number) {\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    }\n\n    function bot_wins(bet: number) {\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n    }\n\n    if (sum(player_hand) > blackjack_goal) {\n        if (sum(bot_hand) > blackjack_goal) {\n\n        }\n        \n        console.log(\"You busted! Bot wins the round.\")\n        bot_wins(bet)\n\n    } else if (sum(bot_hand) > blackjack_goal) {\n        console.log(\"Bot busted! You win the round.\")\n        player_wins(bet)\n        \n    } else if (sum(player_hand) > sum(bot_hand)) {\n        console.log(\"You win the round!\")\n        player_wins(bet)\n\n    } else if (sum(player_hand) == sum(bot_hand)) {\n        console.log(\"It's a tie!\")\n        message_screen(\"Tie game!\")\n    } else {\n        console.log(\"Bot wins the round!\")\n        bot_wins(bet)\n\n    }\n    console.log(\"Player points: \" + player[\"points\"])\n    console.log(\"Bot points: \" + bot[\"points\"])\n    \n    let show_bot_total = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.showString(0, 3, show_bot_total, 1)\n}\n\nfunction display_sum_of_both_hands() {\n    console.log(\"Sum of player hand: \"+ sum(player_hand))\n    console.log(\"Sum of bot hand: \" + sum(bot_hand))\n}\n\nfunction tube_module_show_points() {\n    let player_points = Math.constrain(player[\"points\"], 0, 20)\n    let bot_points = Math.constrain(bot[\"points\"], 0, 20)\n\n    my_tm.showNumber(player_points * 100 + bot_points)\n}\n\nfunction message_screen(message: string) {\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.showString(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n}\n\nfunction main_display() {\n\n    OLED12864_I2C.clear()\n\n    let card_to_display: string;\n    let index: number = 0\n\n    for (let card of player_hand) {\n        card_to_display = \" \" + card\n        OLED12864_I2C.showString(index * 2.7, 3, card_to_display, 1)\n        index += 1\n    }\n\n    index = 0\n    for (let bcard of bot_hand) {\n        card_to_display = \" \" + bcard\n        if (index) {\n            OLED12864_I2C.showString(index * 2.7, 0, card_to_display, 1)\n        } else {\n            OLED12864_I2C.showString(index * 2.7, 0, \"?\", 1)\n        }\n        index += 1\n    }\n}\n\nfunction wildcard_display() {\n    OLED12864_I2C.clear()\n\n    let i = 0\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n        console.log(card_name)\n        OLED12864_I2C.showString(0, i, card_name, 1)\n    }\n}\n\n\nfunction main_menu() {\n    OLED12864_I2C.showString(0, 0, \"ARCANA BLACKJACK\", 1)\n    OLED12864_I2C.showString(0, 3, \"A+B to play.\", 1)\n    OLED12864_I2C.invert(true)\n\n    input.onButtonPressed(Button.AB, function() {\n        play_blackjack()\n    })\n}\n\n\n\nmain_menu()","README.md":"","main.py":"# Constants\nINITIAL_POINTS = 10\nINITIAL_BET = 1\n\ndeck: List[number] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nblackjack_goal = 21  # Reset every round\n\nbet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.set_built_in_speaker_enabled(False)\nmusic.set_volume(255)\n\nmy_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\n\ndef win_round():\n    music._play_default_background(music.built_in_playable_melody(Melodies.POWER_UP), music.PlaybackMode.IN_BACKGROUND)\n\ntoggle = 0\ndef change_toggle(toggle):\n    global toggle\n    if toggle == 0:\n        pins.digital_write_pin(DigitalPin.P1, 1)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 1\n    elif toggle == 1:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 1)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 2\n    elif toggle == 2:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 1)\n        toggle = 0\n    print(toggle)\n\n\ndef round(n):\n    n = n*1\n    integer_part = int(n)  # Get the integer part\n    decimal_part = n - integer_part  # Get the fractional part\n    \n    if decimal_part < 0.5:\n        return integer_part  # Round down\n    else:\n        return integer_part + 1  # Round up\n\ndef sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n  # Ensure all inputs are converted to floats before summing\n        \n    return total\n    \n\ndef len(lst):\n    count = 0\n    for _ in lst:\n        count += 1\n    return count\n\ndef set(lst):\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n    return unique_items\n\ndef custom_shuffle(lst: List[number]):\n    length = len(lst)\n    for i in range(length - 1, 0, -1):\n        j = randint(0, i)\n        temp  = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\nplayer = {\n    \"name\": \"Player\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nplayer_hand: List[number] = []\nplayer_wildcard_deck = [\"\"]\nplayer_placed_wildcards = []\n\nbot = {\n    \"name\": \"Bot\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nbot_hand: List[number] = []\nbot_wildcard_deck = [\"\"]\nbot_placed_wildcards = []\n\n\nwildcards = [\n    {\"name\": \"Justice\", \"description\": \"Swap last drawn card with bot.\"},\n    {\"name\": \"Moon\", \"description\": \"Change blackjack goal to 17.\"},\n    {\"name\": \"Sun\", \"description\": \"Change blackjack goal to 24.\"},\n    {\"name\": \"Death\", \"description\": \"Removes opponent's last wildcard.\"},\n    {\"name\": \"Strength\", \"description\": \"Both players get a random wildcard.\"},\n    {\"name\": \"The Devil\", \"description\": \"Increase bet by 1.\"},\n    {\"name\": \"The Star\", \"description\": \"Decrease bet by 1.\"},\n    {\"name\": \"The Fool\", \"description\": \"Copy opponent's last wildcard.\"},\n    {\"name\": \"The Magician\", \"description\": \"Return last drawn card to deck.\"},\n    {\"name\": \"Temperance\", \"description\": \"Average all hand cards.\"},\n    {\"name\": \"The Tower\", \"description\": \"Remove all 1s and 2s.\"},\n    {\"name\": \"The High Priestess\", \"description\": \"Cannot lose points this round.\"},\n    {\"name\": \"The Chariot\", \"description\": \"Reveal opponent's hidden card.\"},\n    {\"name\": \"The Lovers\", \"description\": \"Subtract 5 from hand.\"},\n]\n\ndef bot_decision_draw(deck: List[int]):\n    \"\"\"known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \"\"\"\n    #if bot_wildcard_deck and randint(0, 10) < 3:\n    #    pass\n    if sum(bot_hand) >= 15:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n    else:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n    \n    \"\"\"\n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \"\"\"\n\n\ndef player_draw_card(deck: List[int]):\n    if deck:\n        card: any = deck.pop()\n        player_hand.append(card)\n        player[\"last_draw\"]: number = card\n        print(f\"Player drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            player_wildcard_deck.append(new_wildcard)\n            print(f\"You received a wildcard:\" + new_wildcard)\n\n        if sum(player_hand) > blackjack_goal:\n            print(\"Busted!\")\n\n\n\ndef bot_draw_card(deck: List[int]):\n    if deck:\n        card: number = deck.pop()\n        bot_hand.append(card)\n        bot[\"last_draw\"] = card\n        print(f\"Bot drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            bot_wildcard_deck.append(new_wildcard)\n            print(\"Bot received a wildcard: \" + new_wildcard)\n\ndef reset_hands():\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n\n    player[\"standing\"] = False\n    bot[\"standing\"] = False\n\n    while len(player_hand) > 0:\n        player_hand.pop()\n\n    while len(bot_hand) > 0:\n        bot_hand.pop()\n\n    print(player_hand)\n    print(bot_hand)\n    print(\"Hands resetted!\")\n\ndef play_blackjack():\n    global blackjack_goal\n    bet = 1\n    in_playable_state = True\n    while in_playable_state:\n        print(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        while not (player[\"standing\"] and bot[\"standing\"]):\n            # HIT\n            def on_button_pressed_a():\n            \n                if len(player_hand) > 4:\n                    message_screen(\"Hand full!\")\n                else:\n                    player_draw_card(deck)\n\n            input.on_button_pressed(Button.A, on_button_pressed_a)\n                \n            # STAND\n            def on_button_pressed_b():\n                player[\"standing\"] = True\n\n                if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n                    new_wildcard: string = wildcards._pick_random()['name']\n                    print(f\"You received a wildcard:\" + new_wildcard)\n                \n                # Bot draws from deck until stand\n                while not bot[\"standing\"]:\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n\n            input.on_button_pressed(Button.B, on_button_pressed_b)\n            \n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n\n        bet += 1\n        who_won()\n        \n        print(player_hand)\n        print(bot_hand)\n        asdf()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n\n\n\nplay_blackjack()\n\ndef who_won():\n    if sum(player_hand) > blackjack_goal:\n        print(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n\n        message_screen(\"Bot wins!\")\n\n    elif sum(bot_hand) > blackjack_goal:\n        print(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n\n        message_screen(\"Player wins!\")\n    else:\n        if (sum(player_hand) > sum(bot_hand)):\n            print(\"You win the round!\")\n            player[\"points\"] += bet\n            bot[\"points\"] -= bet\n            win_round()\n\n            message_screen(\"Player wins!\")\n        elif sum(player_hand) == sum(bot_hand):\n            print(\"It's a tie!\")\n            message_screen(\"Tie game!\")\n        else:\n            print(\"Bot wins the round!\")\n            player[\"points\"] -= bet\n            bot[\"points\"] += bet\n\n            message_screen(\"Bot wins!\")\n\n    show_bot_total: str = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.show_string(0, 3, show_bot_total, 1)\n\ndef asdf():\n    print(sum(player_hand))\n    print(sum(bot_hand))\n\ndef tube_module_show_points():\n    my_tm.show_number(player[\"points\"] * 100 + bot[\"points\"])\n\ndef message_screen(message: str):\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.show_string(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n\n\ndef main_display():\n    index = 0\n    for card in player_hand:\n        card_to_display = \" \" + card\n        OLED12864_I2C.show_string(index*2.7, 3, card_to_display, 1)\n\n        index += 1\n    \n    index = 0\n    for bcard in bot_hand:\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.show_string(index*2.7, 0, card_to_display, 1)\n        index += 1\n\ndef wildcard_display():\n    i = 0\n    for card in player_wildcard_deck:\n        OLED12864_I2C.show_string(0, i, card['name'], 1)\n\n\ndef on_pin_pressed_p0():\n    pass\ninput.on_pin_pressed(TouchPin.P1, on_pin_pressed_p0)","pxt.json":"{\n    \"name\": \"g\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"TM1637\": \"github:makecode-extensions/tm1637#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1741218129836,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"// TODO: fix working boolean not switching correctly\n// TODO: implement wildcard usage\n\n\n\n\n//  Constants\nconst INITIAL_POINTS = 10\n\nlet blackjack_goal: number = 21\n\nOLED12864_I2C.init(60)\nOLED12864_I2C.on()\n\nmusic.setBuiltInSpeakerEnabled(false)\nmusic.setVolume(255)\n\nlet my_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\nfunction win_round() {\n    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerUp), music.PlaybackMode.InBackground)\n}\n\ntype Dictionary = {\n    [key: string]: any;\n}\n\nlet toggle: number = 0\n\nfunction change_toggle(toggle: number) {\n    \n    if (toggle == 0) {\n        pins.digitalWritePin(DigitalPin.P1, 1)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 1\n    } else if (toggle == 1) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 1)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 2\n    } else if (toggle == 2) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 1)\n        toggle = 0\n    }\n    \n    console.log(toggle)\n}\n\nfunction sum(numbers: any[]): number {\n    let total = 0\n    for (let n of numbers) {\n        total += n\n    }\n    //  Ensure all inputs are converted to floats before summing\n    return total\n}\n\nfunction set(lst: any[]): any[] {\n    let unique_items = []\n    for (let item of lst) {\n        if (unique_items.indexOf(item) < 0) {\n            unique_items.push(item)\n        }\n        \n    }\n    return unique_items\n}\n\nfunction custom_shuffle(lst: number[]) {\n    let j: number;\n    let temp: number;\n    let length = lst.length\n    for (let i = length - 1; i > 0; i += -1) {\n        j = randint(0, i)\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    }\n}\n\nlet player = {\n    \"name\" : \"Player\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet player_hand : number[] = []\nlet player_wildcard_deck: Dictionary[] = []\n\nlet bot = {\n    \"name\" : \"Bot\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet bot_hand : number[] = []\nlet bot_wildcard_deck: Dictionary[] = []\n\nlet placed_wildcards: Dictionary[] = []\n\n\nlet wildcards: Dictionary[] = [ {\n    \"name\" : \"Justice\",\n    \"description\" : \"Swap last drawn card with bot.\",\n}\n, {\n    \"name\" : \"Moon\",\n    \"description\" : \"Change blackjack goal to 17.\",\n}\n, {\n    \"name\" : \"Sun\",\n    \"description\" : \"Change blackjack goal to 24.\",\n}\n, {\n    \"name\" : \"Death\",\n    \"description\" : \"Removes opponent's last wildcard.\",\n}\n, {\n    \"name\" : \"Strength\",\n    \"description\" : \"Both players get a random wildcard.\",\n}\n, {\n    \"name\" : \"The Devil\",\n    \"description\" : \"Increase bet by 1.\",\n}\n, {\n    \"name\" : \"The Star\",\n    \"description\" : \"Decrease bet by 1.\",\n}\n, {\n    \"name\" : \"The Fool\",\n    \"description\" : \"Copy last placed wildcard for immediate use.\",\n}\n, {\n    \"name\" : \"The Magician\",\n    \"description\" : \"Return last drawn card to deck.\",\n}\n, {\n    \"name\" : \"Temperance\",\n    \"description\" : \"Average all hand cards.\",\n}\n, {\n    \"name\" : \"The Tower\",\n    \"description\" : \"Decrease value of all cards by 2.\",\n}\n, {\n    \"name\" : \"The High Priestess\",\n    \"description\" : \"Cannot lose points this round.\",\n}\n, {\n    \"name\" : \"The Chariot\",\n    \"description\" : \"Reveal opponent's hidden card.\",\n}\n, {\n    \"name\" : \"The Lovers\",\n    \"description\" : \"Subtract 5 from hand.\",\n}\n]\nfunction bot_decision_draw(deck: number[]) {\n\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n}\n\nfunction player_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        player_hand.push(card)\n        player[\"last_draw\"] = card\n        console.log(\"Player drew a card: \" + card)\n        if (randint(0, 10) < 2) {\n            //  20% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            player_wildcard_deck.push(new_wildcard)\n            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n        }\n        \n        if (sum(player_hand) > blackjack_goal) {\n            console.log(\"Busted!\")\n        }\n        \n    }\n    \n}\n\nfunction bot_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        bot_hand.push(card)\n        bot[\"last_draw\"] = card\n        console.log(\"Bot drew a card\")\n        if (randint(0, 10) < 2) {\n            //  20% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            bot_wildcard_deck.push(new_wildcard)\n            console.log(\"Bot received a wildcard: \" + new_wildcard[\"name\"])\n        }\n        \n    }\n    \n}\n\nfunction reset_hands() {\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n    \n    player[\"standing\"] = false\n    bot[\"standing\"] = false\n\n    player_hand.splice(0, player_hand.length)\n    bot_hand.splice(0, bot_hand.length)\n}\n\nfunction play_blackjack() {\n\n    let deck: number[];\n    \n    let bet: number = 1\n\n    OLED12864_I2C.clear()\n\n    while (player[\"points\"] > 0 && bot[\"points\"] > 0) {\n\n        console.log(\"Bet: \" + bet)\n\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        custom_shuffle(deck)\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n\n        console.log(\"Player hand (reset!):\" + player_hand.join())\n        console.log(\"Bot hand (reset!):\" + bot_hand.join())\n\n        let wildcard_toggle: boolean = false\n        \n        while (!(player[\"standing\"] && bot[\"standing\"])) {\n            //  HIT\n            input.onButtonPressed(Button.A, function on_button_pressed_a() {\n                if (player_hand.length > 4) {\n                    message_screen(\"Hand full!\")\n                } else {\n                    player_draw_card(deck)\n                }\n                music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n            })\n            //  STAND\n            input.onButtonPressed(Button.B, function on_button_pressed_b() {\n                let new_wildcard: Dictionary;\n                player[\"standing\"] = true\n\n                music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n\n                //  20% chance to get a wildcard on draw\n                if (randint(0, 10) < 2) {\n                    // Limit 4 wildcards\n                    if (player_wildcard_deck.length < 4) {\n                        new_wildcard = wildcards._pickRandom()\n                        player_wildcard_deck.push(new_wildcard)\n                        console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n                    }\n                    \n                }\n                \n                //  Bot draws from deck until stand\n                while (!bot[\"standing\"]) {\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n                    music.play(music.tonePlayable(Note.G5, music.beat(BeatFraction.Eighth)), music.PlaybackMode.UntilDone)\n                }\n\n            })\n\n            // VIEW WILDCARDS\n\n            if (!wildcard_toggle) {\n                // Main display with normal cards\n                main_display()\n                \n            } else {\n                // Wildcard display\n                let value = wildcard_display()\n                if (value) {\n                    wildcard_use(value, true)\n                }\n            }\n\n\n            input.onPinPressed(TouchPin.P2, function () {\n                wildcard_toggle = !wildcard_toggle\n                console.log(\"Wildcard screen toggle: \"+ wildcard_toggle)\n            })\n\n            basic.pause(1000)\n\n            tube_module_show_points()\n\n        }\n        bet += 1\n        who_won(bet)\n        \n        basic.pause(100)\n\n        console.log(\"Player hand:\" + player_hand.join())\n        console.log(\"Bot hand:\" + bot_hand.join())\n\n        display_sum_of_both_hands()\n\n        basic.pause(4000)\n\n        OLED12864_I2C.clear()\n    }\n\n    function wildcard_use(wildcard_name: string, player_user: boolean): void {\n        // Player is user -> player_user = true\n        // Bot is user -> player_user = false\n\n        console.log(wildcard_name)\n\n        switch (wildcard_name) {\n            case \"Sun\":\n                blackjack_goal = 24\n\n                basic.showLeds(`\n            # . # . #\n            . # # # .\n            # # # # #\n            . # # # .\n            # . # . #\n            `)\n                placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user})\n\n            case \"Moon\":\n                blackjack_goal = 17\n\n                basic.showLeds(`\n            . # # # .\n            . . # # #\n            . . . # #\n            . . # # #\n            . # # # .\n            `)\n                placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n\n            case \"Justice\":\n                // Swap last drawn cards in hand\n                let temp: number = bot[\"last_draw\"]\n                bot[\"last_draw\"] = player[\"last_draw\"]\n                player[\"last_draw\"] = temp\n\n                bot_hand.pop()\n                bot_hand.push(bot[\"last_draw\"])\n\n                player_hand.pop()\n                player_hand.push(player[\"last_draw\"])\n\n                basic.showLeds(`\n            . # . # .\n            # # # # #\n            . . # . .\n            . . # . .\n            . # # # .\n            `)\n\n            case \"Strength\":\n                let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                if (player_user) {\n                    player_wildcard_deck.push(new_wildcard)\n                } else {\n                    bot_wildcard_deck.push(new_wildcard)\n                }\n\n                basic.showLeds(`\n            . . . # .\n            . . # # .\n            . . # . .\n            . # # . .\n            . # . . .\n            `)\n            case \"The Devil\":\n                bet++\n                basic.showLeds(`\n            # . . . #\n            # # . # #\n            . # # # .\n            . # . # .\n            . . # . .\n            `)\n\n            case \"The Star\":\n                bet--\n                basic.showLeds(`\n            . . # . .\n            . # # # .\n            # # . # #\n            . # # # .\n            . . # . .\n            `)\n            case \"The Fool\":\n                // Copy last placed wildcard\n                let latest_wildcard: Dictionary = placed_wildcards[-1]\n\n                basic.showLeds(`\n            . # . # .\n            . . . . .\n            . . # . .\n            # . . . #\n            . # # # .\n            `)\n\n                music.play(\n                    music.builtinPlayableSoundEffect(soundExpression.giggle),\n                    music.PlaybackMode.UntilDone)\n\n                if (latest_wildcard[\"name\"] == \"The Fool\") {\n                    // Disallow copying The Fool (prevents breaking the game)\n                    message_screen(\"Cannot copy!\")\n                } else {\n                    wildcard_use(latest_wildcard[\"name\"], player_user)\n                }\n            case \"The Magician\":\n                // Return last drawn card to deck.\n                if (player_user) {\n                    player_hand.pop()\n                    deck.push(player[\"last_draw\"])\n                    player[\"last_draw\"] = player_hand[-1]\n                } else {\n                    bot_hand.pop()\n                    deck.push(bot[\"last_draw\"])\n                    bot[\"last_draw\"] = bot_hand[-1]\n                }\n            \n\n        }\n\n    }\n\n    if (player[\"points\"] > bot[\"points\"]) {\n        // Player wins\n        OLED12864_I2C.showString(0, 0, \"YOU WIN!\", 1)\n        console.log(\"PLAYER WINS!\")\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.Dadadadum), \n        music.PlaybackMode.InBackground)\n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n        music._playDefaultBackground(\n            music.builtInPlayableMelody(Melodies.Funeral), \n            music.PlaybackMode.InBackground)\n    }\n    OLED12864_I2C.showString(0, 3, \"Reset to play again.\", 1)\n    tube_module_show_points()\n    basic.pause(5000)\n\n    // END GAME\n    \n    basic.clearScreen()\n    \n    my_tm.off()\n    OLED12864_I2C.off()\n\n    return\n}\n\nfunction who_won(bet: number) {\n\n    function player_wins(bet: number) {\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    }\n\n    function bot_wins(bet: number) {\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n        music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n    }\n\n    // Calculate round winner\n\n    let total_player_hand: number = sum(player_hand)\n    let total_bot_hand: number = sum(bot_hand)\n\n    if (total_player_hand > blackjack_goal) {\n        if (total_bot_hand < blackjack_goal) {\n            // Player loses if player busts and bot does not.\n            console.log(\"You busted! Bot wins the round.\")\n            bot_wins(bet)\n\n        } else if (total_player_hand < total_bot_hand) {\n            // Player wins if both busted, but player busts the least.\n            console.log(\"You win the round!\")\n            player_wins(bet)\n\n        } else {\n            // Player loses if both busted, but bot busts the least.\n            console.log(\"Bot wins the round!\")\n            bot_wins(bet)\n        }\n\n    } else if (total_player_hand > total_bot_hand) {\n        // Neither busts, player wins if player's hand is more than bot's.\n        console.log(\"You win the round!\")\n        player_wins(bet)\n\n    } else if (total_bot_hand > blackjack_goal) {\n        // Player wins if bot busts and player does not.\n        console.log(\"Bot busted! You win the round.\")\n        player_wins(bet)\n        \n    } else if (total_player_hand == total_bot_hand) {\n        // Tie game if both hands are equal.\n        console.log(\"It's a tie!\")\n        message_screen(\"Tie game!\")\n\n    } else {\n        // Player loses if neither busts, but bot's hand is more than player's.\n        console.log(\"Bot wins the round!\")\n        bot_wins(bet)\n    }\n\n    console.log(\"Player points: \" + player[\"points\"])\n    console.log(\"Bot points: \" + bot[\"points\"])\n    \n    let show_bot_total = \"Bot had \" + total_bot_hand\n\n    OLED12864_I2C.showString(0, 3, show_bot_total, 1)\n}\n\nfunction display_sum_of_both_hands() {\n    console.log(\"Sum of player hand: \"+ sum(player_hand))\n    console.log(\"Sum of bot hand: \" + sum(bot_hand))\n}\n\n\nfunction tube_module_show_points() {\n    let player_points = Math.constrain(player[\"points\"], 0, 20)\n    let bot_points = Math.constrain(bot[\"points\"], 0, 20)\n\n    my_tm.showNumber(player_points * 100 + bot_points)\n}\n\nfunction message_screen(message: string) {\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.showString(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n}\n\nfunction main_display() {\n\n    OLED12864_I2C.clear()\n\n    let card_to_display: string;\n    let index: number = 0\n\n    for (let card of player_hand) {\n        card_to_display  = \" \" + card\n        OLED12864_I2C.showString(index * 2.7, 3, card_to_display, 1)\n        index += 1\n    }\n\n    index = 0\n    for (let bcard of bot_hand) {\n        card_to_display = \" \" + bcard\n        if (index) {\n            OLED12864_I2C.showString(index * 2, 0, card_to_display, 1) // INDEX MULTIPLIER MAYBE FIX!!!!!! -------------------\n        } else {\n            OLED12864_I2C.showString(index * 2, 0, \"?\", 1)\n        }\n        index += 1\n    }\n}\n\nfunction wildcard_display(): string | void {\n    OLED12864_I2C.clear()\n\n    let pointer: number = 0\n    let i: number = 0\n    let working: boolean = true\n\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n            console.log(card_name)\n        }\n        \n        OLED12864_I2C.showString(2, i, card_name, 1)\n        i++\n    }\n    \n    function redraw_pointer(): void {\n        console.log(\"Pointer redrawn!\")\n        for (let i: number = 0; i >= 3; i++) {\n            if (i == pointer) {\n                OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n            } else {\n                OLED12864_I2C.showString(0, i, \" \", 0)\n            }\n        }\n    }\n    \n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function() {\n        if (working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer--\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n            working = false\n\n            }\n    })\n\n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function() {\n        if (working) {\n            console.log(\"Pointer down\")\n            \n            if (typeof redraw_pointer === 'function') {\n                pointer++\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n            working = false\n        }\n    })\n\n    \n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () { // V2 MICROBIT!------------------\n        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n        return selected_card\n    })\n}\n\n\n\nfunction main_menu() {\n    OLED12864_I2C.showString(0, 0, \"   ARCANA\", 1)\n    OLED12864_I2C.showString(0, 1, \"  BLACKJACK\", 1)\n    OLED12864_I2C.showString(0, 3, \"SHAKE to play\", 1)\n    OLED12864_I2C.invert(true)\n    \n    input.onGesture(Gesture.Shake, function() {\n        console.log(\"shaked!\")\n        OLED12864_I2C.invert(false)\n        play_blackjack()\n    })\n    \n}\n\n\n\nmain_menu()","README.md":"","main.py":"# Constants\nINITIAL_POINTS = 10\nINITIAL_BET = 1\n\ndeck: List[number] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nblackjack_goal = 21  # Reset every round\n\nbet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.set_built_in_speaker_enabled(False)\nmusic.set_volume(255)\n\nmy_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\n\ndef win_round():\n    music._play_default_background(music.built_in_playable_melody(Melodies.POWER_UP), music.PlaybackMode.IN_BACKGROUND)\n\ntoggle = 0\ndef change_toggle(toggle):\n    global toggle\n    if toggle == 0:\n        pins.digital_write_pin(DigitalPin.P1, 1)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 1\n    elif toggle == 1:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 1)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 2\n    elif toggle == 2:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 1)\n        toggle = 0\n    print(toggle)\n\n\ndef round(n):\n    n = n*1\n    integer_part = int(n)  # Get the integer part\n    decimal_part = n - integer_part  # Get the fractional part\n    \n    if decimal_part < 0.5:\n        return integer_part  # Round down\n    else:\n        return integer_part + 1  # Round up\n\ndef sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n  # Ensure all inputs are converted to floats before summing\n        \n    return total\n    \n\ndef len(lst):\n    count = 0\n    for _ in lst:\n        count += 1\n    return count\n\ndef set(lst):\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n    return unique_items\n\ndef custom_shuffle(lst: List[number]):\n    length = len(lst)\n    for i in range(length - 1, 0, -1):\n        j = randint(0, i)\n        temp  = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\nplayer = {\n    \"name\": \"Player\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nplayer_hand: List[number] = []\nplayer_wildcard_deck = [\"\"]\nplayer_placed_wildcards = []\n\nbot = {\n    \"name\": \"Bot\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nbot_hand: List[number] = []\nbot_wildcard_deck = [\"\"]\nbot_placed_wildcards = []\n\n\nwildcards = [\n    {\"name\": \"Justice\", \"description\": \"Swap last drawn card with bot.\"},\n    {\"name\": \"Moon\", \"description\": \"Change blackjack goal to 17.\"},\n    {\"name\": \"Sun\", \"description\": \"Change blackjack goal to 24.\"},\n    {\"name\": \"Death\", \"description\": \"Removes opponent's last wildcard.\"},\n    {\"name\": \"Strength\", \"description\": \"Both players get a random wildcard.\"},\n    {\"name\": \"The Devil\", \"description\": \"Increase bet by 1.\"},\n    {\"name\": \"The Star\", \"description\": \"Decrease bet by 1.\"},\n    {\"name\": \"The Fool\", \"description\": \"Copy opponent's last wildcard.\"},\n    {\"name\": \"The Magician\", \"description\": \"Return last drawn card to deck.\"},\n    {\"name\": \"Temperance\", \"description\": \"Average all hand cards.\"},\n    {\"name\": \"The Tower\", \"description\": \"Remove all 1s and 2s.\"},\n    {\"name\": \"The High Priestess\", \"description\": \"Cannot lose points this round.\"},\n    {\"name\": \"The Chariot\", \"description\": \"Reveal opponent's hidden card.\"},\n    {\"name\": \"The Lovers\", \"description\": \"Subtract 5 from hand.\"},\n]\n\ndef bot_decision_draw(deck: List[int]):\n    \"\"\"known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \"\"\"\n    #if bot_wildcard_deck and randint(0, 10) < 3:\n    #    pass\n    if sum(bot_hand) >= 15:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n    else:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n    \n    \"\"\"\n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \"\"\"\n\n\ndef player_draw_card(deck: List[int]):\n    if deck:\n        card: any = deck.pop()\n        player_hand.append(card)\n        player[\"last_draw\"]: number = card\n        print(f\"Player drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            player_wildcard_deck.append(new_wildcard)\n            print(f\"You received a wildcard:\" + new_wildcard)\n\n        if sum(player_hand) > blackjack_goal:\n            print(\"Busted!\")\n\n\n\ndef bot_draw_card(deck: List[int]):\n    if deck:\n        card: number = deck.pop()\n        bot_hand.append(card)\n        bot[\"last_draw\"] = card\n        print(f\"Bot drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            bot_wildcard_deck.append(new_wildcard)\n            print(\"Bot received a wildcard: \" + new_wildcard)\n\ndef reset_hands():\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n\n    player[\"standing\"] = False\n    bot[\"standing\"] = False\n\n    while len(player_hand) > 0:\n        player_hand.pop()\n\n    while len(bot_hand) > 0:\n        bot_hand.pop()\n\n    print(player_hand)\n    print(bot_hand)\n    print(\"Hands resetted!\")\n\ndef play_blackjack():\n    global blackjack_goal\n    bet = 1\n    in_playable_state = True\n    while in_playable_state:\n        print(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        while not (player[\"standing\"] and bot[\"standing\"]):\n            # HIT\n            def on_button_pressed_a():\n            \n                if len(player_hand) > 4:\n                    message_screen(\"Hand full!\")\n                else:\n                    player_draw_card(deck)\n\n            input.on_button_pressed(Button.A, on_button_pressed_a)\n                \n            # STAND\n            def on_button_pressed_b():\n                player[\"standing\"] = True\n\n                if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n                    new_wildcard: string = wildcards._pick_random()['name']\n                    print(f\"You received a wildcard:\" + new_wildcard)\n                \n                # Bot draws from deck until stand\n                while not bot[\"standing\"]:\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n\n            input.on_button_pressed(Button.B, on_button_pressed_b)\n            \n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n\n        bet += 1\n        who_won()\n        \n        print(player_hand)\n        print(bot_hand)\n        asdf()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n\n\n\nplay_blackjack()\n\ndef who_won():\n    if sum(player_hand) > blackjack_goal:\n        print(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n\n        message_screen(\"Bot wins!\")\n\n    elif sum(bot_hand) > blackjack_goal:\n        print(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n\n        message_screen(\"Player wins!\")\n    else:\n        if (sum(player_hand) > sum(bot_hand)):\n            print(\"You win the round!\")\n            player[\"points\"] += bet\n            bot[\"points\"] -= bet\n            win_round()\n\n            message_screen(\"Player wins!\")\n        elif sum(player_hand) == sum(bot_hand):\n            print(\"It's a tie!\")\n            message_screen(\"Tie game!\")\n        else:\n            print(\"Bot wins the round!\")\n            player[\"points\"] -= bet\n            bot[\"points\"] += bet\n\n            message_screen(\"Bot wins!\")\n\n    show_bot_total: str = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.show_string(0, 3, show_bot_total, 1)\n\ndef asdf():\n    print(sum(player_hand))\n    print(sum(bot_hand))\n\ndef tube_module_show_points():\n    my_tm.show_number(player[\"points\"] * 100 + bot[\"points\"])\n\ndef message_screen(message: str):\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.show_string(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n\n\ndef main_display():\n    index = 0\n    for card in player_hand:\n        card_to_display = \" \" + card\n        OLED12864_I2C.show_string(index*2.7, 3, card_to_display, 1)\n\n        index += 1\n    \n    index = 0\n    for bcard in bot_hand:\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.show_string(index*2.7, 0, card_to_display, 1)\n        index += 1\n\ndef wildcard_display():\n    i = 0\n    for card in player_wildcard_deck:\n        OLED12864_I2C.show_string(0, i, card['name'], 1)\n\n\ndef on_pin_pressed_p0():\n    pass\ninput.on_pin_pressed(TouchPin.P1, on_pin_pressed_p0)","pxt.json":"{\n    \"name\": \"g - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"TM1637\": \"github:makecode-extensions/tm1637#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1741239971252,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"// TODO: fix wildcard_display_working boolean not switching correctly\n// TODO: implement wildcard usage\n\n\n/* \n    THE ISSUE!: for some reason wildcard_use goes through all wildcard cases, and fails\n                on The Fool because of non-existant previous card\n*/\n\n//  Constants\nconst INITIAL_POINTS: number = 15\nconst INITIAL_BET: number = 1\n\nlet blackjack_goal: number = 21\nlet wildcard_display_working: boolean = true\nlet pointer: number = 0\n\nOLED12864_I2C.init(60)\nOLED12864_I2C.on()\n\nmusic.setBuiltInSpeakerEnabled(false)\nmusic.setVolume(255)\n\nlet my_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\nfunction win_round() {\n    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerUp), music.PlaybackMode.InBackground)\n}\n\ntype Dictionary = {\n    [key: string]: any;\n}\n\nlet toggle: number = 0\n\nfunction change_toggle(toggle: number) {\n    \n    if (toggle == 0) {\n        pins.digitalWritePin(DigitalPin.P1, 1)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 1\n    } else if (toggle == 1) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 1)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 2\n    } else if (toggle == 2) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 1)\n        toggle = 0\n    }\n    \n    console.log(toggle)\n}\n\nfunction sum(numbers: any[]): number {\n    let total = 0\n    for (let n of numbers) {\n        total += n\n    }\n    //  Ensure all inputs are converted to floats before summing\n    return total\n}\n\nfunction set(lst: any[]): any[] {\n    let unique_items = []\n    for (let item of lst) {\n        if (unique_items.indexOf(item) < 0) {\n            unique_items.push(item)\n        }\n        \n    }\n    return unique_items\n}\n\nfunction custom_shuffle(lst: number[]) {\n    let j: number;\n    let temp: number;\n    let length = lst.length\n    for (let i = length - 1; i > 0; i += -1) {\n        j = randint(0, i)\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    }\n}\n\nlet player = {\n    \"name\" : \"Player\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet player_hand : number[] = []\nlet player_wildcard_deck: Dictionary[] = []\n\nlet bot = {\n    \"name\" : \"Bot\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet bot_hand : number[] = []\nlet bot_wildcard_deck: Dictionary[] = []\n\nlet placed_wildcards: Dictionary[] = []\n\n\nlet wildcards: Dictionary[] = [ {\n    \"name\" : \"Justice\",\n    \"description\" : \"Swap last drawn card with bot.\",\n}\n, {\n    \"name\" : \"Moon\",\n    \"description\" : \"Change blackjack goal to 17.\",\n}\n, {\n    \"name\" : \"Sun\",\n    \"description\" : \"Change blackjack goal to 24.\",\n}\n, {\n    \"name\" : \"Death\",\n    \"description\" : \"Removes opponent's last wildcard.\",\n}\n, {\n    \"name\" : \"Strength\",\n    \"description\" : \"Both players get a random wildcard.\",\n}\n, {\n    \"name\" : \"The Devil\",\n    \"description\" : \"Increase bet by 1.\",\n}\n, {\n    \"name\" : \"The Star\",\n    \"description\" : \"Decrease bet by 1.\",\n}\n, {\n    \"name\" : \"The Fool\",\n    \"description\" : \"Copy last placed wildcard for immediate use.\",\n}\n, {\n    \"name\" : \"The Magician\",\n    \"description\" : \"Return last drawn card to deck.\",\n}\n, {\n    \"name\" : \"Temperance\",\n    \"description\" : \"Average all hand cards.\",\n}\n, {\n    \"name\" : \"The Tower\",\n    \"description\" : \"Decrease value of all cards by 2.\",\n}\n, {\n    \"name\" : \"The High Priestess\",\n    \"description\" : \"Cannot lose points this round.\",\n}\n, {\n    \"name\" : \"The Chariot\",\n    \"description\" : \"Reveal opponent's hidden card.\",\n}\n, {\n    \"name\" : \"The Lovers\",\n    \"description\" : \"Subtract 5 from hand.\",\n}\n]\nfunction bot_decision_draw(deck: number[]) {\n\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n}\n\nfunction player_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        player_hand.push(card)\n        player[\"last_draw\"] = card\n        console.log(\"Player drew a card: \" + card)\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            player_wildcard_deck.push(new_wildcard)\n            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n        }\n        \n        if (sum(player_hand) > blackjack_goal) {\n            console.log(\"Busted!\")\n        }\n        \n    }\n    \n}\n\nfunction bot_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        bot_hand.push(card)\n        bot[\"last_draw\"] = card\n        console.log(\"Bot drew a card\")\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            bot_wildcard_deck.push(new_wildcard)\n            console.log(\"Bot received a wildcard: \" + new_wildcard[\"name\"])\n        }\n        \n    }\n    \n}\n\nfunction reset_hands() {\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n    \n    player[\"standing\"] = false\n    bot[\"standing\"] = false\n\n    player_hand.splice(0, player_hand.length)\n    bot_hand.splice(0, bot_hand.length)\n}\n\nfunction play_blackjack() {\n\n    let deck: number[];\n    \n    let bet: number = INITIAL_BET\n\n    OLED12864_I2C.clear()\n\n    while (player[\"points\"] > 0 && bot[\"points\"] > 0) {\n\n        console.log(\"Bet: \" + bet)\n\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        custom_shuffle(deck)\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n\n        console.log(\"Player hand (reset!):\" + player_hand.join())\n        console.log(\"Bot hand (reset!):\" + bot_hand.join())\n\n        let wildcard_toggle: boolean = false\n        let main_working: boolean = true\n        \n        while (!(player[\"standing\"] && bot[\"standing\"])) {\n            //  HIT\n            input.onButtonPressed(Button.A, function on_button_pressed_a() {\n                if (main_working) {\n                    if (player_hand.length > 4) {\n                        message_screen(\"Hand full!\")\n                    } else {\n                        player_draw_card(deck)\n                        main_display()\n                    }\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n                }\n            })\n\n            //  STAND\n            input.onButtonPressed(Button.B, function on_button_pressed_b() {\n                if (main_working) {\n                    let new_wildcard: Dictionary;\n                    player[\"standing\"] = true\n\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n\n                    //  30% chance to get a wildcard on draw\n                    if (randint(0, 10) < 3) {\n                        // Limit 4 wildcards\n                        if (player_wildcard_deck.length < 4) {\n                            new_wildcard = wildcards._pickRandom()\n                            player_wildcard_deck.push(new_wildcard)\n                            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n                        }\n                    }\n                    \n                    //  Bot draws from deck until stand\n                    while (!bot[\"standing\"]) {\n                        bot_decision_draw(deck)\n                        main_display()\n                        basic.pause(500)\n                        music.play(music.tonePlayable(Note.G5, music.beat(BeatFraction.Eighth)), music.PlaybackMode.UntilDone)\n                    }\n                }\n            })\n\n            function wildcard_use(wildcard_name: string, player_user: boolean): void {\n                // Player is user -> player_user = true\n                // Bot is user -> player_user = false\n                let place = () => {\n                    placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n                }\n\n                console.log(wildcard_name)\n\n                switch (wildcard_name) {\n                    case \"Sun\":\n                        // Set goal to 24.\n                        blackjack_goal = 24\n\n                        basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n\n                        place()\n                        message_splash(\"Sun!\")\n                        message_splash(\"Go for\" + blackjack_goal, 2)\n                        break\n                    case \"Moon\":\n                        // Set goal to 17.\n                        blackjack_goal = 17\n\n                        basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #\n                        . # # # .\n                        `)\n                        place()\n                        message_splash(\"Moon!\")\n                        message_splash(\"Go for \" + blackjack_goal, 2)\n                        break\n                    case \"Justice\":\n                        // Swap last drawn cards in hand\n                        let temp: number = bot[\"last_draw\"]\n                        bot[\"last_draw\"] = player[\"last_draw\"]\n                        player[\"last_draw\"] = temp\n\n                        bot_hand.pop()\n                        bot_hand.push(bot[\"last_draw\"])\n\n                        player_hand.pop()\n                        player_hand.push(player[\"last_draw\"])\n\n                        basic.showLeds(`\n                        . # . # .\n                        # # # # #\n                        . . # . .\n                        . . # . .\n                        . # # # .\n                        `)\n                        message_splash(\"Justice!\")\n                        message_splash(\"Swapped\" + bot[\"last_draw\"] +\" & \"+ player[\"last_draw\"], 2)\n                        place()\n                        break\n                    case \"Strength\":\n                        // Both players get same random wildcard.\n                        // Insta-use.\n                        let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                        if (player_user) {\n                            player_wildcard_deck.push(new_wildcard)\n                        } else {\n                            bot_wildcard_deck.push(new_wildcard)\n                        }\n\n                        basic.showLeds(`\n                        . . . # .\n                        . . # # .\n                        . . # . .\n                        . # # . .\n                        . # . . .\n                        `)\n                        \n                        message_splash(\"Strength!\")\n                        message_splash(\" + \" + new_wildcard[\"name\"], 2)\n\n                        break\n                    case \"The Devil\":\n                        // Increment bet by 1.\n                        bet++\n                        basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n\n                        message_splash(\"Devil!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        break\n                    case \"The Star\":\n                        // Decrement bet by 1.\n                        bet--\n                        basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n                \n                        message_splash(\"Star!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        break\n\n                    case \"The Fool\":\n                        // Copy last placed wildcard.\n                        // Cannot copy itself or nothing.\n                        // Insta-use (this card specifically)\n                        if (placed_wildcards.length == 0)  {\n                            message_screen(\"Nothing to copy!\")\n                            break\n                        }\n\n                        let latest_wildcard: string = placed_wildcards[-1][\"name\"]\n\n                        if (latest_wildcard == \"The Fool\") {\n                            // Disallow copying The Fool (prevents breaking the game)\n                            message_screen(\"Cannot copy!\")\n                        } else {\n                            basic.showLeds(`\n                            . # . # .\n                            . . . . .\n                            . . # . .\n                            # . . . #\n                            . # # # .\n                            `)\n\n                            music.play(\n                                music.builtinPlayableSoundEffect(soundExpression.giggle),\n                                music.PlaybackMode.UntilDone)\n\n                            wildcard_use(latest_wildcard, player_user)\n                        }\n\n                        break\n                    case \"The Magician\":\n                        // Return last drawn card to deck.\n                        // Insta-use.\n                        if (player_user) {\n                            deck.push(player_hand.pop())\n                            message_splash(\" -\" + player[\"last_draw\"], 2)\n                            player[\"last_draw\"] = player_hand[-1]\n                            \n                        } else {\n                            deck.push(bot_hand.pop())\n                            message_splash(\"Bot: -\" + player[\"last_draw\"], 2)\n                            bot[\"last_draw\"] = bot_hand[-1]\n                        }\n                        message_splash(\"Magician!\")\n\n                        break\n                    default:\n                        console.log(\"Card not found!: \" + wildcard_name)\n                        message_splash(\"ERROR!\")\n                        message_splash(\"INV CARD\", 2)\n                        break\n                }\n\n            }\n\n            if (player[\"standing\"] && bot[\"standing\"]) {\n                break\n            }\n\n            // VIEW WILDCARDS\n            if (wildcard_toggle) {\n                // Wildcard display // waypoint:1\n                let value: any = wildcard_display()\n                \n                console.log(typeof value === \"string\")\n                \n                if (typeof value === \"string\") {\n\n                    console.log(\"Used \" + value)\n                    wildcard_use(value, true)\n\n                    \n                    console.log(\"Player hand:\" + player_hand.join())\n\n                }\n            }\n\n            input.onPinPressed(TouchPin.P2, function () {\n                wildcard_toggle = !wildcard_toggle\n                main_working = !main_working\n                console.log(\"Wildcard screen toggle: \"+ wildcard_toggle)\n            })\n\n            basic.pause(1000)\n\n            tube_module_show_points()\n\n        }\n\n        bet++\n        \n        who_won(bet)\n\n        console.log(\"Player hand:\" + player_hand.join())\n        console.log(\"Bot hand:\" + bot_hand.join())\n\n        display_sum_of_both_hands()\n\n        basic.pause(4000)\n\n        OLED12864_I2C.clear()\n    }\n\n\n    if (player[\"points\"] > bot[\"points\"]) {\n        // Player wins\n        OLED12864_I2C.showString(0, 0, \"YOU WIN!\", 1)\n        console.log(\"PLAYER WINS!\")\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.JumpUp), \n        music.PlaybackMode.InBackground)\n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n        music._playDefaultBackground(\n            music.builtInPlayableMelody(Melodies.Funeral), \n            music.PlaybackMode.InBackground)\n    }\n    OLED12864_I2C.showString(0, 3, \"Reset to play again.\", 1)\n    tube_module_show_points()\n    basic.pause(5000)\n\n    // END GAME\n    \n    basic.clearScreen()\n    \n    my_tm.off()\n    OLED12864_I2C.off()\n\n    return\n}\n\nfunction wildcard_display(): string | void {\n    OLED12864_I2C.clear()\n    \n    console.log(\"wildcard_display ran!\")\n\n    let i: number = 0\n\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n\n        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n            console.log(card_name)\n        }\n\n        OLED12864_I2C.showString(2, i, card_name, 1)\n        ++i\n    }\n\n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer--\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n\n        }\n    })\n\n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer down\")\n            if (typeof redraw_pointer === 'function') {\n                pointer++\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n        }\n    })\n\n    // Select wildcard\n    let selection: any;\n\n    \n    WaitUntilBlocks.waitUntilPinPressed(TouchPin.P1)\n    \n    if (wildcard_display_working) {\n        console.log(\"YEAHEAYEAYEAYEAYEHHAhwdyuefhresfeuifuie\")\n        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n        wildcard_display_working = false\n        return selected_card\n    }\n    \n        \n}\nfunction who_won(bet: number) {\n\n    function player_wins() {\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    }\n\n    function bot_wins() {\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n        music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n    }\n\n    // Calculate round winner\n\n    let total_player_hand: number = sum(player_hand)\n    let total_bot_hand: number = sum(bot_hand)\n\n    if (total_player_hand > blackjack_goal) {\n        if (total_bot_hand < blackjack_goal) {\n            // Player loses if player busts and bot does not.\n            console.log(\"You busted! Bot wins the round.\")\n            bot_wins()\n\n        } else if (total_player_hand < total_bot_hand) {\n            // Player wins if both busted, but player busts the least.\n            console.log(\"You win the round!\")\n            player_wins()\n\n        } else {\n            // Player loses if both busted, but bot busts the least.\n            console.log(\"Bot wins the round!\")\n            bot_wins()\n        }\n\n    } else if (total_player_hand > total_bot_hand) {\n        // Neither busts, player wins if player's hand is more than bot's.\n        console.log(\"You win the round!\")\n        player_wins()\n\n    } else if (total_bot_hand > blackjack_goal) {\n        // Player wins if bot busts and player does not.\n        console.log(\"Bot busted! You win the round.\")\n        player_wins()\n        \n    } else if (total_player_hand == total_bot_hand) {\n        // Tie game if both hands are equal.\n        console.log(\"It's a tie!\")\n        message_screen(\"Tie game!\")\n\n    } else {\n        // Player loses if neither busts, but bot's hand is more than player's.\n        console.log(\"Bot wins the round!\")\n        bot_wins()\n    }\n\n    console.log(\"Player points: \" + player[\"points\"])\n    console.log(\"Bot points: \" + bot[\"points\"])\n    \n    let show_bot_total = \"Bot had \" + total_bot_hand\n\n    OLED12864_I2C.showString(0, 3, show_bot_total, 1)\n}\n\nfunction display_sum_of_both_hands() {\n    console.log(\"Sum of player hand: \"+ sum(player_hand))\n    console.log(\"Sum of bot hand: \" + sum(bot_hand))\n}\n\n\nfunction tube_module_show_points() {\n    let player_points = Math.constrain(player[\"points\"], 0, INITIAL_POINTS * 2)\n    let bot_points = Math.constrain(bot[\"points\"], 0, INITIAL_POINTS * 2)\n\n    my_tm.showNumber(player_points * 100 + bot_points)\n}\n\nfunction message_splash(message: string, y_pos: number = 1) {\n    // Shows a message on the OLED during gameplay.\n    console.log(message)\n\n    control.inBackground(function() {\n        basic.pause(10)\n        OLED12864_I2C.showString(0, y_pos, message, 1)\n        basic.pause(2000)\n        OLED12864_I2C.showString(0, y_pos, message, 0)\n    })\n}\n\nfunction message_screen(message: string, y_pos: number = 1) {\n    // Shows seperate screen message on the OLED.\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.showString(0, y_pos, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n}\n\nfunction main_display() {\n\n    OLED12864_I2C.clear()\n\n    let card_to_display: string;\n    let index: number = 0\n\n    for (let card of player_hand) {\n        card_to_display  = \" \" + card\n        OLED12864_I2C.showString(index * 2.7, 3, card_to_display, 1)\n        index += 1\n    }\n\n    index = 0\n    \n    for (let bcard of bot_hand) {\n        card_to_display = \" \" + bcard\n        if (index) {\n            OLED12864_I2C.showString(index * 2, 0, card_to_display, 1) // INDEX MULTIPLIER MAYBE FIX!!!!!! -------------------\n        } else {\n            OLED12864_I2C.showString(index * 2, 0, \"?\", 1)\n        }\n        index += 1\n    }\n}\n\nfunction redraw_pointer(): void {\n    for (let i: number = 0; i >= 3; i++) {\n        if (i == pointer) {\n            OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n        } else {\n            OLED12864_I2C.showString(0, i, \" \", 0)\n        }\n    }\n}\n\n\nfunction main_menu() {\n    OLED12864_I2C.showString(0, 0, \"   ARCANA\", 1)\n    OLED12864_I2C.showString(0, 1, \"  BLACKJACK\", 1)\n    OLED12864_I2C.showString(0, 3, \"SHAKE to play\", 1)\n    OLED12864_I2C.invert(true)\n    \n    input.onGesture(Gesture.Shake, function() {\n        console.log(\"shaked!\")\n        OLED12864_I2C.invert(false)\n        play_blackjack()\n    })\n    \n}\n\n\n\nmain_menu()","README.md":"","main.py":"# Constants\nINITIAL_POINTS = 10\nINITIAL_BET = 1\n\ndeck: List[number] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nblackjack_goal = 21  # Reset every round\n\nbet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.set_built_in_speaker_enabled(False)\nmusic.set_volume(255)\n\nmy_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\n\ndef win_round():\n    music._play_default_background(music.built_in_playable_melody(Melodies.POWER_UP), music.PlaybackMode.IN_BACKGROUND)\n\ntoggle = 0\ndef change_toggle(toggle):\n    global toggle\n    if toggle == 0:\n        pins.digital_write_pin(DigitalPin.P1, 1)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 1\n    elif toggle == 1:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 1)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 2\n    elif toggle == 2:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 1)\n        toggle = 0\n    print(toggle)\n\n\ndef round(n):\n    n = n*1\n    integer_part = int(n)  # Get the integer part\n    decimal_part = n - integer_part  # Get the fractional part\n    \n    if decimal_part < 0.5:\n        return integer_part  # Round down\n    else:\n        return integer_part + 1  # Round up\n\ndef sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n  # Ensure all inputs are converted to floats before summing\n        \n    return total\n    \n\ndef len(lst):\n    count = 0\n    for _ in lst:\n        count += 1\n    return count\n\ndef set(lst):\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n    return unique_items\n\ndef custom_shuffle(lst: List[number]):\n    length = len(lst)\n    for i in range(length - 1, 0, -1):\n        j = randint(0, i)\n        temp  = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\nplayer = {\n    \"name\": \"Player\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nplayer_hand: List[number] = []\nplayer_wildcard_deck = [\"\"]\nplayer_placed_wildcards = []\n\nbot = {\n    \"name\": \"Bot\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nbot_hand: List[number] = []\nbot_wildcard_deck = [\"\"]\nbot_placed_wildcards = []\n\n\nwildcards = [\n    {\"name\": \"Justice\", \"description\": \"Swap last drawn card with bot.\"},\n    {\"name\": \"Moon\", \"description\": \"Change blackjack goal to 17.\"},\n    {\"name\": \"Sun\", \"description\": \"Change blackjack goal to 24.\"},\n    {\"name\": \"Death\", \"description\": \"Removes opponent's last wildcard.\"},\n    {\"name\": \"Strength\", \"description\": \"Both players get a random wildcard.\"},\n    {\"name\": \"The Devil\", \"description\": \"Increase bet by 1.\"},\n    {\"name\": \"The Star\", \"description\": \"Decrease bet by 1.\"},\n    {\"name\": \"The Fool\", \"description\": \"Copy opponent's last wildcard.\"},\n    {\"name\": \"The Magician\", \"description\": \"Return last drawn card to deck.\"},\n    {\"name\": \"Temperance\", \"description\": \"Average all hand cards.\"},\n    {\"name\": \"The Tower\", \"description\": \"Remove all 1s and 2s.\"},\n    {\"name\": \"The High Priestess\", \"description\": \"Cannot lose points this round.\"},\n    {\"name\": \"The Chariot\", \"description\": \"Reveal opponent's hidden card.\"},\n    {\"name\": \"The Lovers\", \"description\": \"Subtract 5 from hand.\"},\n]\n\ndef bot_decision_draw(deck: List[int]):\n    \"\"\"known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \"\"\"\n    #if bot_wildcard_deck and randint(0, 10) < 3:\n    #    pass\n    if sum(bot_hand) >= 15:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n    else:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n    \n    \"\"\"\n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \"\"\"\n\n\ndef player_draw_card(deck: List[int]):\n    if deck:\n        card: any = deck.pop()\n        player_hand.append(card)\n        player[\"last_draw\"]: number = card\n        print(f\"Player drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            player_wildcard_deck.append(new_wildcard)\n            print(f\"You received a wildcard:\" + new_wildcard)\n\n        if sum(player_hand) > blackjack_goal:\n            print(\"Busted!\")\n\n\n\ndef bot_draw_card(deck: List[int]):\n    if deck:\n        card: number = deck.pop()\n        bot_hand.append(card)\n        bot[\"last_draw\"] = card\n        print(f\"Bot drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            bot_wildcard_deck.append(new_wildcard)\n            print(\"Bot received a wildcard: \" + new_wildcard)\n\ndef reset_hands():\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n\n    player[\"standing\"] = False\n    bot[\"standing\"] = False\n\n    while len(player_hand) > 0:\n        player_hand.pop()\n\n    while len(bot_hand) > 0:\n        bot_hand.pop()\n\n    print(player_hand)\n    print(bot_hand)\n    print(\"Hands resetted!\")\n\ndef play_blackjack():\n    global blackjack_goal\n    bet = 1\n    in_playable_state = True\n    while in_playable_state:\n        print(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        while not (player[\"standing\"] and bot[\"standing\"]):\n            # HIT\n            def on_button_pressed_a():\n            \n                if len(player_hand) > 4:\n                    message_screen(\"Hand full!\")\n                else:\n                    player_draw_card(deck)\n\n            input.on_button_pressed(Button.A, on_button_pressed_a)\n                \n            # STAND\n            def on_button_pressed_b():\n                player[\"standing\"] = True\n\n                if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n                    new_wildcard: string = wildcards._pick_random()['name']\n                    print(f\"You received a wildcard:\" + new_wildcard)\n                \n                # Bot draws from deck until stand\n                while not bot[\"standing\"]:\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n\n            input.on_button_pressed(Button.B, on_button_pressed_b)\n            \n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n\n        bet += 1\n        who_won()\n        \n        print(player_hand)\n        print(bot_hand)\n        asdf()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n\n\n\nplay_blackjack()\n\ndef who_won():\n    if sum(player_hand) > blackjack_goal:\n        print(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n\n        message_screen(\"Bot wins!\")\n\n    elif sum(bot_hand) > blackjack_goal:\n        print(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n\n        message_screen(\"Player wins!\")\n    else:\n        if (sum(player_hand) > sum(bot_hand)):\n            print(\"You win the round!\")\n            player[\"points\"] += bet\n            bot[\"points\"] -= bet\n            win_round()\n\n            message_screen(\"Player wins!\")\n        elif sum(player_hand) == sum(bot_hand):\n            print(\"It's a tie!\")\n            message_screen(\"Tie game!\")\n        else:\n            print(\"Bot wins the round!\")\n            player[\"points\"] -= bet\n            bot[\"points\"] += bet\n\n            message_screen(\"Bot wins!\")\n\n    show_bot_total: str = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.show_string(0, 3, show_bot_total, 1)\n\ndef asdf():\n    print(sum(player_hand))\n    print(sum(bot_hand))\n\ndef tube_module_show_points():\n    my_tm.show_number(player[\"points\"] * 100 + bot[\"points\"])\n\ndef message_screen(message: str):\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.show_string(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n\n\ndef main_display():\n    index = 0\n    for card in player_hand:\n        card_to_display = \" \" + card\n        OLED12864_I2C.show_string(index*2.7, 3, card_to_display, 1)\n\n        index += 1\n    \n    index = 0\n    for bcard in bot_hand:\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.show_string(index*2.7, 0, card_to_display, 1)\n        index += 1\n\ndef wildcard_display():\n    i = 0\n    for card in player_wildcard_deck:\n        OLED12864_I2C.show_string(0, i, card['name'], 1)\n\n\ndef on_pin_pressed_p0():\n    pass\ninput.on_pin_pressed(TouchPin.P1, on_pin_pressed_p0)","pxt.json":"{\n    \"name\": \"g - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"TM1637\": \"github:makecode-extensions/tm1637#v1.0.0\",\n        \"Wait Until Custom Blocks\": \"github:teacherpinky/wait-until-blocks#v0.1.12\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1741382961667,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"// TODO: fix wildcard_display_working boolean not switching correctly\n// TODO: implement wildcard usage\n\n\n/* \n    THE ISSUE!: wildcard_display needs to switch back to main_display after using\n                a wildcard. after testing some toggle switching, sometimes the game\n                stalls after bot stands. another times, hitting/standing only works\n                on wildcard_display and not main_display as it should\n*/\n\n//  Constants\nconst INITIAL_POINTS: number = 15\nconst INITIAL_BET: number = 1\n\nlet blackjack_goal: number = 21\nlet wildcard_display_working: boolean = true\nlet pointer: number = 0\n\nOLED12864_I2C.init(60)\nOLED12864_I2C.on()\n\nmusic.setBuiltInSpeakerEnabled(false)\nmusic.setVolume(255)\n\nlet my_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\nfunction win_round() {\n    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerUp), music.PlaybackMode.InBackground)\n}\n\ntype Dictionary = {\n    [key: string]: any;\n}\n\nlet toggle: number = 0\n\nfunction change_toggle(toggle: number) {\n    \n    if (toggle == 0) {\n        pins.digitalWritePin(DigitalPin.P1, 1)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 1\n    } else if (toggle == 1) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 1)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 2\n    } else if (toggle == 2) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 1)\n        toggle = 0\n    }\n    \n    console.log(toggle)\n}\n\nfunction sum(numbers: any[]): number {\n    let total = 0\n    for (let n of numbers) {\n        total += n\n    }\n    //  Ensure all inputs are converted to floats before summing\n    return total\n}\n\nfunction set(lst: any[]): any[] {\n    let unique_items = []\n    for (let item of lst) {\n        if (unique_items.indexOf(item) < 0) {\n            unique_items.push(item)\n        }\n        \n    }\n    return unique_items\n}\n\nfunction custom_shuffle(lst: number[]) {\n    let j: number;\n    let temp: number;\n    let length = lst.length\n    for (let i = length - 1; i > 0; i += -1) {\n        j = randint(0, i)\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    }\n}\n\nlet player = {\n    \"name\" : \"Player\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet player_hand : number[] = []\nlet player_wildcard_deck: Dictionary[] = []\n\nlet bot = {\n    \"name\" : \"Bot\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet bot_hand : number[] = []\nlet bot_wildcard_deck: Dictionary[] = []\n\nlet placed_wildcards: Dictionary[] = []\n\n\nlet wildcards: Dictionary[] = [ {\n    \"name\" : \"Justice\",\n    \"description\" : \"Swap last drawn card with bot.\",\n}\n, {\n    \"name\" : \"Moon\",\n    \"description\" : \"Change blackjack goal to 17.\",\n}\n, {\n    \"name\" : \"Sun\",\n    \"description\" : \"Change blackjack goal to 24.\",\n}\n, {\n    \"name\" : \"Death\",\n    \"description\" : \"Removes opponent's last wildcard.\",\n}\n, {\n    \"name\" : \"Strength\",\n    \"description\" : \"Both players get a random wildcard.\",\n}\n, {\n    \"name\" : \"The Devil\",\n    \"description\" : \"Increase bet by 1.\",\n}\n, {\n    \"name\" : \"The Star\",\n    \"description\" : \"Decrease bet by 1.\",\n}\n, {\n    \"name\" : \"The Fool\",\n    \"description\" : \"Copy last placed wildcard for immediate use.\",\n}\n, {\n    \"name\" : \"The Magician\",\n    \"description\" : \"Return last drawn card to deck.\",\n}\n, {\n    \"name\" : \"Temperance\",\n    \"description\" : \"Average all hand cards.\",\n}\n, {\n    \"name\" : \"The Tower\",\n    \"description\" : \"Decrease value of all cards by 2.\",\n}\n, {\n    \"name\" : \"The High Priestess\",\n    \"description\" : \"Cannot lose points this round.\",\n}\n, {\n    \"name\" : \"The Chariot\",\n    \"description\" : \"Reveal opponent's hidden card.\",\n}\n, {\n    \"name\" : \"The Lovers\",\n    \"description\" : \"Subtract 5 from hand.\",\n}\n]\nfunction bot_decision_draw(deck: number[]) {\n\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n}\n\nfunction player_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        player_hand.push(card)\n        player[\"last_draw\"] = card\n        console.log(\"Player drew a card: \" + card)\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            player_wildcard_deck.push(new_wildcard)\n            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n        }\n        \n        if (sum(player_hand) > blackjack_goal) {\n            console.log(\"Busted!\")\n        }\n        \n    }\n    \n}\n\nfunction bot_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        bot_hand.push(card)\n        bot[\"last_draw\"] = card\n        console.log(\"Bot drew a card\")\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            bot_wildcard_deck.push(new_wildcard)\n            console.log(\"Bot received a wildcard: \" + new_wildcard[\"name\"])\n        }\n        \n    }\n    \n}\n\nfunction reset_hands() {\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n    \n    player[\"standing\"] = false\n    bot[\"standing\"] = false\n\n    player_hand.splice(0, player_hand.length)\n    bot_hand.splice(0, bot_hand.length)\n}\n\nfunction play_blackjack() {\n\n    let deck: number[];\n    \n    let bet: number = INITIAL_BET\n\n    OLED12864_I2C.clear()\n\n    while (player[\"points\"] > 0 && bot[\"points\"] > 0) {\n\n        console.log(\"Bet: \" + bet)\n\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        custom_shuffle(deck)\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n\n        console.log(\"Player hand (reset!):\" + player_hand.join())\n        console.log(\"Bot hand (reset!):\" + bot_hand.join())\n\n        let wildcard_toggle: boolean = false\n        let main_working: boolean = true\n        \n        while (!(player[\"standing\"] && bot[\"standing\"])) {\n            //  HIT\n            input.onButtonPressed(Button.A, function on_button_pressed_a() {\n                if (main_working) {\n                    if (player_hand.length > 4) {\n                        message_screen(\"Hand full!\")\n                    } else {\n                        player_draw_card(deck)\n                        main_display()\n                    }\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n                }\n            })\n\n            //  STAND\n            input.onButtonPressed(Button.B, function on_button_pressed_b() {\n                if (main_working) {\n                    let new_wildcard: Dictionary;\n                    player[\"standing\"] = true\n\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n\n                    //  30% chance to get a wildcard on draw\n                    if (randint(0, 10) < 3) {\n                        // Limit 4 wildcards\n                        if (player_wildcard_deck.length < 4) {\n                            new_wildcard = wildcards._pickRandom()\n                            player_wildcard_deck.push(new_wildcard)\n                            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n                        }\n                    }\n                    \n                    //  Bot draws from deck until stand\n                    while (!bot[\"standing\"]) {\n                        bot_decision_draw(deck)\n                        main_display()\n                        basic.pause(500)\n                        music.play(music.tonePlayable(Note.G5, music.beat(BeatFraction.Eighth)), music.PlaybackMode.UntilDone)\n                    }\n                }\n            })\n\n            function wildcard_use(wildcard_name: string, player_user: boolean): void {\n                // Player is user -> player_user = true\n                // Bot is user -> player_user = false\n                let place = () => {\n                    placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n                }\n                let consume = () => {\n                    if (player_user) {\n                        for (let i = player_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (player_wildcard_deck[i] == wildcard_name) {\n                                player_wildcard_deck.splice(i, 1);\n                            }\n                        }\n                    } else {\n                        for (let i = bot_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (bot_wildcard_deck[i] == wildcard_name) {\n                                bot_wildcard_deck.splice(i, 1);\n                            }\n                        }\n                    }\n                    // Kick drum\n                    music.play(\n                        music.createSoundExpression(\n                        WaveShape.Square, \n                        200, 1, 255, 0, 100, \n                        SoundExpressionEffect.None, \n                        InterpolationCurve.Curve),\n                        music.PlaybackMode.UntilDone)\n                }\n\n                console.log(wildcard_name)\n\n                switch (wildcard_name) {\n                    case \"Sun\":\n                        // Set goal to 24.\n                        blackjack_goal = 24\n\n                        basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n\n                        place()\n                        consume()\n                        message_splash(\"Sun!\")\n                        message_splash(\"Go for\" + blackjack_goal, 2)\n                        break\n                    case \"Moon\":\n                        // Set goal to 17.\n                        blackjack_goal = 17\n\n                        basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #\n                        . # # # .\n                        `)\n                        place()\n                        consume()\n                        message_splash(\"Moon!\")\n                        message_splash(\"Go for \" + blackjack_goal, 2)\n                        break\n                    case \"Justice\":\n                        // Swap last drawn cards in hand\n                        let temp: number = bot[\"last_draw\"]\n                        bot[\"last_draw\"] = player[\"last_draw\"]\n                        player[\"last_draw\"] = temp\n\n                        bot_hand.pop()\n                        bot_hand.push(bot[\"last_draw\"])\n\n                        player_hand.pop()\n                        player_hand.push(player[\"last_draw\"])\n\n                        basic.showLeds(`\n                        . # . # .\n                        # # # # #\n                        . . # . .\n                        . . # . .\n                        . # # # .\n                        `)\n                        message_splash(\"Justice!\")\n                        message_splash(\"Swapped\" + bot[\"last_draw\"] +\" & \"+ player[\"last_draw\"], 2)\n                        place()\n                        consume()\n                        break\n                    case \"Strength\":\n                        // Both players get same random wildcard.\n                        // Insta-use.\n                        let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                        if (player_user) {\n                            player_wildcard_deck.push(new_wildcard)\n                        } else {\n                            bot_wildcard_deck.push(new_wildcard)\n                        }\n\n                        basic.showLeds(`\n                        . . . # .\n                        . . # # .\n                        . . # . .\n                        . # # . .\n                        . # . . .\n                        `)\n                        \n                        message_splash(\"Strength!\")\n                        message_splash(\" + \" + new_wildcard[\"name\"], 2)\n                        consume()\n\n                        break\n                    case \"The Devil\":\n                        // Increment bet by 1.\n                        bet++\n                        basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n\n                        message_splash(\"Devil!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        consume()\n\n                        break\n                    case \"The Star\":\n                        // Decrement bet by 1.\n                        bet--\n                        basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n                \n                        message_splash(\"Star!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        consume()\n\n                        break\n                    case \"The Fool\":\n                        // Copy last placed wildcard.\n                        // Cannot copy itself or nothing.\n                        // Insta-use (this card specifically)\n                        if (placed_wildcards.length == 0)  {\n                            message_screen(\"Nothing to copy!\")\n                            break\n                        }\n\n                        let latest_wildcard: string = placed_wildcards[-1][\"name\"]\n\n                        if (latest_wildcard == \"The Fool\") {\n                            // Disallow copying The Fool (prevents breaking the game)\n                            message_screen(\"Cannot copy!\")\n                            break\n                        } else {\n                            basic.showLeds(`\n                            . # . # .\n                            . . . . .\n                            . . # . .\n                            # . . . #\n                            . # # # .\n                            `)\n\n                            music.play(\n                                music.builtinPlayableSoundEffect(soundExpression.giggle),\n                                music.PlaybackMode.UntilDone)\n                            consume()\n                            wildcard_use(latest_wildcard, player_user)\n                        }\n                        \n                        break\n                    case \"The Magician\":\n                        // Return last drawn card to deck.\n                        // Insta-use.\n                        if (player_user) {\n                            deck.push(player_hand.pop())\n                            message_splash(\" -\" + player[\"last_draw\"], 2)\n                            player[\"last_draw\"] = player_hand[-1]\n                            \n                        } else {\n                            deck.push(bot_hand.pop())\n                            message_splash(\"Bot: -\" + player[\"last_draw\"], 2)\n                            bot[\"last_draw\"] = bot_hand[-1]\n                        }\n                        message_splash(\"Magician!\")\n                        consume()\n                        break\n                    default:\n                        console.log(\"Card not found!: \" + wildcard_name)\n                        message_splash(\"ERROR!\")\n                        message_splash(\"INV CARD\", 2)\n                        break\n                }\n\n            }\n\n            if (player[\"standing\"] && bot[\"standing\"]) {\n                break\n            }\n\n            // VIEW WILDCARDS\n            if (wildcard_toggle) {\n                // Wildcard display // waypoint:1\n                let value: any = wildcard_display()\n                \n                console.log(typeof value === \"string\")\n                \n                if (typeof value === \"string\") {\n\n                    console.log(\"Used \" + value)\n                    wildcard_use(value, true)\n\n                    \n                    console.log(\"Player hand:\" + player_hand.join())\n\n                }\n            }\n\n            input.onPinPressed(TouchPin.P2, function () {\n                wildcard_toggle = !wildcard_toggle\n                main_working = !main_working\n                console.log(\"Wildcard screen toggle: \"+ wildcard_toggle)\n            })\n\n            basic.pause(1000)\n\n            tube_module_show_points()\n\n        }\n\n        bet++\n        \n        who_won(bet)\n\n        console.log(\"Player hand:\" + player_hand.join())\n        console.log(\"Bot hand:\" + bot_hand.join())\n\n        display_sum_of_both_hands()\n\n        basic.pause(4000)\n\n        OLED12864_I2C.clear()\n    }\n\n\n    if (player[\"points\"] > bot[\"points\"]) {\n        // Player wins\n        OLED12864_I2C.showString(0, 0, \"YOU WIN!\", 1)\n        console.log(\"PLAYER WINS!\")\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.JumpUp), \n        music.PlaybackMode.InBackground)\n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n        music._playDefaultBackground(\n            music.builtInPlayableMelody(Melodies.Funeral), \n            music.PlaybackMode.InBackground)\n    }\n    OLED12864_I2C.showString(0, 3, \"Reset to play again.\", 1)\n    tube_module_show_points()\n    basic.pause(5000)\n\n    // END GAME\n    \n    basic.clearScreen()\n    \n    my_tm.off()\n    OLED12864_I2C.off()\n\n    return\n}\n\nfunction wildcard_display(): string | void {\n    OLED12864_I2C.clear()\n    \n    console.log(\"wildcard_display ran!\")\n\n    let i: number = 0\n\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n\n        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n            console.log(card_name)\n        }\n\n        OLED12864_I2C.showString(2, i, card_name, 1)\n        ++i\n    }\n\n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer--\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n\n        }\n    })\n\n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer down\")\n            if (typeof redraw_pointer === 'function') {\n                pointer++\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n        }\n    })\n\n    // Select wildcard\n    let selection: any;\n\n    \n    WaitUntilBlocks.waitUntilPinPressed(TouchPin.P1)\n    \n    if (wildcard_display_working) {\n        console.log(\"YEAHEAYEAYEAYEAYEHHAhwdyuefhresfeuifuie\")\n        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n        wildcard_display_working = false\n        return selected_card\n    }\n    \n        \n}\nfunction who_won(bet: number) {\n\n    function player_wins() {\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    }\n\n    function bot_wins() {\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n        music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n    }\n\n    // Calculate round winner\n\n    let total_player_hand: number = sum(player_hand)\n    let total_bot_hand: number = sum(bot_hand)\n\n    if (total_player_hand > blackjack_goal) {\n        if (total_bot_hand < blackjack_goal) {\n            // Player loses if player busts and bot does not.\n            console.log(\"You busted! Bot wins the round.\")\n            bot_wins()\n\n        } else if (total_player_hand < total_bot_hand) {\n            // Player wins if both busted, but player busts the least.\n            console.log(\"You win the round!\")\n            player_wins()\n\n        } else {\n            // Player loses if both busted, but bot busts the least.\n            console.log(\"Bot wins the round!\")\n            bot_wins()\n        }\n\n    } else if (total_player_hand > total_bot_hand) {\n        // Neither busts, player wins if player's hand is more than bot's.\n        console.log(\"You win the round!\")\n        player_wins()\n\n    } else if (total_bot_hand > blackjack_goal) {\n        // Player wins if bot busts and player does not.\n        console.log(\"Bot busted! You win the round.\")\n        player_wins()\n        \n    } else if (total_player_hand == total_bot_hand) {\n        // Tie game if both hands are equal.\n        console.log(\"It's a tie!\")\n        message_screen(\"Tie game!\")\n\n    } else {\n        // Player loses if neither busts, but bot's hand is more than player's.\n        console.log(\"Bot wins the round!\")\n        bot_wins()\n    }\n\n    console.log(\"Player points: \" + player[\"points\"])\n    console.log(\"Bot points: \" + bot[\"points\"])\n    \n    let show_bot_total = \"Bot had \" + total_bot_hand\n\n    OLED12864_I2C.showString(0, 3, show_bot_total, 1)\n}\n\nfunction display_sum_of_both_hands() {\n    console.log(\"Sum of player hand: \"+ sum(player_hand))\n    console.log(\"Sum of bot hand: \" + sum(bot_hand))\n}\n\n\nfunction tube_module_show_points() {\n    let player_points = Math.constrain(player[\"points\"], 0, INITIAL_POINTS * 2)\n    let bot_points = Math.constrain(bot[\"points\"], 0, INITIAL_POINTS * 2)\n\n    my_tm.showNumber(player_points * 100 + bot_points)\n}\n\nfunction message_splash(message: string, y_pos: number = 1) {\n    // Shows a message on the OLED during gameplay.\n    console.log(message)\n\n    control.inBackground(function() {\n        basic.pause(10)\n        OLED12864_I2C.showString(0, y_pos, message, 1)\n        basic.pause(2000)\n        OLED12864_I2C.showString(0, y_pos, message, 0)\n    })\n}\n\nfunction message_screen(message: string, y_pos: number = 1) {\n    // Shows seperate screen message on the OLED.\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.showString(0, y_pos, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n}\n\nfunction main_display() {\n\n    OLED12864_I2C.clear()\n\n    let card_to_display: string;\n    let index: number = 0\n\n    for (let card of player_hand) {\n        card_to_display  = \" \" + card\n        OLED12864_I2C.showString(index * 2.7, 3, card_to_display, 1)\n        index += 1\n    }\n\n    index = 0\n    \n    for (let bcard of bot_hand) {\n        card_to_display = \" \" + bcard\n        if (index) {\n            OLED12864_I2C.showString(index * 2, 0, card_to_display, 1) // INDEX MULTIPLIER MAYBE FIX!!!!!! -------------------\n        } else {\n            OLED12864_I2C.showString(index * 2, 0, \"?\", 1)\n        }\n        index += 1\n    }\n}\n\nfunction redraw_pointer(): void {\n    for (let i: number = 0; i >= 3; i++) {\n        if (i == pointer) {\n            OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n        } else {\n            OLED12864_I2C.showString(0, i, \" \", 0)\n        }\n    }\n}\n\n\nfunction main_menu() {\n    OLED12864_I2C.showString(0, 0, \"   ARCANA\", 1)\n    OLED12864_I2C.showString(0, 1, \"  BLACKJACK\", 1)\n    OLED12864_I2C.showString(0, 3, \"SHAKE to play\", 1)\n    OLED12864_I2C.invert(true)\n    \n    input.onGesture(Gesture.Shake, function() {\n        console.log(\"shaked!\")\n        OLED12864_I2C.invert(false)\n        play_blackjack()\n    })\n    \n}\n\n\n\nmain_menu()","README.md":"","main.py":"# Constants\nINITIAL_POINTS = 10\nINITIAL_BET = 1\n\ndeck: List[number] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nblackjack_goal = 21  # Reset every round\n\nbet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.set_built_in_speaker_enabled(False)\nmusic.set_volume(255)\n\nmy_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\n\ndef win_round():\n    music._play_default_background(music.built_in_playable_melody(Melodies.POWER_UP), music.PlaybackMode.IN_BACKGROUND)\n\ntoggle = 0\ndef change_toggle(toggle):\n    global toggle\n    if toggle == 0:\n        pins.digital_write_pin(DigitalPin.P1, 1)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 1\n    elif toggle == 1:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 1)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 2\n    elif toggle == 2:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 1)\n        toggle = 0\n    print(toggle)\n\n\ndef round(n):\n    n = n*1\n    integer_part = int(n)  # Get the integer part\n    decimal_part = n - integer_part  # Get the fractional part\n    \n    if decimal_part < 0.5:\n        return integer_part  # Round down\n    else:\n        return integer_part + 1  # Round up\n\ndef sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n  # Ensure all inputs are converted to floats before summing\n        \n    return total\n    \n\ndef len(lst):\n    count = 0\n    for _ in lst:\n        count += 1\n    return count\n\ndef set(lst):\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n    return unique_items\n\ndef custom_shuffle(lst: List[number]):\n    length = len(lst)\n    for i in range(length - 1, 0, -1):\n        j = randint(0, i)\n        temp  = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\nplayer = {\n    \"name\": \"Player\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nplayer_hand: List[number] = []\nplayer_wildcard_deck = [\"\"]\nplayer_placed_wildcards = []\n\nbot = {\n    \"name\": \"Bot\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nbot_hand: List[number] = []\nbot_wildcard_deck = [\"\"]\nbot_placed_wildcards = []\n\n\nwildcards = [\n    {\"name\": \"Justice\", \"description\": \"Swap last drawn card with bot.\"},\n    {\"name\": \"Moon\", \"description\": \"Change blackjack goal to 17.\"},\n    {\"name\": \"Sun\", \"description\": \"Change blackjack goal to 24.\"},\n    {\"name\": \"Death\", \"description\": \"Removes opponent's last wildcard.\"},\n    {\"name\": \"Strength\", \"description\": \"Both players get a random wildcard.\"},\n    {\"name\": \"The Devil\", \"description\": \"Increase bet by 1.\"},\n    {\"name\": \"The Star\", \"description\": \"Decrease bet by 1.\"},\n    {\"name\": \"The Fool\", \"description\": \"Copy opponent's last wildcard.\"},\n    {\"name\": \"The Magician\", \"description\": \"Return last drawn card to deck.\"},\n    {\"name\": \"Temperance\", \"description\": \"Average all hand cards.\"},\n    {\"name\": \"The Tower\", \"description\": \"Remove all 1s and 2s.\"},\n    {\"name\": \"The High Priestess\", \"description\": \"Cannot lose points this round.\"},\n    {\"name\": \"The Chariot\", \"description\": \"Reveal opponent's hidden card.\"},\n    {\"name\": \"The Lovers\", \"description\": \"Subtract 5 from hand.\"},\n]\n\ndef bot_decision_draw(deck: List[int]):\n    \"\"\"known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \"\"\"\n    #if bot_wildcard_deck and randint(0, 10) < 3:\n    #    pass\n    if sum(bot_hand) >= 15:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n    else:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n    \n    \"\"\"\n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \"\"\"\n\n\ndef player_draw_card(deck: List[int]):\n    if deck:\n        card: any = deck.pop()\n        player_hand.append(card)\n        player[\"last_draw\"]: number = card\n        print(f\"Player drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            player_wildcard_deck.append(new_wildcard)\n            print(f\"You received a wildcard:\" + new_wildcard)\n\n        if sum(player_hand) > blackjack_goal:\n            print(\"Busted!\")\n\n\n\ndef bot_draw_card(deck: List[int]):\n    if deck:\n        card: number = deck.pop()\n        bot_hand.append(card)\n        bot[\"last_draw\"] = card\n        print(f\"Bot drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            bot_wildcard_deck.append(new_wildcard)\n            print(\"Bot received a wildcard: \" + new_wildcard)\n\ndef reset_hands():\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n\n    player[\"standing\"] = False\n    bot[\"standing\"] = False\n\n    while len(player_hand) > 0:\n        player_hand.pop()\n\n    while len(bot_hand) > 0:\n        bot_hand.pop()\n\n    print(player_hand)\n    print(bot_hand)\n    print(\"Hands resetted!\")\n\ndef play_blackjack():\n    global blackjack_goal\n    bet = 1\n    in_playable_state = True\n    while in_playable_state:\n        print(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        while not (player[\"standing\"] and bot[\"standing\"]):\n            # HIT\n            def on_button_pressed_a():\n            \n                if len(player_hand) > 4:\n                    message_screen(\"Hand full!\")\n                else:\n                    player_draw_card(deck)\n\n            input.on_button_pressed(Button.A, on_button_pressed_a)\n                \n            # STAND\n            def on_button_pressed_b():\n                player[\"standing\"] = True\n\n                if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n                    new_wildcard: string = wildcards._pick_random()['name']\n                    print(f\"You received a wildcard:\" + new_wildcard)\n                \n                # Bot draws from deck until stand\n                while not bot[\"standing\"]:\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n\n            input.on_button_pressed(Button.B, on_button_pressed_b)\n            \n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n\n        bet += 1\n        who_won()\n        \n        print(player_hand)\n        print(bot_hand)\n        asdf()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n\n\n\nplay_blackjack()\n\ndef who_won():\n    if sum(player_hand) > blackjack_goal:\n        print(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n\n        message_screen(\"Bot wins!\")\n\n    elif sum(bot_hand) > blackjack_goal:\n        print(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n\n        message_screen(\"Player wins!\")\n    else:\n        if (sum(player_hand) > sum(bot_hand)):\n            print(\"You win the round!\")\n            player[\"points\"] += bet\n            bot[\"points\"] -= bet\n            win_round()\n\n            message_screen(\"Player wins!\")\n        elif sum(player_hand) == sum(bot_hand):\n            print(\"It's a tie!\")\n            message_screen(\"Tie game!\")\n        else:\n            print(\"Bot wins the round!\")\n            player[\"points\"] -= bet\n            bot[\"points\"] += bet\n\n            message_screen(\"Bot wins!\")\n\n    show_bot_total: str = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.show_string(0, 3, show_bot_total, 1)\n\ndef asdf():\n    print(sum(player_hand))\n    print(sum(bot_hand))\n\ndef tube_module_show_points():\n    my_tm.show_number(player[\"points\"] * 100 + bot[\"points\"])\n\ndef message_screen(message: str):\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.show_string(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n\n\ndef main_display():\n    index = 0\n    for card in player_hand:\n        card_to_display = \" \" + card\n        OLED12864_I2C.show_string(index*2.7, 3, card_to_display, 1)\n\n        index += 1\n    \n    index = 0\n    for bcard in bot_hand:\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.show_string(index*2.7, 0, card_to_display, 1)\n        index += 1\n\ndef wildcard_display():\n    i = 0\n    for card in player_wildcard_deck:\n        OLED12864_I2C.show_string(0, i, card['name'], 1)\n\n\ndef on_pin_pressed_p0():\n    pass\ninput.on_pin_pressed(TouchPin.P1, on_pin_pressed_p0)","pxt.json":"{\n    \"name\": \"g - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"TM1637\": \"github:makecode-extensions/tm1637#v1.0.0\",\n        \"Wait Until Custom Blocks\": \"github:teacherpinky/wait-until-blocks#v0.1.12\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1741384905438,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"// TODO: fix wildcard_display_working boolean not switching correctly\n// TODO: implement wildcard usage\n\n\n/* \n    THE ISSUE!: wildcard_display needs to switch back to main_display after using\n                a wildcard. after testing some toggle switching, sometimes the game\n                stalls after bot stands. another times, hitting/standing only works\n                on wildcard_display and not main_display as it should\n*/\n\n//  Constants\nconst INITIAL_POINTS: number = 15\nconst INITIAL_BET: number = 1\n\nlet blackjack_goal: number = 21\nlet previous_goals: number[] = [21]\nlet wildcard_display_working: boolean = true\nlet pointer: number = 0\n\nOLED12864_I2C.init(60)\nOLED12864_I2C.on()\n\nmusic.setBuiltInSpeakerEnabled(false)\nmusic.setVolume(255)\n\nlet my_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\nfunction win_round() {\n    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerUp), music.PlaybackMode.InBackground)\n}\n\ntype Dictionary = {\n    [key: string]: any;\n}\n\nlet toggle: number = 0\n\nfunction change_toggle(toggle: number) {\n    \n    if (toggle == 0) {\n        pins.digitalWritePin(DigitalPin.P1, 1)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 1\n    } else if (toggle == 1) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 1)\n        pins.digitalWritePin(DigitalPin.P3, 0)\n        toggle = 2\n    } else if (toggle == 2) {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n        pins.digitalWritePin(DigitalPin.P2, 0)\n        pins.digitalWritePin(DigitalPin.P3, 1)\n        toggle = 0\n    }\n    \n    console.log(toggle)\n}\n\nfunction sum(numbers: any[]): number {\n    let total = 0\n    for (let n of numbers) {\n        total += n\n    }\n    //  Ensure all inputs are converted to floats before summing\n    return total\n}\n\nfunction set(lst: any[]): any[] {\n    let unique_items = []\n    for (let item of lst) {\n        if (unique_items.indexOf(item) < 0) {\n            unique_items.push(item)\n        }\n        \n    }\n    return unique_items\n}\n\nfunction custom_shuffle(lst: number[]) {\n    let j: number;\n    let temp: number;\n    let length = lst.length\n    for (let i = length - 1; i > 0; i += -1) {\n        j = randint(0, i)\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    }\n}\n\nlet player = {\n    \"name\" : \"Player\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet player_hand : number[] = []\nlet player_wildcard_deck: Dictionary[] = []\n\nlet bot = {\n    \"name\" : \"Bot\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet bot_hand : number[] = []\nlet bot_wildcard_deck: Dictionary[] = []\n\nlet placed_wildcards: Dictionary[] = []\n\n\nlet wildcards: Dictionary[] = [ {\n    \"name\" : \"Justice\",\n    \"description\" : \"Swap last drawn card with bot.\",\n}\n, {\n    \"name\" : \"Moon\",\n    \"description\" : \"Change blackjack goal to 17.\",\n}\n, {\n    \"name\" : \"Sun\",\n    \"description\" : \"Change blackjack goal to 24.\",\n}\n, {\n    \"name\" : \"Death\",\n    \"description\" : \"Removes opponent's last placed wildcard.\",\n}\n, {\n    \"name\" : \"Strength\",\n    \"description\" : \"Both players get a random wildcard.\",\n}\n, {\n    \"name\" : \"The Devil\",\n    \"description\" : \"Increase bet by 1.\",\n}\n, {\n    \"name\" : \"The Star\",\n    \"description\" : \"Decrease bet by 1.\",\n}\n, {\n    \"name\" : \"The Fool\",\n    \"description\" : \"Copy last placed wildcard for immediate use.\",\n}\n, {\n    \"name\" : \"The Magician\",\n    \"description\" : \"Return last drawn card to deck.\",\n}\n, {\n    \"name\" : \"Temperance\",\n    \"description\" : \"Average all hand cards.\",\n}\n, {\n    \"name\" : \"The Tower\",\n    \"description\" : \"Decrease value of all cards by 2.\",\n}\n, {\n    \"name\" : \"The High Priestess\",\n    \"description\" : \"Cannot lose points this round.\",\n}\n, {\n    \"name\" : \"The Chariot\",\n    \"description\" : \"Reveal opponent's hidden card.\",\n}\n, {\n    \"name\" : \"The Lovers\",\n    \"description\" : \"Subtract 5 from hand.\",\n}\n]\nfunction bot_decision_draw(deck: number[]) {\n\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n}\n\nfunction player_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        player_hand.push(card)\n        player[\"last_draw\"] = card\n        console.log(\"Player drew a card: \" + card)\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            player_wildcard_deck.push(new_wildcard)\n            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n        }\n        \n        if (sum(player_hand) > blackjack_goal) {\n            console.log(\"Busted!\")\n        }\n        \n    }\n    \n}\n\nfunction bot_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        bot_hand.push(card)\n        bot[\"last_draw\"] = card\n        console.log(\"Bot drew a card\")\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            bot_wildcard_deck.push(new_wildcard)\n            console.log(\"Bot received a wildcard: \" + new_wildcard[\"name\"])\n        }\n        \n    }\n    \n}\n\nfunction reset_hands() {\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n    \n    player[\"standing\"] = false\n    bot[\"standing\"] = false\n\n    player_hand.splice(0, player_hand.length)\n    bot_hand.splice(0, bot_hand.length)\n}\n\nfunction play_blackjack() {\n\n    let deck: number[];\n    \n    let bet: number = INITIAL_BET\n\n    OLED12864_I2C.clear()\n\n    while (player[\"points\"] > 0 && bot[\"points\"] > 0) {\n\n        console.log(\"Bet: \" + bet)\n\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        custom_shuffle(deck)\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n\n        console.log(\"Player hand (reset!):\" + player_hand.join())\n        console.log(\"Bot hand (reset!):\" + bot_hand.join())\n\n        let wildcard_toggle: boolean = false\n        let main_working: boolean = true\n        \n        while (!(player[\"standing\"] && bot[\"standing\"])) {\n            //  HIT\n            input.onButtonPressed(Button.A, function on_button_pressed_a() {\n                if (main_working) {\n                    if (player_hand.length > 4) {\n                        message_screen(\"Hand full!\")\n                    } else {\n                        player_draw_card(deck)\n                        main_display()\n                    }\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n                }\n            })\n\n            //  STAND\n            input.onButtonPressed(Button.B, function on_button_pressed_b() {\n                if (main_working) {\n                    let new_wildcard: Dictionary;\n                    player[\"standing\"] = true\n\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n\n                    //  30% chance to get a wildcard on draw\n                    if (randint(0, 10) < 3) {\n                        // Limit 4 wildcards\n                        if (player_wildcard_deck.length < 4) {\n                            new_wildcard = wildcards._pickRandom()\n                            player_wildcard_deck.push(new_wildcard)\n                            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n                        }\n                    }\n                    \n                    //  Bot draws from deck until stand\n                    while (!bot[\"standing\"]) {\n                        bot_decision_draw(deck)\n                        main_display()\n                        basic.pause(500)\n                        music.play(music.tonePlayable(Note.G5, music.beat(BeatFraction.Eighth)), music.PlaybackMode.UntilDone)\n                    }\n                }\n            })\n\n            function wildcard_use(wildcard_name: string, player_user: boolean): void {\n                // Player is user -> player_user = true\n                // Bot is user -> player_user = false\n                let place = () => {\n                    placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n                }\n                let consume = () => {\n                    if (player_user) {\n                        for (let i = player_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (player_wildcard_deck[i] == wildcard_name) {\n                                player_wildcard_deck.splice(i, 1);\n                            }\n                        }\n                    } else {\n                        for (let i = bot_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (bot_wildcard_deck[i] == wildcard_name) {\n                                bot_wildcard_deck.splice(i, 1);\n                            }\n                        }\n                    }\n                    // Kick drum\n                    music.play(\n                        music.createSoundExpression(\n                        WaveShape.Square, \n                        200, 1, 255, 0, 100, \n                        SoundExpressionEffect.None, \n                        InterpolationCurve.Curve),\n                        music.PlaybackMode.UntilDone)\n                }\n\n                console.log(wildcard_name)\n\n                switch (wildcard_name) {\n                    case \"Sun\":\n                        // Set goal to 24.\n                        previous_goals.push(blackjack_goal)\n                        blackjack_goal = 24\n\n                        basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n\n                        place()\n                        consume()\n                        \n                        message_splash(\"Sun!\")\n                        message_splash(\"Go for\" + blackjack_goal, 2)\n                        break\n                    case \"Moon\":\n                        // Set goal to 17.\n                        previous_goals.push(blackjack_goal)\n                        blackjack_goal = 17\n\n                        basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #\n                        . # # # .\n                        `)\n                        place()\n                        consume()\n                        message_splash(\"Moon!\")\n                        message_splash(\"Go for \" + blackjack_goal, 2)\n                        break\n                    case \"Justice\":\n                        // Swap last drawn cards in hand\n                        let temp: number = bot[\"last_draw\"]\n                        bot[\"last_draw\"] = player[\"last_draw\"]\n                        player[\"last_draw\"] = temp\n\n                        bot_hand.pop()\n                        bot_hand.push(bot[\"last_draw\"])\n\n                        player_hand.pop()\n                        player_hand.push(player[\"last_draw\"])\n\n                        basic.showLeds(`\n                        . # . # .\n                        # # # # #\n                        . . # . .\n                        . . # . .\n                        . # # # .\n                        `)\n                        message_splash(\"Justice!\")\n                        message_splash(\"Swapped\" + bot[\"last_draw\"] +\" & \"+ player[\"last_draw\"], 2)\n                        place()\n                        consume()\n                        break\n                    case \"Strength\":\n                        // Both players get same random wildcard.\n                        // Insta-use.\n                        let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                        if (player_user) {\n                            player_wildcard_deck.push(new_wildcard)\n                        } else {\n                            bot_wildcard_deck.push(new_wildcard)\n                        }\n\n                        basic.showLeds(`\n                        . . . # .\n                        . . # # .\n                        . . # . .\n                        . # # . .\n                        . # . . .\n                        `)\n                        \n                        message_splash(\"Strength!\")\n                        message_splash(\" + \" + new_wildcard[\"name\"], 2)\n                        consume()\n\n                        break\n                    case \"The Devil\":\n                        // Increment bet by 1.\n                        bet++\n                        basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n\n                        message_splash(\"Devil!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        consume()\n\n                        break\n                    case \"The Star\":\n                        // Decrement bet by 1.\n                        bet--\n                        basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n                \n                        message_splash(\"Star!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        consume()\n\n                        break\n                    case \"The Fool\":\n                        // Copy last placed wildcard.\n                        // Cannot copy itself or nothing.\n                        // Insta-use (this card specifically)\n                        if (placed_wildcards.length == 0)  {\n                            message_screen(\"Nothing to copy!\")\n                            break\n                        }\n\n                        let latest_wildcard: string = placed_wildcards[-1][\"name\"]\n\n                        if (latest_wildcard == \"The Fool\") {\n                            // Disallow copying The Fool (prevents breaking the game)\n                            message_screen(\"Cannot copy!\")\n                            break\n                        } else {\n                            basic.showLeds(`\n                            . # . # .\n                            . . . . .\n                            . . # . .\n                            # . . . #\n                            . # # # .\n                            `)\n\n                            music.play(\n                                music.builtinPlayableSoundEffect(soundExpression.giggle),\n                                music.PlaybackMode.UntilDone)\n                            consume()\n                            wildcard_use(latest_wildcard, player_user)\n                        }\n                        \n                        break\n                    case \"The Magician\":\n                        // Return last drawn card to deck.\n                        // Insta-use.\n                        if (player_user) {\n                            deck.push(player_hand.pop())\n                            message_splash(\" -\" + player[\"last_draw\"], 2)\n                            player[\"last_draw\"] = player_hand[-1]\n                            \n                        } else {\n                            deck.push(bot_hand.pop())\n                            message_splash(\"Bot: -\" + player[\"last_draw\"], 2)\n                            bot[\"last_draw\"] = bot_hand[-1]\n                        }\n                        message_splash(\"Magician!\")\n                        consume()\n                        break\n                    case \"Death\":\n                        // Removes opponent's last placed wildcard.\n                        bet = death_wildcard(bet)\n                        message_splash(\"Death.\")\n                        consume()\n                        break\n                    default:\n                        console.log(\"Card not found!: \" + wildcard_name)\n                        message_splash(\"ERROR!\")\n                        message_splash(\"INV CARD\", 2)\n                        break\n                }\n\n            }\n\n            if (player[\"standing\"] && bot[\"standing\"]) {\n                break\n            }\n\n            // VIEW WILDCARDS\n            if (wildcard_toggle) {\n                // Wildcard display // waypoint:1\n                let value: any = wildcard_display()\n                \n                console.log(typeof value === \"string\")\n                \n                if (typeof value === \"string\") {\n\n                    console.log(\"Used \" + value)\n                    wildcard_use(value, true)\n\n                    \n                    console.log(\"Player hand:\" + player_hand.join())\n\n                }\n            }\n\n            input.onPinPressed(TouchPin.P2, function () {\n                wildcard_toggle = !wildcard_toggle\n                main_working = !main_working\n                console.log(\"Wildcard screen toggle: \"+ wildcard_toggle)\n            })\n\n            basic.pause(1000)\n\n            tube_module_show_points()\n\n        }\n\n        bet++\n        \n        who_won(bet)\n\n        console.log(\"Player hand:\" + player_hand.join())\n        console.log(\"Bot hand:\" + bot_hand.join())\n\n        display_sum_of_both_hands()\n\n        basic.pause(4000)\n\n        OLED12864_I2C.clear()\n    }\n\n\n    if (player[\"points\"] > bot[\"points\"]) {\n        // Player wins\n        OLED12864_I2C.showString(0, 0, \"YOU WIN!\", 1)\n        console.log(\"PLAYER WINS!\")\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.JumpUp), \n        music.PlaybackMode.InBackground)\n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n        music._playDefaultBackground(\n            music.builtInPlayableMelody(Melodies.Funeral), \n            music.PlaybackMode.InBackground)\n    }\n    OLED12864_I2C.showString(0, 3, \"Reset to play again.\", 1)\n    tube_module_show_points()\n    basic.pause(5000)\n\n    // END GAME\n    \n    basic.clearScreen()\n    \n    my_tm.off()\n    OLED12864_I2C.off()\n\n    return\n}\n\nfunction death_wildcard(bet: number): number {\n    // Removes opponent's last placed wildcard.\n    // Undoes effect of removed wildcard\n\n    let wildcard_to_remove: Dictionary = placed_wildcards[-1]\n    let previous_wildcard: Dictionary = placed_wildcards[-2]\n    \n    switch(wildcard_to_remove) {\n        case \"The Devil\":\n            // UNDO Increment bet by 1.\n            bet--\n            basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n            message_splash(\"Bet: \" + bet, 2)\n\n            break\n        case \"The Star\":\n            // UNDO Decrement bet by 1.\n            bet++\n            basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n            message_splash(\"Bet: \" + bet, 2)\n\n            break\n        case \"Sun\":\n            // UNDO Set goal to 24.\n            blackjack_goal = previous_goals.pop()\n\n            basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n\n            message_splash(\"Go for\" + blackjack_goal, 2)\n            break\n        case \"Moon\":\n            // UNDO Set goal to 17.\n            blackjack_goal = previous_goals.pop()\n\n            basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #\n                        . # # # .\n                        `)\n\n            message_splash(\"Go for \" + blackjack_goal, 2)\n            break\n        \n    }\n\n    return bet\n\n}\n\nfunction wildcard_display(): string | void {\n    OLED12864_I2C.clear()\n    \n    console.log(\"wildcard_display ran!\")\n\n    let i: number = 0\n\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n\n        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n            console.log(card_name)\n        }\n\n        OLED12864_I2C.showString(2, i, card_name, 1)\n        ++i\n    }\n\n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer--\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n\n        }\n    })\n\n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer down\")\n            if (typeof redraw_pointer === 'function') {\n                pointer++\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n        }\n    })\n\n    // Select wildcard\n    let selection: any;\n\n    \n    WaitUntilBlocks.waitUntilPinPressed(TouchPin.P1)\n    \n    if (wildcard_display_working) {\n        console.log(\"YEAHEAYEAYEAYEAYEHHAhwdyuefhresfeuifuie\")\n        let selected_card: string = player_wildcard_deck[pointer][\"name\"]\n        wildcard_display_working = false\n        return selected_card\n    }\n    \n        \n}\nfunction who_won(bet: number) {\n\n    function player_wins() {\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    }\n\n    function bot_wins() {\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n        music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n    }\n\n    // Calculate round winner\n\n    let total_player_hand: number = sum(player_hand)\n    let total_bot_hand: number = sum(bot_hand)\n\n    if (total_player_hand > blackjack_goal) {\n        if (total_bot_hand < blackjack_goal) {\n            // Player loses if player busts and bot does not.\n            console.log(\"You busted! Bot wins the round.\")\n            bot_wins()\n\n        } else if (total_player_hand < total_bot_hand) {\n            // Player wins if both busted, but player busts the least.\n            console.log(\"You win the round!\")\n            player_wins()\n\n        } else {\n            // Player loses if both busted, but bot busts the least.\n            console.log(\"Bot wins the round!\")\n            bot_wins()\n        }\n\n    } else if (total_player_hand > total_bot_hand) {\n        // Neither busts, player wins if player's hand is more than bot's.\n        console.log(\"You win the round!\")\n        player_wins()\n\n    } else if (total_bot_hand > blackjack_goal) {\n        // Player wins if bot busts and player does not.\n        console.log(\"Bot busted! You win the round.\")\n        player_wins()\n        \n    } else if (total_player_hand == total_bot_hand) {\n        // Tie game if both hands are equal.\n        console.log(\"It's a tie!\")\n        message_screen(\"Tie game!\")\n\n    } else {\n        // Player loses if neither busts, but bot's hand is more than player's.\n        console.log(\"Bot wins the round!\")\n        bot_wins()\n    }\n\n    console.log(\"Player points: \" + player[\"points\"])\n    console.log(\"Bot points: \" + bot[\"points\"])\n    \n    let show_bot_total = \"Bot had \" + total_bot_hand\n\n    OLED12864_I2C.showString(0, 3, show_bot_total, 1)\n}\n\nfunction display_sum_of_both_hands() {\n    console.log(\"Sum of player hand: \"+ sum(player_hand))\n    console.log(\"Sum of bot hand: \" + sum(bot_hand))\n}\n\n\nfunction tube_module_show_points() {\n    let player_points = Math.constrain(player[\"points\"], 0, INITIAL_POINTS * 2)\n    let bot_points = Math.constrain(bot[\"points\"], 0, INITIAL_POINTS * 2)\n\n    my_tm.showNumber(player_points * 100 + bot_points)\n}\n\nfunction message_splash(message: string, y_pos: number = 1) {\n    // Shows a message on the OLED during gameplay.\n    console.log(message)\n\n    control.inBackground(function() {\n        basic.pause(10)\n        OLED12864_I2C.showString(0, y_pos, message, 1)\n        basic.pause(2000)\n        OLED12864_I2C.showString(0, y_pos, message, 0)\n    })\n}\n\nfunction message_screen(message: string, y_pos: number = 1) {\n    // Shows seperate screen message on the OLED.\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.showString(0, y_pos, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n}\n\nfunction main_display() {\n\n    OLED12864_I2C.clear()\n\n    let card_to_display: string;\n    let index: number = 0\n\n    for (let card of player_hand) {\n        card_to_display  = \" \" + card\n        OLED12864_I2C.showString(index * 2.7, 3, card_to_display, 1)\n        index += 1\n    }\n\n    index = 0\n    \n    for (let bcard of bot_hand) {\n        card_to_display = \" \" + bcard\n        if (index) {\n            OLED12864_I2C.showString(index * 2, 0, card_to_display, 1) // INDEX MULTIPLIER MAYBE FIX!!!!!! -------------------\n        } else {\n            OLED12864_I2C.showString(index * 2, 0, \"?\", 1)\n        }\n        index += 1\n    }\n}\n\nfunction redraw_pointer(): void {\n    for (let i: number = 0; i >= 3; i++) {\n        if (i == pointer) {\n            OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n        } else {\n            OLED12864_I2C.showString(0, i, \" \", 0)\n        }\n    }\n}\n\n\nfunction main_menu() {\n    OLED12864_I2C.showString(0, 0, \"   ARCANA\", 1)\n    OLED12864_I2C.showString(0, 1, \"  BLACKJACK\", 1)\n    OLED12864_I2C.showString(0, 3, \"SHAKE to play\", 1)\n    OLED12864_I2C.invert(true)\n    \n    input.onGesture(Gesture.Shake, function() {\n        console.log(\"shaked!\")\n        OLED12864_I2C.invert(false)\n        play_blackjack()\n    })\n    \n}\n\n\n\nmain_menu()","README.md":"","main.py":"# Constants\nINITIAL_POINTS = 10\nINITIAL_BET = 1\n\ndeck: List[number] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nblackjack_goal = 21  # Reset every round\n\nbet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.set_built_in_speaker_enabled(False)\nmusic.set_volume(255)\n\nmy_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\n\ndef win_round():\n    music._play_default_background(music.built_in_playable_melody(Melodies.POWER_UP), music.PlaybackMode.IN_BACKGROUND)\n\ntoggle = 0\ndef change_toggle(toggle):\n    global toggle\n    if toggle == 0:\n        pins.digital_write_pin(DigitalPin.P1, 1)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 1\n    elif toggle == 1:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 1)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 2\n    elif toggle == 2:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 1)\n        toggle = 0\n    print(toggle)\n\n\ndef round(n):\n    n = n*1\n    integer_part = int(n)  # Get the integer part\n    decimal_part = n - integer_part  # Get the fractional part\n    \n    if decimal_part < 0.5:\n        return integer_part  # Round down\n    else:\n        return integer_part + 1  # Round up\n\ndef sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n  # Ensure all inputs are converted to floats before summing\n        \n    return total\n    \n\ndef len(lst):\n    count = 0\n    for _ in lst:\n        count += 1\n    return count\n\ndef set(lst):\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n    return unique_items\n\ndef custom_shuffle(lst: List[number]):\n    length = len(lst)\n    for i in range(length - 1, 0, -1):\n        j = randint(0, i)\n        temp  = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\nplayer = {\n    \"name\": \"Player\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nplayer_hand: List[number] = []\nplayer_wildcard_deck = [\"\"]\nplayer_placed_wildcards = []\n\nbot = {\n    \"name\": \"Bot\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nbot_hand: List[number] = []\nbot_wildcard_deck = [\"\"]\nbot_placed_wildcards = []\n\n\nwildcards = [\n    {\"name\": \"Justice\", \"description\": \"Swap last drawn card with bot.\"},\n    {\"name\": \"Moon\", \"description\": \"Change blackjack goal to 17.\"},\n    {\"name\": \"Sun\", \"description\": \"Change blackjack goal to 24.\"},\n    {\"name\": \"Death\", \"description\": \"Removes opponent's last wildcard.\"},\n    {\"name\": \"Strength\", \"description\": \"Both players get a random wildcard.\"},\n    {\"name\": \"The Devil\", \"description\": \"Increase bet by 1.\"},\n    {\"name\": \"The Star\", \"description\": \"Decrease bet by 1.\"},\n    {\"name\": \"The Fool\", \"description\": \"Copy opponent's last wildcard.\"},\n    {\"name\": \"The Magician\", \"description\": \"Return last drawn card to deck.\"},\n    {\"name\": \"Temperance\", \"description\": \"Average all hand cards.\"},\n    {\"name\": \"The Tower\", \"description\": \"Remove all 1s and 2s.\"},\n    {\"name\": \"The High Priestess\", \"description\": \"Cannot lose points this round.\"},\n    {\"name\": \"The Chariot\", \"description\": \"Reveal opponent's hidden card.\"},\n    {\"name\": \"The Lovers\", \"description\": \"Subtract 5 from hand.\"},\n]\n\ndef bot_decision_draw(deck: List[int]):\n    \"\"\"known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \"\"\"\n    #if bot_wildcard_deck and randint(0, 10) < 3:\n    #    pass\n    if sum(bot_hand) >= 15:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n    else:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n    \n    \"\"\"\n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \"\"\"\n\n\ndef player_draw_card(deck: List[int]):\n    if deck:\n        card: any = deck.pop()\n        player_hand.append(card)\n        player[\"last_draw\"]: number = card\n        print(f\"Player drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            player_wildcard_deck.append(new_wildcard)\n            print(f\"You received a wildcard:\" + new_wildcard)\n\n        if sum(player_hand) > blackjack_goal:\n            print(\"Busted!\")\n\n\n\ndef bot_draw_card(deck: List[int]):\n    if deck:\n        card: number = deck.pop()\n        bot_hand.append(card)\n        bot[\"last_draw\"] = card\n        print(f\"Bot drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            bot_wildcard_deck.append(new_wildcard)\n            print(\"Bot received a wildcard: \" + new_wildcard)\n\ndef reset_hands():\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n\n    player[\"standing\"] = False\n    bot[\"standing\"] = False\n\n    while len(player_hand) > 0:\n        player_hand.pop()\n\n    while len(bot_hand) > 0:\n        bot_hand.pop()\n\n    print(player_hand)\n    print(bot_hand)\n    print(\"Hands resetted!\")\n\ndef play_blackjack():\n    global blackjack_goal\n    bet = 1\n    in_playable_state = True\n    while in_playable_state:\n        print(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        while not (player[\"standing\"] and bot[\"standing\"]):\n            # HIT\n            def on_button_pressed_a():\n            \n                if len(player_hand) > 4:\n                    message_screen(\"Hand full!\")\n                else:\n                    player_draw_card(deck)\n\n            input.on_button_pressed(Button.A, on_button_pressed_a)\n                \n            # STAND\n            def on_button_pressed_b():\n                player[\"standing\"] = True\n\n                if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n                    new_wildcard: string = wildcards._pick_random()['name']\n                    print(f\"You received a wildcard:\" + new_wildcard)\n                \n                # Bot draws from deck until stand\n                while not bot[\"standing\"]:\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n\n            input.on_button_pressed(Button.B, on_button_pressed_b)\n            \n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n\n        bet += 1\n        who_won()\n        \n        print(player_hand)\n        print(bot_hand)\n        asdf()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n\n\n\nplay_blackjack()\n\ndef who_won():\n    if sum(player_hand) > blackjack_goal:\n        print(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n\n        message_screen(\"Bot wins!\")\n\n    elif sum(bot_hand) > blackjack_goal:\n        print(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n\n        message_screen(\"Player wins!\")\n    else:\n        if (sum(player_hand) > sum(bot_hand)):\n            print(\"You win the round!\")\n            player[\"points\"] += bet\n            bot[\"points\"] -= bet\n            win_round()\n\n            message_screen(\"Player wins!\")\n        elif sum(player_hand) == sum(bot_hand):\n            print(\"It's a tie!\")\n            message_screen(\"Tie game!\")\n        else:\n            print(\"Bot wins the round!\")\n            player[\"points\"] -= bet\n            bot[\"points\"] += bet\n\n            message_screen(\"Bot wins!\")\n\n    show_bot_total: str = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.show_string(0, 3, show_bot_total, 1)\n\ndef asdf():\n    print(sum(player_hand))\n    print(sum(bot_hand))\n\ndef tube_module_show_points():\n    my_tm.show_number(player[\"points\"] * 100 + bot[\"points\"])\n\ndef message_screen(message: str):\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.show_string(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n\n\ndef main_display():\n    index = 0\n    for card in player_hand:\n        card_to_display = \" \" + card\n        OLED12864_I2C.show_string(index*2.7, 3, card_to_display, 1)\n\n        index += 1\n    \n    index = 0\n    for bcard in bot_hand:\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.show_string(index*2.7, 0, card_to_display, 1)\n        index += 1\n\ndef wildcard_display():\n    i = 0\n    for card in player_wildcard_deck:\n        OLED12864_I2C.show_string(0, i, card['name'], 1)\n\n\ndef on_pin_pressed_p0():\n    pass\ninput.on_pin_pressed(TouchPin.P1, on_pin_pressed_p0)","pxt.json":"{\n    \"name\": \"g - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"TM1637\": \"github:makecode-extensions/tm1637#v1.0.0\",\n        \"Wait Until Custom Blocks\": \"github:teacherpinky/wait-until-blocks#v0.1.12\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1741386708262,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"// TODO: fix wildcard_display_working boolean not switching correctly\n// TODO: implement wildcard usage\n\n\n/* \n    THE ISSUE!: wildcard_display needs to switch back to main_display after using\n                a wildcard. after testing some toggle switching, sometimes the game\n                stalls after bot stands. another times, hitting/standing only works\n                on wildcard_display and not main_display as it should\n*/\n\n\n\n//  Constants\nconst INITIAL_POINTS: number = 15\nconst INITIAL_BET: number = 1\n\nlet blackjack_goal: number = 21\nlet previous_goals: number[] = [21]\nlet wildcard_display_working: boolean = true\nlet pointer: number = 0\n\nOLED12864_I2C.init(60)\nOLED12864_I2C.on()\n\nmusic.setBuiltInSpeakerEnabled(false)\nmusic.setVolume(255)\n\nlet my_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\nfunction win_round() {\n    music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerUp), music.PlaybackMode.InBackground)\n}\n\ntype Dictionary = {\n    [key: string]: any;\n}\n\nfunction sum(numbers: any[]): number {\n    let total = 0\n    for (let n of numbers) {\n        total += n\n    }\n    //  Ensure all inputs are converted to floats before summing\n    return total\n}\n\nfunction set(lst: any[]): any[] {\n    let unique_items = []\n    for (let item of lst) {\n        if (unique_items.indexOf(item) < 0) {\n            unique_items.push(item)\n        }\n        \n    }\n    return unique_items\n}\n\nfunction custom_shuffle(lst: number[]) {\n    let j: number;\n    let temp: number;\n    let length = lst.length\n    for (let i = length - 1; i > 0; i += -1) {\n        j = randint(0, i)\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    }\n}\n\nlet player = {\n    \"name\" : \"Player\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet player_hand : number[] = []\nlet player_wildcard_deck: Dictionary[] = []\n\nlet bot = {\n    \"name\" : \"Bot\",\n    \"points\" : INITIAL_POINTS,\n    \"last_draw\" : 0,\n    \"standing\" : false,\n    \"invulnerable\" : false,\n}\n\nlet bot_hand : number[] = []\nlet bot_wildcard_deck: Dictionary[] = []\n\nlet placed_wildcards: Dictionary[] = []\n\n\nlet wildcards: Dictionary[] = [ {\n    \"name\" : \"Justice\",\n    \"description\" : \"Swap last drawn card with bot.\",\n}\n, {\n    \"name\" : \"Moon\",\n    \"description\" : \"Change blackjack goal to 17.\",\n}\n, {\n    \"name\" : \"Sun\",\n    \"description\" : \"Change blackjack goal to 24.\",\n}\n, {\n    \"name\" : \"Death\",\n    \"description\" : \"Removes opponent's last placed wildcard.\",\n}\n, {\n    \"name\" : \"Strength\",\n    \"description\" : \"Both players get a random wildcard.\",\n}\n, {\n    \"name\" : \"The Devil\",\n    \"description\" : \"Increase bet by 1.\",\n}\n, {\n    \"name\" : \"The Star\",\n    \"description\" : \"Decrease bet by 1.\",\n}\n, {\n    \"name\" : \"The Fool\",\n    \"description\" : \"Copy last placed wildcard for immediate use.\",\n}\n, {\n    \"name\" : \"The Magician\",\n    \"description\" : \"Return last drawn card to deck.\",\n}\n, {\n    \"name\" : \"Temperance\",\n    \"description\" : \"Average all hand cards.\",\n}\n, {\n    \"name\" : \"The Tower\",\n    \"description\" : \"Decrease value of all cards by 2.\",\n}\n, {\n    \"name\" : \"The High Priestess\",\n    \"description\" : \"Cannot lose points this round.\",\n}\n, {\n    \"name\" : \"The Chariot\",\n    \"description\" : \"Reveal opponent's hidden card.\",\n}\n, {\n    \"name\" : \"The Lovers\",\n    \"description\" : \"Subtract 5 from hand.\",\n}\n]\nfunction bot_decision_draw(deck: number[]) {\n\n    if (sum(bot_hand) >= 15) {\n        bot[\"standing\"] = true\n        console.log(\"Bot stands.\")\n    } else {\n        bot_draw_card(deck)\n        console.log(\"Bot hits.\")\n    }\n    \n}\n\nfunction player_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        player_hand.push(card)\n        player[\"last_draw\"] = card\n        console.log(\"Player drew a card: \" + card)\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            player_wildcard_deck.push(new_wildcard)\n            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n        }\n        \n        if (sum(player_hand) > blackjack_goal) {\n            console.log(\"Busted!\")\n        }\n        \n    }\n    \n}\n\nfunction bot_draw_card(deck: number[]) {\n    let card: number;\n    let new_wildcard: Dictionary;\n    if (deck) {\n        card = _py.py_array_pop(deck)\n        bot_hand.push(card)\n        bot[\"last_draw\"] = card\n        console.log(\"Bot drew a card\")\n        if (randint(0, 10) < 3) {\n            //  30% chance to get a wildcard on draw\n            new_wildcard = wildcards._pickRandom()\n            bot_wildcard_deck.push(new_wildcard)\n            console.log(\"Bot received a wildcard: \" + new_wildcard[\"name\"])\n        }\n        \n    }\n    \n}\n\nfunction reset_hands() {\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n    \n    player[\"standing\"] = false\n    bot[\"standing\"] = false\n\n    player_hand.splice(0, player_hand.length)\n    bot_hand.splice(0, bot_hand.length)\n}\n\nfunction play_blackjack() {\n\n    let deck: number[];\n    \n    let bet: number = INITIAL_BET\n\n    OLED12864_I2C.clear()\n\n    while (player[\"points\"] > 0 && bot[\"points\"] > 0) {\n\n        console.log(\"Bet: \" + bet)\n\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        custom_shuffle(deck)\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n\n        console.log(\"Player hand (reset!):\" + player_hand.join())\n        console.log(\"Bot hand (reset!):\" + bot_hand.join())\n\n        let wildcard_toggle: boolean = false\n        let main_working: boolean = true\n        \n        while (!(player[\"standing\"] && bot[\"standing\"])) {\n            //  HIT\n            input.onButtonPressed(Button.A, function on_button_pressed_a() {\n                if (main_working) {\n                    if (player_hand.length > 4) {\n                        message_screen(\"Hand full!\")\n                    } else {\n                        player_draw_card(deck)\n                        main_display()\n                    }\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n                }\n            })\n\n            //  STAND\n            input.onButtonPressed(Button.B, function on_button_pressed_b() {\n                if (main_working) {\n                    let new_wildcard: Dictionary;\n                    player[\"standing\"] = true\n\n                    music.play(music.tonePlayable(Note.C5, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)\n\n                    //  30% chance to get a wildcard on draw\n                    if (randint(0, 10) < 3) {\n                        // Limit 4 wildcards\n                        if (player_wildcard_deck.length < 4) {\n                            new_wildcard = wildcards._pickRandom()\n                            player_wildcard_deck.push(new_wildcard)\n                            console.log(\"You received a wildcard:\" + new_wildcard[\"name\"])\n                        }\n                    }\n                    \n                    //  Bot draws from deck until stand\n                    while (!bot[\"standing\"]) {\n                        bot_decision_draw(deck)\n                        main_display()\n                        basic.pause(500)\n                        music.play(music.tonePlayable(Note.G5, music.beat(BeatFraction.Eighth)), music.PlaybackMode.UntilDone)\n                    }\n                }\n            })\n\n            function wildcard_use(wildcard_name: string, player_user: boolean): void {\n                // Player is user -> player_user = true\n                // Bot is user -> player_user = false\n                let place = () => {\n                    placed_wildcards.push({ \"name\": wildcard_name, \"player_user\": player_user })\n                }\n                let consume = () => {\n                    if (player_user) {\n                        for (let i = player_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (player_wildcard_deck[i] == wildcard_name) {\n                                player_wildcard_deck.splice(i, 1);\n                                console.log(\"PW \"+ player_wildcard_deck)\n                            }\n                        }\n                    } else {\n                        for (let i = bot_wildcard_deck.length - 1; i >= 0; i--) {\n                            if (bot_wildcard_deck[i] == wildcard_name) {\n                                bot_wildcard_deck.splice(i, 1);\n                                console.log(\"BW \" + bot_wildcard_deck)\n                            }\n                        }\n                    }\n                    // Kick drum\n                    music.play(\n                        music.createSoundExpression(\n                        WaveShape.Square, \n                        200, 1, 255, 0, 100, \n                        SoundExpressionEffect.None, \n                        InterpolationCurve.Curve),\n                        music.PlaybackMode.UntilDone)\n                }\n\n                console.log(wildcard_name)\n\n                switch (wildcard_name) {\n                    case \"Sun\":\n                        // Set goal to 24.\n                        previous_goals.push(blackjack_goal)\n                        blackjack_goal = 24\n\n                        basic.showLeds(`\n                        # . # . #\n                        . # # # .\n                        # # # # #\n                        . # # # .\n                        # . # . #\n                        `)\n\n                        place()\n                        consume()\n                        \n                        message_splash(\"Sun!\")\n                        message_splash(\"Go for\" + blackjack_goal, 2)\n                        break\n                    case \"Moon\":\n                        // Set goal to 17.\n                        previous_goals.push(blackjack_goal)\n                        blackjack_goal = 17\n\n                        basic.showLeds(`\n                        . # # # .\n                        . . # # #\n                        . . . # #\n                        . . # # #\n                        . # # # .\n                        `)\n                        place()\n                        consume()\n                        message_splash(\"Moon!\")\n                        message_splash(\"Go for \" + blackjack_goal, 2)\n                        break\n                    case \"Justice\":\n                        // Swap last drawn cards in hand\n                        let temp: number = bot[\"last_draw\"]\n                        bot[\"last_draw\"] = player[\"last_draw\"]\n                        player[\"last_draw\"] = temp\n\n                        bot_hand.pop()\n                        bot_hand.push(bot[\"last_draw\"])\n\n                        player_hand.pop()\n                        player_hand.push(player[\"last_draw\"])\n\n                        basic.showLeds(`\n                        . # . # .\n                        # # # # #\n                        . . # . .\n                        . . # . .\n                        . # # # .\n                        `)\n                        message_splash(\"Justice!\")\n                        message_splash(\"Swapped\" + bot[\"last_draw\"] +\" & \"+ player[\"last_draw\"], 2)\n                        place()\n                        consume()\n                        break\n                    case \"Strength\":\n                        // Both players get same random wildcard.\n                        // Insta-use.\n                        let new_wildcard: Dictionary = wildcards._pickRandom()\n\n                        if (player_user) {\n                            player_wildcard_deck.push(new_wildcard)\n                        } else {\n                            bot_wildcard_deck.push(new_wildcard)\n                        }\n\n                        basic.showLeds(`\n                        . . . # .\n                        . . # # .\n                        . . # . .\n                        . # # . .\n                        . # . . .\n                        `)\n                        \n                        message_splash(\"Strength!\")\n                        message_splash(\" + \" + new_wildcard[\"name\"], 2)\n                        consume()\n\n                        break\n                    case \"The Devil\":\n                        // Increment bet by 1.\n                        bet++\n                        basic.showLeds(`\n                        # . . . #\n                        # # . # #\n                        . # # # .\n                        . # . # .\n                        . . # . .\n                        `)\n\n                        message_splash(\"Devil!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        consume()\n\n                        break\n                    case \"The Star\":\n                        // Decrement bet by 1.\n                        bet--\n                        basic.showLeds(`\n                        . . # . .\n                        . # # # .\n                        # # . # #\n                        . # # # .\n                        . . # . .\n                        `)\n                \n                        message_splash(\"Star!\")\n                        message_splash(\"Bet: \" + bet, 2)\n                        place()\n                        consume()\n\n                        break\n                    case \"The Fool\":\n                        // Copy last placed wildcard.\n                        // Cannot copy itself or nothing.\n                        // Insta-use (this card specifically)\n                        if (placed_wildcards.length == 0)  {\n                            message_screen(\"Nothing to copy!\")\n                            break\n                        }\n\n                        let latest_wildcard: string = placed_wildcards[-1][\"name\"]\n\n                        if (latest_wildcard == \"The Fool\") {\n                            // Disallow copying The Fool (prevents breaking the game)\n                            message_screen(\"Cannot copy!\")\n                            break\n                        } else {\n                            basic.showLeds(`\n                            . # . # .\n                            . . . . .\n                            . . # . .\n                            # . . . #\n                            . # # # .\n                            `)\n\n                            music.play(\n                                music.builtinPlayableSoundEffect(soundExpression.giggle),\n                                music.PlaybackMode.UntilDone)\n                            consume()\n                            wildcard_use(latest_wildcard, player_user)\n                        }\n                        \n                        break\n                    case \"The Magician\":\n                        // Return last drawn card to deck.\n                        // Insta-use.\n                        if (player_user) {\n                            deck.push(player_hand.pop())\n                            message_splash(\" -\" + player[\"last_draw\"], 2)\n                            player[\"last_draw\"] = player_hand[-1]\n                            \n                        } else {\n                            deck.push(bot_hand.pop())\n                            message_splash(\"Bot: -\" + player[\"last_draw\"], 2)\n                            bot[\"last_draw\"] = bot_hand[-1]\n                        }\n                        message_splash(\"Magician!\")\n                        consume()\n                        break\n                    case \"Death\":\n                        // Removes opponent's last placed wildcard.\n                        if (placed_wildcards.length == 0) {\n                            message_screen(\"Can't remove!\")\n                            break\n                        }\n\n                        bet = death_wildcard(bet)\n                        message_splash(\"Death.\")\n                        consume()\n                        break\n                    default:\n                        console.log(\"Card not found!: \" + wildcard_name)\n                        message_splash(\"ERROR!\")\n                        message_splash(\"INV CARD\", 2)\n                        break\n                }\n\n            }\n\n            if (player[\"standing\"] && bot[\"standing\"]) {\n                break\n            }\n\n            // VIEW WILDCARDS\n            if (wildcard_toggle) {\n                // Wildcard display // waypoint:1\n                wildcard_display_working = true\n                let value: any = wildcard_display()\n                \n                console.log(typeof value === \"string\")\n                \n                if (typeof value === \"string\") {\n\n                    console.log(\"Used \" + value)\n                    wildcard_use(value, true)\n\n                    \n                    console.log(\"Player hand:\" + player_hand.join())\n                }\n            } else {\n                wildcard_display_working = false\n            }\n\n            input.onPinPressed(TouchPin.P2, function () {\n                wildcard_toggle = !wildcard_toggle\n                main_working = !main_working\n                console.log(\"Wildcard screen toggle: \"+ wildcard_toggle)\n            })\n\n            basic.pause(1000)\n\n            tube_module_show_points()\n\n        }\n\n        bet++\n        \n        who_won(bet)\n\n        console.log(\"Player hand:\" + player_hand.join())\n        console.log(\"Bot hand:\" + bot_hand.join())\n\n        display_sum_of_both_hands()\n\n        basic.pause(4000)\n\n        OLED12864_I2C.clear()\n    }\n\n\n    if (player[\"points\"] > bot[\"points\"]) {\n        // Player wins\n        OLED12864_I2C.showString(0, 0, \"YOU WIN!\", 1)\n        console.log(\"PLAYER WINS!\")\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.JumpUp), \n        music.PlaybackMode.InBackground)\n    } else {\n        // Bot wins\n        OLED12864_I2C.showString(0, 0, \"YOU LOSE!\", 1)\n        console.log(\"PLAYER LOSES!\")\n        music._playDefaultBackground(\n            music.builtInPlayableMelody(Melodies.Funeral), \n            music.PlaybackMode.InBackground)\n    }\n    OLED12864_I2C.showString(0, 3, \"Reset to play again.\", 1)\n    tube_module_show_points()\n    basic.pause(5000)\n\n    // END GAME\n    \n    basic.clearScreen()\n    \n    my_tm.off()\n    OLED12864_I2C.off()\n\n    return\n}\n\nfunction death_wildcard(bet: number): number {\n    // Removes opponent's last placed wildcard.\n    // Undoes effect of removed wildcard\n    // Does NOT apply to insta-use wildcards\n\n    let wildcard_to_remove: Dictionary = placed_wildcards[-1]\n    //let previous_wildcard: Dictionary = placed_wildcards[-2]\n    \n    switch(wildcard_to_remove) {\n        case \"The Devil\":\n            // UNDO Increment bet by 1.\n            bet--\n            message_splash(\"Bet: \" + bet, 2)\n            break\n        case \"The Star\":\n            // UNDO Decrement bet by 1.\n            bet++\n            message_splash(\"Bet: \" + bet, 2)\n            break\n        case \"Sun\":\n            // UNDO Set goal to 24.\n            blackjack_goal = previous_goals.pop()\n            message_splash(\"Go for\" + blackjack_goal, 2)\n            break\n        case \"Moon\":\n            // UNDO Set goal to 17.\n            blackjack_goal = previous_goals.pop()\n            message_splash(\"Go for \" + blackjack_goal, 2)\n            break\n        case \"Justice\":\n            // UNDO Swap last drawn cards in hand (literally the same thing)\n            let temp: number = bot[\"last_draw\"]\n            bot[\"last_draw\"] = player[\"last_draw\"]\n            player[\"last_draw\"] = temp\n\n            bot_hand.pop()\n            bot_hand.push(bot[\"last_draw\"])\n\n            player_hand.pop()\n            player_hand.push(player[\"last_draw\"])\n\n            message_splash(\"Swapped\" + bot[\"last_draw\"] + \" & \" + player[\"last_draw\"], 2)\n            break\n        default:\n            console.log(\"Death failed: \" + wildcard_to_remove)\n            message_splash(\"ERROR!\")\n            message_splash(\"INV DTH\", 2)\n            break\n    }\n\n    basic.showLeds(`\n    # . . . #\n    . # . # .\n    . . # . .\n    . # . # .\n    # . . . #\n    `)\n\n    return bet\n\n}\n\nfunction wildcard_display(): string | void {\n    OLED12864_I2C.clear()\n    \n    console.log(\"wildcard_display ran!\")\n\n    let i: number = 0\n\n    for (let card of player_wildcard_deck) {\n        let card_name: string = card[\"name\"]\n\n        if (i == pointer) {\n            console.log(\"> \" + card_name)\n        } else {\n            console.log(card_name)\n        }\n\n        OLED12864_I2C.showString(2, i, card_name, 1)\n        ++i\n    }\n\n    // Scroll up\n    input.onGesture(Gesture.TiltRight, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer up\")\n\n            if (typeof redraw_pointer === 'function') {\n                pointer--\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n\n        }\n    })\n \n    // Scroll down\n    input.onGesture(Gesture.TiltLeft, function () {\n        if (wildcard_display_working) {\n            console.log(\"Pointer down\")\n            if (typeof redraw_pointer === 'function') {\n                pointer++\n                pointer = Math.constrain(pointer, 0, 3)\n                redraw_pointer()\n            }\n        }\n    })\n\n    // Select wildcard\n\n    WaitUntilBlocks.waitUntilButtonPressed(Button.A)\n    let selected_card: string | void\n    if (wildcard_display_working) {\n        console.log(\"YEAHEAYEAYEAYEAYEHHAhwdyuefhresfeuifuie\")\n        selected_card = player_wildcard_deck[pointer][\"name\"]\n        wildcard_display_working = false\n        \n    }\n    return selected_card\n    \n        \n}\nfunction who_won(bet: number) {\n\n    function player_wins() {\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n        message_screen(\"Player wins!\")\n    }\n\n    function bot_wins() {\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n        message_screen(\"Bot wins!\")\n        music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n    }\n\n    // Calculate round winner\n\n    let total_player_hand: number = sum(player_hand)\n    let total_bot_hand: number = sum(bot_hand)\n\n    if (total_player_hand > blackjack_goal) {\n        if (total_bot_hand < blackjack_goal) {\n            // Player loses if player busts and bot does not.\n            console.log(\"You busted! Bot wins the round.\")\n            bot_wins()\n\n        } else if (total_player_hand < total_bot_hand) {\n            // Player wins if both busted, but player busts the least.\n            console.log(\"You win the round!\")\n            player_wins()\n\n        } else {\n            // Player loses if both busted, but bot busts the least.\n            console.log(\"Bot wins the round!\")\n            bot_wins()\n        }\n\n    } else if (total_player_hand > total_bot_hand) {\n        // Neither busts, player wins if player's hand is more than bot's.\n        console.log(\"You win the round!\")\n        player_wins()\n\n    } else if (total_bot_hand > blackjack_goal) {\n        // Player wins if bot busts and player does not.\n        console.log(\"Bot busted! You win the round.\")\n        player_wins()\n        \n    } else if (total_player_hand == total_bot_hand) {\n        // Tie game if both hands are equal.\n        console.log(\"It's a tie!\")\n        message_screen(\"Tie game!\")\n\n    } else {\n        // Player loses if neither busts, but bot's hand is more than player's.\n        console.log(\"Bot wins the round!\")\n        bot_wins()\n    }\n\n    console.log(\"Player points: \" + player[\"points\"])\n    console.log(\"Bot points: \" + bot[\"points\"])\n    \n    let show_bot_total = \"Bot had \" + total_bot_hand\n\n    OLED12864_I2C.showString(0, 3, show_bot_total, 1)\n}\n\nfunction display_sum_of_both_hands() {\n    console.log(\"Sum of player hand: \"+ sum(player_hand))\n    console.log(\"Sum of bot hand: \" + sum(bot_hand))\n}\n\n\nfunction tube_module_show_points() {\n    let player_points = Math.constrain(player[\"points\"], 0, INITIAL_POINTS * 2)\n    let bot_points = Math.constrain(bot[\"points\"], 0, INITIAL_POINTS * 2)\n\n    my_tm.showNumber(player_points * 100 + bot_points)\n}\n\nfunction message_splash(message: string, y_pos: number = 1) {\n    // Shows a message on the OLED during gameplay.\n    console.log(message)\n\n    control.inBackground(function() {\n        basic.pause(10)\n        OLED12864_I2C.showString(0, y_pos, message, 1)\n        basic.pause(2000)\n        OLED12864_I2C.showString(0, y_pos, message, 0)\n    })\n}\n\nfunction message_screen(message: string, y_pos: number = 1) {\n    // Shows seperate screen message on the OLED.\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.showString(0, y_pos, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n}\n\nfunction main_display() {\n\n    OLED12864_I2C.clear()\n\n    let card_to_display: string;\n    let index: number = 0\n\n    for (let card of player_hand) {\n        card_to_display  = \" \" + card\n        OLED12864_I2C.showString(index * 2.7, 3, card_to_display, 1)\n        index += 1\n    }\n\n    index = 0\n    \n    for (let bcard of bot_hand) {\n        card_to_display = \" \" + bcard\n        if (index) {\n            OLED12864_I2C.showString(index * 2, 0, card_to_display, 1) // INDEX MULTIPLIER MAYBE FIX!!!!!! -------------------\n        } else {\n            OLED12864_I2C.showString(index * 2, 0, \"?\", 1)\n        }\n        index += 1\n    }\n}\n\nfunction redraw_pointer(): void {\n    for (let i: number = 0; i >= 3; i++) {\n        if (i == pointer) {\n            OLED12864_I2C.showString(0, pointer, \">\", 1)\n\n        } else {\n            OLED12864_I2C.showString(0, i, \" \", 0)\n        }\n    }\n}\n\n\nfunction main_menu() {\n    OLED12864_I2C.showString(0, 0, \"   ARCANA\", 1)\n    OLED12864_I2C.showString(0, 1, \"  BLACKJACK\", 1)\n    OLED12864_I2C.showString(0, 3, \"SHAKE to play\", 1)\n    OLED12864_I2C.invert(true)\n    \n    input.onGesture(Gesture.Shake, function() {\n        console.log(\"shaked!\")\n        OLED12864_I2C.invert(false)\n        play_blackjack()\n    })\n    \n}\n\n\n\nmain_menu()","README.md":"","main.py":"# Constants\nINITIAL_POINTS = 10\nINITIAL_BET = 1\n\ndeck: List[number] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\nblackjack_goal = 21  # Reset every round\n\nbet = INITIAL_BET\nOLED12864_I2C.init(60)\nmusic.set_built_in_speaker_enabled(False)\nmusic.set_volume(255)\n\nmy_tm = TM1637.create(DigitalPin.P1, DigitalPin.P2, 7, 4)\nmy_tm.on()\n\n\ndef win_round():\n    music._play_default_background(music.built_in_playable_melody(Melodies.POWER_UP), music.PlaybackMode.IN_BACKGROUND)\n\ntoggle = 0\ndef change_toggle(toggle):\n    global toggle\n    if toggle == 0:\n        pins.digital_write_pin(DigitalPin.P1, 1)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 1\n    elif toggle == 1:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 1)\n        pins.digital_write_pin(DigitalPin.P3, 0)\n        toggle = 2\n    elif toggle == 2:\n        pins.digital_write_pin(DigitalPin.P1, 0)\n        pins.digital_write_pin(DigitalPin.P2, 0)\n        pins.digital_write_pin(DigitalPin.P3, 1)\n        toggle = 0\n    print(toggle)\n\n\ndef round(n):\n    n = n*1\n    integer_part = int(n)  # Get the integer part\n    decimal_part = n - integer_part  # Get the fractional part\n    \n    if decimal_part < 0.5:\n        return integer_part  # Round down\n    else:\n        return integer_part + 1  # Round up\n\ndef sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n  # Ensure all inputs are converted to floats before summing\n        \n    return total\n    \n\ndef len(lst):\n    count = 0\n    for _ in lst:\n        count += 1\n    return count\n\ndef set(lst):\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n    return unique_items\n\ndef custom_shuffle(lst: List[number]):\n    length = len(lst)\n    for i in range(length - 1, 0, -1):\n        j = randint(0, i)\n        temp  = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\nplayer = {\n    \"name\": \"Player\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nplayer_hand: List[number] = []\nplayer_wildcard_deck = [\"\"]\nplayer_placed_wildcards = []\n\nbot = {\n    \"name\": \"Bot\",\n    \"points\": INITIAL_POINTS,\n    \"last_draw\": 0,\n    \"standing\": False,\n    \"invulnerable\": False,\n}\n\nbot_hand: List[number] = []\nbot_wildcard_deck = [\"\"]\nbot_placed_wildcards = []\n\n\nwildcards = [\n    {\"name\": \"Justice\", \"description\": \"Swap last drawn card with bot.\"},\n    {\"name\": \"Moon\", \"description\": \"Change blackjack goal to 17.\"},\n    {\"name\": \"Sun\", \"description\": \"Change blackjack goal to 24.\"},\n    {\"name\": \"Death\", \"description\": \"Removes opponent's last wildcard.\"},\n    {\"name\": \"Strength\", \"description\": \"Both players get a random wildcard.\"},\n    {\"name\": \"The Devil\", \"description\": \"Increase bet by 1.\"},\n    {\"name\": \"The Star\", \"description\": \"Decrease bet by 1.\"},\n    {\"name\": \"The Fool\", \"description\": \"Copy opponent's last wildcard.\"},\n    {\"name\": \"The Magician\", \"description\": \"Return last drawn card to deck.\"},\n    {\"name\": \"Temperance\", \"description\": \"Average all hand cards.\"},\n    {\"name\": \"The Tower\", \"description\": \"Remove all 1s and 2s.\"},\n    {\"name\": \"The High Priestess\", \"description\": \"Cannot lose points this round.\"},\n    {\"name\": \"The Chariot\", \"description\": \"Reveal opponent's hidden card.\"},\n    {\"name\": \"The Lovers\", \"description\": \"Subtract 5 from hand.\"},\n]\n\ndef bot_decision_draw(deck: List[int]):\n    \"\"\"known_cards = set(player_hand + bot_hand)\n    \n    remaining_deck = []\n    for card in known_cards:\n        if card not in deck:\n            remaining_deck.append(card)\n    \n    n = 0\n    for ncard in remaining_deck:\n        if bot_hand + ncard > blackjack_goal:\n            n += 1\n    bust_chance = n / len(remaining_deck)\n\n    \"\"\"\n    #if bot_wildcard_deck and randint(0, 10) < 3:\n    #    pass\n    if sum(bot_hand) >= 15:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n    else:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n    \n    \"\"\"\n    if bust_chance < 0.4:\n        bot_draw_card(deck)\n        print(\"Bot hits.\")\n        return\n    else:\n        bot[\"standing\"] = True\n        print(\"Bot stands.\")\n        return\n    \"\"\"\n\n\ndef player_draw_card(deck: List[int]):\n    if deck:\n        card: any = deck.pop()\n        player_hand.append(card)\n        player[\"last_draw\"]: number = card\n        print(f\"Player drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            player_wildcard_deck.append(new_wildcard)\n            print(f\"You received a wildcard:\" + new_wildcard)\n\n        if sum(player_hand) > blackjack_goal:\n            print(\"Busted!\")\n\n\n\ndef bot_draw_card(deck: List[int]):\n    if deck:\n        card: number = deck.pop()\n        bot_hand.append(card)\n        bot[\"last_draw\"] = card\n        print(f\"Bot drew a card\")\n\n        if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n            new_wildcard: string = wildcards._pick_random()['name']\n            bot_wildcard_deck.append(new_wildcard)\n            print(\"Bot received a wildcard: \" + new_wildcard)\n\ndef reset_hands():\n    player[\"last_draw\"] = 0\n    bot[\"last_draw\"] = 0\n\n    player[\"standing\"] = False\n    bot[\"standing\"] = False\n\n    while len(player_hand) > 0:\n        player_hand.pop()\n\n    while len(bot_hand) > 0:\n        bot_hand.pop()\n\n    print(player_hand)\n    print(bot_hand)\n    print(\"Hands resetted!\")\n\ndef play_blackjack():\n    global blackjack_goal\n    bet = 1\n    in_playable_state = True\n    while in_playable_state:\n        print(bet)\n        deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        custom_shuffle(deck)\n\n        reset_hands()\n\n        player_draw_card(deck)\n        bot_draw_card(deck)\n        bot_draw_card(deck)\n\n        while not (player[\"standing\"] and bot[\"standing\"]):\n            # HIT\n            def on_button_pressed_a():\n            \n                if len(player_hand) > 4:\n                    message_screen(\"Hand full!\")\n                else:\n                    player_draw_card(deck)\n\n            input.on_button_pressed(Button.A, on_button_pressed_a)\n                \n            # STAND\n            def on_button_pressed_b():\n                player[\"standing\"] = True\n\n                if randint(0, 10) < 2:  # 20% chance to get a wildcard on draw\n                    new_wildcard: string = wildcards._pick_random()['name']\n                    print(f\"You received a wildcard:\" + new_wildcard)\n                \n                # Bot draws from deck until stand\n                while not bot[\"standing\"]:\n                    bot_decision_draw(deck)\n                    basic.pause(200)\n\n            input.on_button_pressed(Button.B, on_button_pressed_b)\n            \n            basic.pause(1000)\n            main_display()\n            tube_module_show_points()\n\n        bet += 1\n        who_won()\n        \n        print(player_hand)\n        print(bot_hand)\n        asdf()\n\n        basic.pause(2000)\n        OLED12864_I2C.clear()\n\n\n\nplay_blackjack()\n\ndef who_won():\n    if sum(player_hand) > blackjack_goal:\n        print(\"You busted! Bot wins the round.\")\n        player[\"points\"] -= bet\n        bot[\"points\"] += bet\n\n        message_screen(\"Bot wins!\")\n\n    elif sum(bot_hand) > blackjack_goal:\n        print(\"Bot busted! You win the round.\")\n        bot[\"points\"] -= bet\n        player[\"points\"] += bet\n        win_round()\n\n        message_screen(\"Player wins!\")\n    else:\n        if (sum(player_hand) > sum(bot_hand)):\n            print(\"You win the round!\")\n            player[\"points\"] += bet\n            bot[\"points\"] -= bet\n            win_round()\n\n            message_screen(\"Player wins!\")\n        elif sum(player_hand) == sum(bot_hand):\n            print(\"It's a tie!\")\n            message_screen(\"Tie game!\")\n        else:\n            print(\"Bot wins the round!\")\n            player[\"points\"] -= bet\n            bot[\"points\"] += bet\n\n            message_screen(\"Bot wins!\")\n\n    show_bot_total: str = \"Bot had \" + sum(bot_hand)\n    OLED12864_I2C.show_string(0, 3, show_bot_total, 1)\n\ndef asdf():\n    print(sum(player_hand))\n    print(sum(bot_hand))\n\ndef tube_module_show_points():\n    my_tm.show_number(player[\"points\"] * 100 + bot[\"points\"])\n\ndef message_screen(message: str):\n    OLED12864_I2C.clear()\n    basic.pause(10)\n    OLED12864_I2C.show_string(0, 1, message, 1)\n    basic.pause(1000)\n    OLED12864_I2C.clear()\n\n\ndef main_display():\n    index = 0\n    for card in player_hand:\n        card_to_display = \" \" + card\n        OLED12864_I2C.show_string(index*2.7, 3, card_to_display, 1)\n\n        index += 1\n    \n    index = 0\n    for bcard in bot_hand:\n        card_to_display = \" \" + bcard\n        OLED12864_I2C.show_string(index*2.7, 0, card_to_display, 1)\n        index += 1\n\ndef wildcard_display():\n    i = 0\n    for card in player_wildcard_deck:\n        OLED12864_I2C.show_string(0, i, card['name'], 1)\n\n\ndef on_pin_pressed_p0():\n    pass\ninput.on_pin_pressed(TouchPin.P1, on_pin_pressed_p0)","pxt.json":"{\n    \"name\": \"g - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"TM1637\": \"github:makecode-extensions/tm1637#v1.0.0\",\n        \"Wait Until Custom Blocks\": \"github:teacherpinky/wait-until-blocks#v0.1.12\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1741388163395}